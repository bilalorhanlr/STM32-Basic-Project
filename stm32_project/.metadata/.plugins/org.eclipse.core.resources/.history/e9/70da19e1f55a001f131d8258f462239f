#include "stm32f4xx.h"

void SystemClock_Config(void);
void GPIO_Init(void);
void USART2_Init(void);
void USART_Write(char ch);
char USART_Read(void);

int main(void) {
    SystemClock_Config();
    GPIO_Init();
    USART2_Init();

    while (1) {
        char received = USART_Read(); // UART üzerinden karakter al

        USART_Write(received); // Alınan karakteri terminale gönder

        switch (received) {
            case 'k':
                GPIOD->ODR |= (1 << 14); // Kırmızı LED (PD14)
                break;
            case 't':
                GPIOD->ODR |= (1 << 13); // Turuncu LED (PD13)
                break;
            case 'm':
                GPIOD->ODR |= (1 << 15); // Mavi LED (PD15)
                break;
            case 'y':
                GPIOD->ODR |= (1 << 12); // Yeşil LED (PD12)
                break;
            case 'c':
                GPIOD->ODR &= ~((1 << 12) | (1 << 13) | (1 << 14) | (1 << 15)); // Tüm LED'leri söndür
                break;
            default:
                break;
        }
    }
}

void SystemClock_Config(void) {
    RCC->CR |= RCC_CR_HSION; // HSI osilatörünü etkinleştir
    while (!(RCC->CR & RCC_CR_HSIRDY)); // HSI hazır olana kadar bekle
    FLASH->ACR = FLASH_ACR_LATENCY_0WS; // Flash gecikmesini ayarla
    RCC->CFGR |= RCC_CFGR_SW_HSI; // HSI'yı sistem saati olarak seç
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI); // Sistem saati olarak HSI'yı seçildiğinden emin ol
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1; // AHB önbölücü: 1
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV1; // APB1 önbölücü: 1
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV1; // APB2 önbölücü: 1
}

void GPIO_Init(void) {
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN; // GPIOD saatini etkinleştir

    // PD12, PD13, PD14, PD15 pinlerini çıkış olarak ayarla (Yeşil, Turuncu, Kırmızı, Mavi LED'ler)
    GPIOD->MODER &= ~((0x3 << (12 * 2)) | (0x3 << (13 * 2)) | (0x3 << (14 * 2)) | (0x3 << (15 * 2)));
    GPIOD->MODER |= (0x1 << (12 * 2)) | (0x1 << (13 * 2)) | (0x1 << (14 * 2)) | (0x1 << (15 * 2));
}

void USART2_Init(void) {
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN; // USART2 saatini etkinleştir
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; // GPIOA saatini etkinleştir

    // PA2 ve PA3 için alternatif fonksiyonları ayarlak
    GPIOA->AFR[0] |= 0x7700;
    GPIOA->MODER |= 0x00A0;

    USART2->BRR = 0x0683; // Baudrate 9600
    USART2->CR1 = 0x000C; // Tx ve Rx etkinleştir
    USART2->CR1 |= 0x2000; // USART2 etkinleştir
}

void USART_Write(char ch) {
    while (!(USART2->SR & 0x0080)) {} // Gönderim tamponu boş olana kadar bekle
    USART2->DR = (ch & 0xFF);
}

char USART_Read(void) {
    while (!(USART2->SR & 0x0020)) {} // Alım tamponu dolu olana kadar bekle
    return USART2->DR & 0xFF;
}
