
pwm_tutorial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000314  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800049c  0800049c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800049c  0800049c  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  0800049c  0800049c  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800049c  0800049c  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800049c  0800049c  0001049c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080004a0  080004a0  000104a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080004a4  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   000014d1  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000004c6  00000000  00000000  00021505  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001e0  00000000  00000000  000219d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000198  00000000  00000000  00021bb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e63c  00000000  00000000  00021d48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000203f  00000000  00000000  00040384  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bb4fc  00000000  00000000  000423c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000fd8bf  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005b4  00000000  00000000  000fd910  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000484 	.word	0x08000484

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000484 	.word	0x08000484

080001c8 <main>:
void SystemClock_Config(void);
void GPIO_Init(void);
void TIM3_Init(void);
void delay(uint32_t time);

int main(void) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
    SystemClock_Config();
 80001ce:	f000 f829 	bl	8000224 <SystemClock_Config>
    GPIO_Init();
 80001d2:	f000 f849 	bl	8000268 <GPIO_Init>
    TIM3_Init();
 80001d6:	f000 f86b 	bl	80002b0 <TIM3_Init>

    while (1) {
        // PWM sinyalinin duty cycle'ını artır ve azalt
        for (int duty = 0; duty <= 1000; duty++) {
 80001da:	2300      	movs	r3, #0
 80001dc:	607b      	str	r3, [r7, #4]
 80001de:	e009      	b.n	80001f4 <main+0x2c>
            TIM3->CCR1 = duty; // Duty cycle'ı ayarla
 80001e0:	4a0f      	ldr	r2, [pc, #60]	; (8000220 <main+0x58>)
 80001e2:	687b      	ldr	r3, [r7, #4]
 80001e4:	6353      	str	r3, [r2, #52]	; 0x34
            delay(2000); // Küçük bir gecikme
 80001e6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80001ea:	f000 f89b 	bl	8000324 <delay>
        for (int duty = 0; duty <= 1000; duty++) {
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	3301      	adds	r3, #1
 80001f2:	607b      	str	r3, [r7, #4]
 80001f4:	687b      	ldr	r3, [r7, #4]
 80001f6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80001fa:	ddf1      	ble.n	80001e0 <main+0x18>
        }
        for (int duty = 1000; duty >= 0; duty--) {
 80001fc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000200:	603b      	str	r3, [r7, #0]
 8000202:	e009      	b.n	8000218 <main+0x50>
            TIM3->CCR1 = duty; // Duty cycle'ı ayarla
 8000204:	4a06      	ldr	r2, [pc, #24]	; (8000220 <main+0x58>)
 8000206:	683b      	ldr	r3, [r7, #0]
 8000208:	6353      	str	r3, [r2, #52]	; 0x34
            delay(2000); // Küçük bir gecikme
 800020a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800020e:	f000 f889 	bl	8000324 <delay>
        for (int duty = 1000; duty >= 0; duty--) {
 8000212:	683b      	ldr	r3, [r7, #0]
 8000214:	3b01      	subs	r3, #1
 8000216:	603b      	str	r3, [r7, #0]
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	2b00      	cmp	r3, #0
 800021c:	daf2      	bge.n	8000204 <main+0x3c>
        for (int duty = 0; duty <= 1000; duty++) {
 800021e:	e7dc      	b.n	80001da <main+0x12>
 8000220:	40000400 	.word	0x40000400

08000224 <SystemClock_Config>:
        }
    }
}

void SystemClock_Config(void) {
 8000224:	b480      	push	{r7}
 8000226:	af00      	add	r7, sp, #0
    RCC->CR |= RCC_CR_HSION; // HSI osilatörünü etkinleştir
 8000228:	4b0e      	ldr	r3, [pc, #56]	; (8000264 <SystemClock_Config+0x40>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a0d      	ldr	r2, [pc, #52]	; (8000264 <SystemClock_Config+0x40>)
 800022e:	f043 0301 	orr.w	r3, r3, #1
 8000232:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_HSIRDY)); // HSI hazır olana kadar bekle
 8000234:	bf00      	nop
 8000236:	4b0b      	ldr	r3, [pc, #44]	; (8000264 <SystemClock_Config+0x40>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f003 0302 	and.w	r3, r3, #2
 800023e:	2b00      	cmp	r3, #0
 8000240:	d0f9      	beq.n	8000236 <SystemClock_Config+0x12>
    RCC->CFGR |= RCC_CFGR_SW_HSI; // HSI'yı sistem saati olarak seç
 8000242:	4b08      	ldr	r3, [pc, #32]	; (8000264 <SystemClock_Config+0x40>)
 8000244:	4a07      	ldr	r2, [pc, #28]	; (8000264 <SystemClock_Config+0x40>)
 8000246:	689b      	ldr	r3, [r3, #8]
 8000248:	6093      	str	r3, [r2, #8]
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI); // HSI'nın sistem saati olduğunu doğrula
 800024a:	bf00      	nop
 800024c:	4b05      	ldr	r3, [pc, #20]	; (8000264 <SystemClock_Config+0x40>)
 800024e:	689b      	ldr	r3, [r3, #8]
 8000250:	f003 030c 	and.w	r3, r3, #12
 8000254:	2b00      	cmp	r3, #0
 8000256:	d1f9      	bne.n	800024c <SystemClock_Config+0x28>
}
 8000258:	bf00      	nop
 800025a:	bf00      	nop
 800025c:	46bd      	mov	sp, r7
 800025e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000262:	4770      	bx	lr
 8000264:	40023800 	.word	0x40023800

08000268 <GPIO_Init>:

void GPIO_Init(void) {
 8000268:	b480      	push	{r7}
 800026a:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; // GPIOA saatini etkinleştir
 800026c:	4b0e      	ldr	r3, [pc, #56]	; (80002a8 <GPIO_Init+0x40>)
 800026e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000270:	4a0d      	ldr	r2, [pc, #52]	; (80002a8 <GPIO_Init+0x40>)
 8000272:	f043 0301 	orr.w	r3, r3, #1
 8000276:	6313      	str	r3, [r2, #48]	; 0x30

    // PA6 pinini alternatif fonksiyon olarak ayarla (TIM3 CH1)
    GPIOA->MODER &= ~(0x3 << (6 * 2));
 8000278:	4b0c      	ldr	r3, [pc, #48]	; (80002ac <GPIO_Init+0x44>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	4a0b      	ldr	r2, [pc, #44]	; (80002ac <GPIO_Init+0x44>)
 800027e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000282:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (0x2 << (6 * 2));
 8000284:	4b09      	ldr	r3, [pc, #36]	; (80002ac <GPIO_Init+0x44>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	4a08      	ldr	r2, [pc, #32]	; (80002ac <GPIO_Init+0x44>)
 800028a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800028e:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] |= (0x2 << (6 * 4)); // PA6 pinini TIM3_CH1 fonksiyonuna ayarla (AF2)
 8000290:	4b06      	ldr	r3, [pc, #24]	; (80002ac <GPIO_Init+0x44>)
 8000292:	6a1b      	ldr	r3, [r3, #32]
 8000294:	4a05      	ldr	r2, [pc, #20]	; (80002ac <GPIO_Init+0x44>)
 8000296:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800029a:	6213      	str	r3, [r2, #32]
}
 800029c:	bf00      	nop
 800029e:	46bd      	mov	sp, r7
 80002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	40023800 	.word	0x40023800
 80002ac:	40020000 	.word	0x40020000

080002b0 <TIM3_Init>:

void TIM3_Init(void) {
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM3EN; // TIM3 saatini etkinleştir
 80002b4:	4b19      	ldr	r3, [pc, #100]	; (800031c <TIM3_Init+0x6c>)
 80002b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002b8:	4a18      	ldr	r2, [pc, #96]	; (800031c <TIM3_Init+0x6c>)
 80002ba:	f043 0302 	orr.w	r3, r3, #2
 80002be:	6413      	str	r3, [r2, #64]	; 0x40

    TIM3->PSC = 16 - 1; // Prescaler değeri (16MHz / 16 = 1MHz)
 80002c0:	4b17      	ldr	r3, [pc, #92]	; (8000320 <TIM3_Init+0x70>)
 80002c2:	220f      	movs	r2, #15
 80002c4:	629a      	str	r2, [r3, #40]	; 0x28
    TIM3->ARR = 1000 - 1; // Auto-reload register (1kHz PWM frekansı)
 80002c6:	4b16      	ldr	r3, [pc, #88]	; (8000320 <TIM3_Init+0x70>)
 80002c8:	f240 32e7 	movw	r2, #999	; 0x3e7
 80002cc:	62da      	str	r2, [r3, #44]	; 0x2c

    TIM3->CCMR1 |= (0x6 << 4); // PWM mod 1
 80002ce:	4b14      	ldr	r3, [pc, #80]	; (8000320 <TIM3_Init+0x70>)
 80002d0:	699b      	ldr	r3, [r3, #24]
 80002d2:	4a13      	ldr	r2, [pc, #76]	; (8000320 <TIM3_Init+0x70>)
 80002d4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80002d8:	6193      	str	r3, [r2, #24]
    TIM3->CCMR1 |= TIM_CCMR1_OC1PE; // Çıkış ön yüklemesini etkinleştir
 80002da:	4b11      	ldr	r3, [pc, #68]	; (8000320 <TIM3_Init+0x70>)
 80002dc:	699b      	ldr	r3, [r3, #24]
 80002de:	4a10      	ldr	r2, [pc, #64]	; (8000320 <TIM3_Init+0x70>)
 80002e0:	f043 0308 	orr.w	r3, r3, #8
 80002e4:	6193      	str	r3, [r2, #24]

    TIM3->CCER |= TIM_CCER_CC1E; // Çıkışı etkinleştir
 80002e6:	4b0e      	ldr	r3, [pc, #56]	; (8000320 <TIM3_Init+0x70>)
 80002e8:	6a1b      	ldr	r3, [r3, #32]
 80002ea:	4a0d      	ldr	r2, [pc, #52]	; (8000320 <TIM3_Init+0x70>)
 80002ec:	f043 0301 	orr.w	r3, r3, #1
 80002f0:	6213      	str	r3, [r2, #32]

    TIM3->CR1 |= TIM_CR1_ARPE; // Auto-reload ön yüklemesini etkinleştir
 80002f2:	4b0b      	ldr	r3, [pc, #44]	; (8000320 <TIM3_Init+0x70>)
 80002f4:	681b      	ldr	r3, [r3, #0]
 80002f6:	4a0a      	ldr	r2, [pc, #40]	; (8000320 <TIM3_Init+0x70>)
 80002f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002fc:	6013      	str	r3, [r2, #0]
    TIM3->CR1 |= TIM_CR1_CEN; // Timer'ı etkinleştir
 80002fe:	4b08      	ldr	r3, [pc, #32]	; (8000320 <TIM3_Init+0x70>)
 8000300:	681b      	ldr	r3, [r3, #0]
 8000302:	4a07      	ldr	r2, [pc, #28]	; (8000320 <TIM3_Init+0x70>)
 8000304:	f043 0301 	orr.w	r3, r3, #1
 8000308:	6013      	str	r3, [r2, #0]

    // Başlangıç duty cycle (initial duty cycle 0%)
    TIM3->CCR1 = 0; // CCR1 registerını 0 yap (duty cycle %0)
 800030a:	4b05      	ldr	r3, [pc, #20]	; (8000320 <TIM3_Init+0x70>)
 800030c:	2200      	movs	r2, #0
 800030e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000310:	bf00      	nop
 8000312:	46bd      	mov	sp, r7
 8000314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000318:	4770      	bx	lr
 800031a:	bf00      	nop
 800031c:	40023800 	.word	0x40023800
 8000320:	40000400 	.word	0x40000400

08000324 <delay>:

void delay(uint32_t time) {
 8000324:	b480      	push	{r7}
 8000326:	b083      	sub	sp, #12
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
    while (time--) {
 800032c:	e000      	b.n	8000330 <delay+0xc>
        __NOP(); // No Operation (boş işlem)
 800032e:	bf00      	nop
    while (time--) {
 8000330:	687b      	ldr	r3, [r7, #4]
 8000332:	1e5a      	subs	r2, r3, #1
 8000334:	607a      	str	r2, [r7, #4]
 8000336:	2b00      	cmp	r3, #0
 8000338:	d1f9      	bne.n	800032e <delay+0xa>
    }
}
 800033a:	bf00      	nop
 800033c:	bf00      	nop
 800033e:	370c      	adds	r7, #12
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr

08000348 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000348:	b480      	push	{r7}
 800034a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800034c:	e7fe      	b.n	800034c <NMI_Handler+0x4>

0800034e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800034e:	b480      	push	{r7}
 8000350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000352:	e7fe      	b.n	8000352 <HardFault_Handler+0x4>

08000354 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000354:	b480      	push	{r7}
 8000356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000358:	e7fe      	b.n	8000358 <MemManage_Handler+0x4>

0800035a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800035a:	b480      	push	{r7}
 800035c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800035e:	e7fe      	b.n	800035e <BusFault_Handler+0x4>

08000360 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000360:	b480      	push	{r7}
 8000362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000364:	e7fe      	b.n	8000364 <UsageFault_Handler+0x4>

08000366 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000366:	b480      	push	{r7}
 8000368:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800036a:	bf00      	nop
 800036c:	46bd      	mov	sp, r7
 800036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000372:	4770      	bx	lr

08000374 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000374:	b480      	push	{r7}
 8000376:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000378:	bf00      	nop
 800037a:	46bd      	mov	sp, r7
 800037c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000380:	4770      	bx	lr

08000382 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000382:	b480      	push	{r7}
 8000384:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000386:	bf00      	nop
 8000388:	46bd      	mov	sp, r7
 800038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038e:	4770      	bx	lr

08000390 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000394:	f000 f83e 	bl	8000414 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000398:	bf00      	nop
 800039a:	bd80      	pop	{r7, pc}

0800039c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800039c:	b480      	push	{r7}
 800039e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80003a0:	4b06      	ldr	r3, [pc, #24]	; (80003bc <SystemInit+0x20>)
 80003a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80003a6:	4a05      	ldr	r2, [pc, #20]	; (80003bc <SystemInit+0x20>)
 80003a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80003ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80003b0:	bf00      	nop
 80003b2:	46bd      	mov	sp, r7
 80003b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b8:	4770      	bx	lr
 80003ba:	bf00      	nop
 80003bc:	e000ed00 	.word	0xe000ed00

080003c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80003c0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80003f8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80003c4:	480d      	ldr	r0, [pc, #52]	; (80003fc <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80003c6:	490e      	ldr	r1, [pc, #56]	; (8000400 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80003c8:	4a0e      	ldr	r2, [pc, #56]	; (8000404 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80003ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003cc:	e002      	b.n	80003d4 <LoopCopyDataInit>

080003ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003d2:	3304      	adds	r3, #4

080003d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003d8:	d3f9      	bcc.n	80003ce <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003da:	4a0b      	ldr	r2, [pc, #44]	; (8000408 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80003dc:	4c0b      	ldr	r4, [pc, #44]	; (800040c <LoopFillZerobss+0x26>)
  movs r3, #0
 80003de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003e0:	e001      	b.n	80003e6 <LoopFillZerobss>

080003e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003e4:	3204      	adds	r2, #4

080003e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003e8:	d3fb      	bcc.n	80003e2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80003ea:	f7ff ffd7 	bl	800039c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80003ee:	f000 f825 	bl	800043c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80003f2:	f7ff fee9 	bl	80001c8 <main>
  bx  lr    
 80003f6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80003f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000400:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000404:	080004a4 	.word	0x080004a4
  ldr r2, =_sbss
 8000408:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 800040c:	20000024 	.word	0x20000024

08000410 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000410:	e7fe      	b.n	8000410 <ADC_IRQHandler>
	...

08000414 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000414:	b480      	push	{r7}
 8000416:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000418:	4b06      	ldr	r3, [pc, #24]	; (8000434 <HAL_IncTick+0x20>)
 800041a:	781b      	ldrb	r3, [r3, #0]
 800041c:	461a      	mov	r2, r3
 800041e:	4b06      	ldr	r3, [pc, #24]	; (8000438 <HAL_IncTick+0x24>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	4413      	add	r3, r2
 8000424:	4a04      	ldr	r2, [pc, #16]	; (8000438 <HAL_IncTick+0x24>)
 8000426:	6013      	str	r3, [r2, #0]
}
 8000428:	bf00      	nop
 800042a:	46bd      	mov	sp, r7
 800042c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000430:	4770      	bx	lr
 8000432:	bf00      	nop
 8000434:	20000000 	.word	0x20000000
 8000438:	20000020 	.word	0x20000020

0800043c <__libc_init_array>:
 800043c:	b570      	push	{r4, r5, r6, lr}
 800043e:	4d0d      	ldr	r5, [pc, #52]	; (8000474 <__libc_init_array+0x38>)
 8000440:	4c0d      	ldr	r4, [pc, #52]	; (8000478 <__libc_init_array+0x3c>)
 8000442:	1b64      	subs	r4, r4, r5
 8000444:	10a4      	asrs	r4, r4, #2
 8000446:	2600      	movs	r6, #0
 8000448:	42a6      	cmp	r6, r4
 800044a:	d109      	bne.n	8000460 <__libc_init_array+0x24>
 800044c:	4d0b      	ldr	r5, [pc, #44]	; (800047c <__libc_init_array+0x40>)
 800044e:	4c0c      	ldr	r4, [pc, #48]	; (8000480 <__libc_init_array+0x44>)
 8000450:	f000 f818 	bl	8000484 <_init>
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	10a4      	asrs	r4, r4, #2
 8000458:	2600      	movs	r6, #0
 800045a:	42a6      	cmp	r6, r4
 800045c:	d105      	bne.n	800046a <__libc_init_array+0x2e>
 800045e:	bd70      	pop	{r4, r5, r6, pc}
 8000460:	f855 3b04 	ldr.w	r3, [r5], #4
 8000464:	4798      	blx	r3
 8000466:	3601      	adds	r6, #1
 8000468:	e7ee      	b.n	8000448 <__libc_init_array+0xc>
 800046a:	f855 3b04 	ldr.w	r3, [r5], #4
 800046e:	4798      	blx	r3
 8000470:	3601      	adds	r6, #1
 8000472:	e7f2      	b.n	800045a <__libc_init_array+0x1e>
 8000474:	0800049c 	.word	0x0800049c
 8000478:	0800049c 	.word	0x0800049c
 800047c:	0800049c 	.word	0x0800049c
 8000480:	080004a0 	.word	0x080004a0

08000484 <_init>:
 8000484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000486:	bf00      	nop
 8000488:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800048a:	bc08      	pop	{r3}
 800048c:	469e      	mov	lr, r3
 800048e:	4770      	bx	lr

08000490 <_fini>:
 8000490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000492:	bf00      	nop
 8000494:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000496:	bc08      	pop	{r3}
 8000498:	469e      	mov	lr, r3
 800049a:	4770      	bx	lr
