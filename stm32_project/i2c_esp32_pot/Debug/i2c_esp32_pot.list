
i2c_esp32_pot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001220  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080013b0  080013b0  000113b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001410  08001410  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08001410  08001410  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001410  08001410  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001410  08001410  00011410  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001414  08001414  00011414  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08001418  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000034  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000009c  2000009c  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000179f  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000064e  00000000  00000000  00021837  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000228  00000000  00000000  00021e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001d0  00000000  00000000  000220b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f67d  00000000  00000000  00022280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000028ad  00000000  00000000  000418fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bf942  00000000  00000000  000441aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00103aec  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000b6c  00000000  00000000  00103b3c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001398 	.word	0x08001398

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08001398 	.word	0x08001398

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <delay>:
} SensorData;

#define I2C_ADDRESS 0x52  // STM32'nin I2C adresi

// Zamanlayıcı fonksiyonu (basit bir gecikme)
void delay(volatile uint32_t s) {
 80005e8:	b480      	push	{r7}
 80005ea:	b083      	sub	sp, #12
 80005ec:	af00      	add	r7, sp, #0
 80005ee:	6078      	str	r0, [r7, #4]
    for(s; s>0; s--);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	e002      	b.n	80005fa <delay+0x12>
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	3b01      	subs	r3, #1
 80005f8:	607b      	str	r3, [r7, #4]
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d1f9      	bne.n	80005f4 <delay+0xc>
}
 8000600:	bf00      	nop
 8000602:	bf00      	nop
 8000604:	370c      	adds	r7, #12
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr
	...

08000610 <System_Clock_Init>:

void System_Clock_Init(void)
{
 8000610:	b480      	push	{r7}
 8000612:	af00      	add	r7, sp, #0
    RCC->CR |= RCC_CR_HSION;  // HSI saat kaynağını etkinleştir
 8000614:	4b18      	ldr	r3, [pc, #96]	; (8000678 <System_Clock_Init+0x68>)
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	4a17      	ldr	r2, [pc, #92]	; (8000678 <System_Clock_Init+0x68>)
 800061a:	f043 0301 	orr.w	r3, r3, #1
 800061e:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_HSIRDY));  // HSI hazır olana kadar bekle
 8000620:	bf00      	nop
 8000622:	4b15      	ldr	r3, [pc, #84]	; (8000678 <System_Clock_Init+0x68>)
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	f003 0302 	and.w	r3, r3, #2
 800062a:	2b00      	cmp	r3, #0
 800062c:	d0f9      	beq.n	8000622 <System_Clock_Init+0x12>

    // HSI'yi sistem saati olarak ayarla
    RCC->CFGR &= ~RCC_CFGR_SW;
 800062e:	4b12      	ldr	r3, [pc, #72]	; (8000678 <System_Clock_Init+0x68>)
 8000630:	689b      	ldr	r3, [r3, #8]
 8000632:	4a11      	ldr	r2, [pc, #68]	; (8000678 <System_Clock_Init+0x68>)
 8000634:	f023 0303 	bic.w	r3, r3, #3
 8000638:	6093      	str	r3, [r2, #8]
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI);  // HSI sistem saati olarak seçilene kadar bekle
 800063a:	bf00      	nop
 800063c:	4b0e      	ldr	r3, [pc, #56]	; (8000678 <System_Clock_Init+0x68>)
 800063e:	689b      	ldr	r3, [r3, #8]
 8000640:	f003 030c 	and.w	r3, r3, #12
 8000644:	2b00      	cmp	r3, #0
 8000646:	d1f9      	bne.n	800063c <System_Clock_Init+0x2c>

    // GPIOB, GPIOD ve I2C1 saatini etkinleştir
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOBEN | RCC_AHB1ENR_GPIODEN;
 8000648:	4b0b      	ldr	r3, [pc, #44]	; (8000678 <System_Clock_Init+0x68>)
 800064a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800064c:	4a0a      	ldr	r2, [pc, #40]	; (8000678 <System_Clock_Init+0x68>)
 800064e:	f043 030a 	orr.w	r3, r3, #10
 8000652:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB1ENR |= RCC_APB1ENR_I2C1EN;
 8000654:	4b08      	ldr	r3, [pc, #32]	; (8000678 <System_Clock_Init+0x68>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	4a07      	ldr	r2, [pc, #28]	; (8000678 <System_Clock_Init+0x68>)
 800065a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800065e:	6413      	str	r3, [r2, #64]	; 0x40
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;  // USART2 saatini etkinleştir
 8000660:	4b05      	ldr	r3, [pc, #20]	; (8000678 <System_Clock_Init+0x68>)
 8000662:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000664:	4a04      	ldr	r2, [pc, #16]	; (8000678 <System_Clock_Init+0x68>)
 8000666:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800066a:	6413      	str	r3, [r2, #64]	; 0x40
}
 800066c:	bf00      	nop
 800066e:	46bd      	mov	sp, r7
 8000670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000674:	4770      	bx	lr
 8000676:	bf00      	nop
 8000678:	40023800 	.word	0x40023800

0800067c <GPIO_Init>:

void GPIO_Init(void)
{
 800067c:	b480      	push	{r7}
 800067e:	af00      	add	r7, sp, #0
    // I2C Pinleri (PB6 - SCL, PB9 - SDA) Alternatif Fonksiyon olarak ayarla
    GPIOB->MODER &= ~(GPIO_MODER_MODER6 | GPIO_MODER_MODER9);  // Önce modları temizleyelim
 8000680:	4b1a      	ldr	r3, [pc, #104]	; (80006ec <GPIO_Init+0x70>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	4a19      	ldr	r2, [pc, #100]	; (80006ec <GPIO_Init+0x70>)
 8000686:	f423 2343 	bic.w	r3, r3, #798720	; 0xc3000
 800068a:	6013      	str	r3, [r2, #0]
    GPIOB->MODER |= (GPIO_MODER_MODER6_1 | GPIO_MODER_MODER9_1);  // Alternatif fonksiyon moduna alalım
 800068c:	4b17      	ldr	r3, [pc, #92]	; (80006ec <GPIO_Init+0x70>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a16      	ldr	r2, [pc, #88]	; (80006ec <GPIO_Init+0x70>)
 8000692:	f443 2302 	orr.w	r3, r3, #532480	; 0x82000
 8000696:	6013      	str	r3, [r2, #0]

    // Pull-up dirençlerini etkinleştir
    GPIOB->PUPDR &= ~(GPIO_PUPDR_PUPDR6 | GPIO_PUPDR_PUPDR9);
 8000698:	4b14      	ldr	r3, [pc, #80]	; (80006ec <GPIO_Init+0x70>)
 800069a:	68db      	ldr	r3, [r3, #12]
 800069c:	4a13      	ldr	r2, [pc, #76]	; (80006ec <GPIO_Init+0x70>)
 800069e:	f423 2343 	bic.w	r3, r3, #798720	; 0xc3000
 80006a2:	60d3      	str	r3, [r2, #12]
    GPIOB->PUPDR |= (GPIO_PUPDR_PUPDR6_0 | GPIO_PUPDR_PUPDR9_0);  // Pull-up modu
 80006a4:	4b11      	ldr	r3, [pc, #68]	; (80006ec <GPIO_Init+0x70>)
 80006a6:	68db      	ldr	r3, [r3, #12]
 80006a8:	4a10      	ldr	r2, [pc, #64]	; (80006ec <GPIO_Init+0x70>)
 80006aa:	f443 2382 	orr.w	r3, r3, #266240	; 0x41000
 80006ae:	60d3      	str	r3, [r2, #12]

    // Yüksek hız modunu ayarla
    GPIOB->OSPEEDR |= (GPIO_OSPEEDER_OSPEEDR6 | GPIO_OSPEEDER_OSPEEDR9);  // Yüksek hız
 80006b0:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <GPIO_Init+0x70>)
 80006b2:	689b      	ldr	r3, [r3, #8]
 80006b4:	4a0d      	ldr	r2, [pc, #52]	; (80006ec <GPIO_Init+0x70>)
 80006b6:	f443 2343 	orr.w	r3, r3, #798720	; 0xc3000
 80006ba:	6093      	str	r3, [r2, #8]

    // Alternatif Fonksiyon 4'ü (AF4) ayarla (I2C1 için)
    GPIOB->AFR[0] |= (4 << (6 * 4));  // PB6 için AF4 ayarla (GPIOB'nin 0. AFR registeri)
 80006bc:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <GPIO_Init+0x70>)
 80006be:	6a1b      	ldr	r3, [r3, #32]
 80006c0:	4a0a      	ldr	r2, [pc, #40]	; (80006ec <GPIO_Init+0x70>)
 80006c2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80006c6:	6213      	str	r3, [r2, #32]
    GPIOB->AFR[1] |= (4 << ((9 - 8) * 4));  // PB9 için AF4 ayarla (GPIOB'nin 1. AFR registeri)
 80006c8:	4b08      	ldr	r3, [pc, #32]	; (80006ec <GPIO_Init+0x70>)
 80006ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006cc:	4a07      	ldr	r2, [pc, #28]	; (80006ec <GPIO_Init+0x70>)
 80006ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80006d2:	6253      	str	r3, [r2, #36]	; 0x24

    // GPIOD pinlerini LED'ler için ayarlıyoruz (PD14: Kırmızı LED)
    GPIOD->MODER |= GPIO_MODER_MODER14_0;  // PD14 çıkış modu (Kırmızı LED)
 80006d4:	4b06      	ldr	r3, [pc, #24]	; (80006f0 <GPIO_Init+0x74>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	4a05      	ldr	r2, [pc, #20]	; (80006f0 <GPIO_Init+0x74>)
 80006da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006de:	6013      	str	r3, [r2, #0]
}
 80006e0:	bf00      	nop
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	40020400 	.word	0x40020400
 80006f0:	40020c00 	.word	0x40020c00

080006f4 <I2C1_Init>:

void I2C1_Init(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
    // I2C'yi başlatma
    I2C1->CR1 &= ~I2C_CR1_PE;  // I2C1'i resetle
 80006f8:	4b11      	ldr	r3, [pc, #68]	; (8000740 <I2C1_Init+0x4c>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a10      	ldr	r2, [pc, #64]	; (8000740 <I2C1_Init+0x4c>)
 80006fe:	f023 0301 	bic.w	r3, r3, #1
 8000702:	6013      	str	r3, [r2, #0]

    I2C1->CR2 = 16;  // APB1 saat frekansı 16 MHz (saat frekansını giriyoruz)
 8000704:	4b0e      	ldr	r3, [pc, #56]	; (8000740 <I2C1_Init+0x4c>)
 8000706:	2210      	movs	r2, #16
 8000708:	605a      	str	r2, [r3, #4]

    // 100 kHz için Clock Control Register (CCR)
    I2C1->CCR = 80;  // I2C frekansını 100 kHz yap (100 kHz için CCR = 80)
 800070a:	4b0d      	ldr	r3, [pc, #52]	; (8000740 <I2C1_Init+0x4c>)
 800070c:	2250      	movs	r2, #80	; 0x50
 800070e:	61da      	str	r2, [r3, #28]

    // Maksimum yükselme süresi (1000ns / (1/16MHz) + 1)
    I2C1->TRISE = 17;
 8000710:	4b0b      	ldr	r3, [pc, #44]	; (8000740 <I2C1_Init+0x4c>)
 8000712:	2211      	movs	r2, #17
 8000714:	621a      	str	r2, [r3, #32]

    // I2C adresini ayarlama (7-bit adres)
    I2C1->OAR1 = (I2C_ADDRESS << 1);  // STM32'yi 0x52 adresiyle slave olarak ayarla
 8000716:	4b0a      	ldr	r3, [pc, #40]	; (8000740 <I2C1_Init+0x4c>)
 8000718:	22a4      	movs	r2, #164	; 0xa4
 800071a:	609a      	str	r2, [r3, #8]

    I2C1->CR1 |= I2C_CR1_ACK;  // Acknowledge'i (ACK) etkinleştir
 800071c:	4b08      	ldr	r3, [pc, #32]	; (8000740 <I2C1_Init+0x4c>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	4a07      	ldr	r2, [pc, #28]	; (8000740 <I2C1_Init+0x4c>)
 8000722:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000726:	6013      	str	r3, [r2, #0]
    I2C1->CR1 |= I2C_CR1_PE;  // I2C'yi aktif hale getir
 8000728:	4b05      	ldr	r3, [pc, #20]	; (8000740 <I2C1_Init+0x4c>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a04      	ldr	r2, [pc, #16]	; (8000740 <I2C1_Init+0x4c>)
 800072e:	f043 0301 	orr.w	r3, r3, #1
 8000732:	6013      	str	r3, [r2, #0]
}
 8000734:	bf00      	nop
 8000736:	46bd      	mov	sp, r7
 8000738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073c:	4770      	bx	lr
 800073e:	bf00      	nop
 8000740:	40005400 	.word	0x40005400

08000744 <UART2_Init>:

void UART2_Init(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
    USART2->BRR = 0x0683;  // Baud rate 9600 bps (16MHz clock)
 8000748:	4b06      	ldr	r3, [pc, #24]	; (8000764 <UART2_Init+0x20>)
 800074a:	f240 6283 	movw	r2, #1667	; 0x683
 800074e:	609a      	str	r2, [r3, #8]
    USART2->CR1 = USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;  // UART'ı etkinleştir, TX ve RX'i etkinleştir
 8000750:	4b04      	ldr	r3, [pc, #16]	; (8000764 <UART2_Init+0x20>)
 8000752:	f242 020c 	movw	r2, #8204	; 0x200c
 8000756:	60da      	str	r2, [r3, #12]
}
 8000758:	bf00      	nop
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	40004400 	.word	0x40004400

08000768 <UART2_Write>:

void UART2_Write(uint8_t data)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	4603      	mov	r3, r0
 8000770:	71fb      	strb	r3, [r7, #7]
    while (!(USART2->SR & USART_SR_TXE));  // TXE bayrağının set olmasını bekle
 8000772:	bf00      	nop
 8000774:	4b07      	ldr	r3, [pc, #28]	; (8000794 <UART2_Write+0x2c>)
 8000776:	681b      	ldr	r3, [r3, #0]
 8000778:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077c:	2b00      	cmp	r3, #0
 800077e:	d0f9      	beq.n	8000774 <UART2_Write+0xc>
    USART2->DR = data;  // Veriyi gönder
 8000780:	4a04      	ldr	r2, [pc, #16]	; (8000794 <UART2_Write+0x2c>)
 8000782:	79fb      	ldrb	r3, [r7, #7]
 8000784:	6053      	str	r3, [r2, #4]
}
 8000786:	bf00      	nop
 8000788:	370c      	adds	r7, #12
 800078a:	46bd      	mov	sp, r7
 800078c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	40004400 	.word	0x40004400

08000798 <UART2_Write_String>:

// UART string yazma fonksiyonu
void UART2_Write_String(const char* str) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
    while (*str) {
 80007a0:	e007      	b.n	80007b2 <UART2_Write_String+0x1a>
        UART2_Write((uint8_t)*str);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	4618      	mov	r0, r3
 80007a8:	f7ff ffde 	bl	8000768 <UART2_Write>
        str++;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	3301      	adds	r3, #1
 80007b0:	607b      	str	r3, [r7, #4]
    while (*str) {
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d1f3      	bne.n	80007a2 <UART2_Write_String+0xa>
    }
}
 80007ba:	bf00      	nop
 80007bc:	bf00      	nop
 80007be:	3708      	adds	r7, #8
 80007c0:	46bd      	mov	sp, r7
 80007c2:	bd80      	pop	{r7, pc}

080007c4 <UART2_Write_Struct>:

// Struct verisini UART üzerinden yazdırma
void UART2_Write_Struct(SensorData data) {
 80007c4:	b5b0      	push	{r4, r5, r7, lr}
 80007c6:	b0a0      	sub	sp, #128	; 0x80
 80007c8:	af04      	add	r7, sp, #16
 80007ca:	463b      	mov	r3, r7
 80007cc:	e883 0003 	stmia.w	r3, {r0, r1}
    char buffer[100];
    snprintf(buffer, sizeof(buffer), "ID: %d, Sensor Value: %d, Temperature: %.2f\n",
             data.id, data.sensor_value, data.temperature);
 80007d0:	783b      	ldrb	r3, [r7, #0]
    snprintf(buffer, sizeof(buffer), "ID: %d, Sensor Value: %d, Temperature: %.2f\n",
 80007d2:	461d      	mov	r5, r3
             data.id, data.sensor_value, data.temperature);
 80007d4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
    snprintf(buffer, sizeof(buffer), "ID: %d, Sensor Value: %d, Temperature: %.2f\n",
 80007d8:	461c      	mov	r4, r3
             data.id, data.sensor_value, data.temperature);
 80007da:	687b      	ldr	r3, [r7, #4]
    snprintf(buffer, sizeof(buffer), "ID: %d, Sensor Value: %d, Temperature: %.2f\n",
 80007dc:	4618      	mov	r0, r3
 80007de:	f7ff feab 	bl	8000538 <__aeabi_f2d>
 80007e2:	4602      	mov	r2, r0
 80007e4:	460b      	mov	r3, r1
 80007e6:	f107 000c 	add.w	r0, r7, #12
 80007ea:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80007ee:	9400      	str	r4, [sp, #0]
 80007f0:	462b      	mov	r3, r5
 80007f2:	4a06      	ldr	r2, [pc, #24]	; (800080c <UART2_Write_Struct+0x48>)
 80007f4:	2164      	movs	r1, #100	; 0x64
 80007f6:	f000 f94d 	bl	8000a94 <sniprintf>
    UART2_Write_String(buffer);
 80007fa:	f107 030c 	add.w	r3, r7, #12
 80007fe:	4618      	mov	r0, r3
 8000800:	f7ff ffca 	bl	8000798 <UART2_Write_String>
}
 8000804:	bf00      	nop
 8000806:	3770      	adds	r7, #112	; 0x70
 8000808:	46bd      	mov	sp, r7
 800080a:	bdb0      	pop	{r4, r5, r7, pc}
 800080c:	080013b0 	.word	0x080013b0

08000810 <LED_Blink>:

// LED kontrol fonksiyonu (Kırmızı LED yanıp söner)
void LED_Blink(void) {
 8000810:	b580      	push	{r7, lr}
 8000812:	af00      	add	r7, sp, #0
    GPIOD->BSRR = (1 << 14);  // Kırmızı LED'i yak
 8000814:	4b07      	ldr	r3, [pc, #28]	; (8000834 <LED_Blink+0x24>)
 8000816:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800081a:	619a      	str	r2, [r3, #24]
    delay(500000);            // Kısa bir bekleme
 800081c:	4806      	ldr	r0, [pc, #24]	; (8000838 <LED_Blink+0x28>)
 800081e:	f7ff fee3 	bl	80005e8 <delay>
    GPIOD->BSRR = (1 << (14 + 16));  // Kırmızı LED'i söndür
 8000822:	4b04      	ldr	r3, [pc, #16]	; (8000834 <LED_Blink+0x24>)
 8000824:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000828:	619a      	str	r2, [r3, #24]
    delay(500000);            // Kısa bir bekleme
 800082a:	4803      	ldr	r0, [pc, #12]	; (8000838 <LED_Blink+0x28>)
 800082c:	f7ff fedc 	bl	80005e8 <delay>
}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}
 8000834:	40020c00 	.word	0x40020c00
 8000838:	0007a120 	.word	0x0007a120

0800083c <main>:

// Struct ile veriyi al ve gönder
int main(void) {
 800083c:	b580      	push	{r7, lr}
 800083e:	b086      	sub	sp, #24
 8000840:	af00      	add	r7, sp, #0
    System_Clock_Init();
 8000842:	f7ff fee5 	bl	8000610 <System_Clock_Init>
    GPIO_Init();
 8000846:	f7ff ff19 	bl	800067c <GPIO_Init>
    I2C1_Init();
 800084a:	f7ff ff53 	bl	80006f4 <I2C1_Init>
    UART2_Init();  // UART2'yi başlat
 800084e:	f7ff ff79 	bl	8000744 <UART2_Init>

    SensorData received_data;
    int data_received = 0;  // Veri alındı mı kontrol etmek için
 8000852:	2300      	movs	r3, #0
 8000854:	617b      	str	r3, [r7, #20]

    while (1) {
        // I2C üzerinden veriyi alalım
        uint8_t* data_ptr = (uint8_t*)&received_data;
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	60fb      	str	r3, [r7, #12]

        // I2C adres eşleşmesini bekle
        if (I2C1->SR1 & I2C_SR1_ADDR) {
 800085a:	4b20      	ldr	r3, [pc, #128]	; (80008dc <main+0xa0>)
 800085c:	695b      	ldr	r3, [r3, #20]
 800085e:	f003 0302 	and.w	r3, r3, #2
 8000862:	2b00      	cmp	r3, #0
 8000864:	d031      	beq.n	80008ca <main+0x8e>
            (void)I2C1->SR1;
 8000866:	4b1d      	ldr	r3, [pc, #116]	; (80008dc <main+0xa0>)
 8000868:	695b      	ldr	r3, [r3, #20]
            (void)I2C1->SR2;  // Adres bayraklarını temizle
 800086a:	4b1c      	ldr	r3, [pc, #112]	; (80008dc <main+0xa0>)
 800086c:	699b      	ldr	r3, [r3, #24]

            // Struct boyutunda veri al
            for (int i = 0; i < sizeof(SensorData); i++) {
 800086e:	2300      	movs	r3, #0
 8000870:	613b      	str	r3, [r7, #16]
 8000872:	e019      	b.n	80008a8 <main+0x6c>
                while (!(I2C1->SR1 & I2C_SR1_RXNE));  // Byte gelmesini bekle
 8000874:	bf00      	nop
 8000876:	4b19      	ldr	r3, [pc, #100]	; (80008dc <main+0xa0>)
 8000878:	695b      	ldr	r3, [r3, #20]
 800087a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800087e:	2b00      	cmp	r3, #0
 8000880:	d0f9      	beq.n	8000876 <main+0x3a>
                data_ptr[i] = I2C1->DR;              // Her byte'ı struct'a yaz
 8000882:	4b16      	ldr	r3, [pc, #88]	; (80008dc <main+0xa0>)
 8000884:	6919      	ldr	r1, [r3, #16]
 8000886:	693b      	ldr	r3, [r7, #16]
 8000888:	68fa      	ldr	r2, [r7, #12]
 800088a:	4413      	add	r3, r2
 800088c:	b2ca      	uxtb	r2, r1
 800088e:	701a      	strb	r2, [r3, #0]

                // Son byte geldiyse ACK gönderme, NACK gönder
                if (i == sizeof(SensorData) - 1) {
 8000890:	693b      	ldr	r3, [r7, #16]
 8000892:	2b07      	cmp	r3, #7
 8000894:	d105      	bne.n	80008a2 <main+0x66>
                    I2C1->CR1 &= ~I2C_CR1_ACK;  // NACK gönder
 8000896:	4b11      	ldr	r3, [pc, #68]	; (80008dc <main+0xa0>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a10      	ldr	r2, [pc, #64]	; (80008dc <main+0xa0>)
 800089c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80008a0:	6013      	str	r3, [r2, #0]
            for (int i = 0; i < sizeof(SensorData); i++) {
 80008a2:	693b      	ldr	r3, [r7, #16]
 80008a4:	3301      	adds	r3, #1
 80008a6:	613b      	str	r3, [r7, #16]
 80008a8:	693b      	ldr	r3, [r7, #16]
 80008aa:	2b07      	cmp	r3, #7
 80008ac:	d9e2      	bls.n	8000874 <main+0x38>
                }
            }

            // STOP bitini ayarla
            I2C1->CR1 |= I2C_CR1_STOP;
 80008ae:	4b0b      	ldr	r3, [pc, #44]	; (80008dc <main+0xa0>)
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	4a0a      	ldr	r2, [pc, #40]	; (80008dc <main+0xa0>)
 80008b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80008b8:	6013      	str	r3, [r2, #0]

            // Alınan struct verisini UART ile terminale gönder
            UART2_Write_Struct(received_data);
 80008ba:	1d3b      	adds	r3, r7, #4
 80008bc:	e893 0003 	ldmia.w	r3, {r0, r1}
 80008c0:	f7ff ff80 	bl	80007c4 <UART2_Write_Struct>
            data_received = 1;  // Veri geldiğini belirt
 80008c4:	2301      	movs	r3, #1
 80008c6:	617b      	str	r3, [r7, #20]
 80008c8:	e001      	b.n	80008ce <main+0x92>
        } else {
            data_received = 0;  // Veri gelmedi
 80008ca:	2300      	movs	r3, #0
 80008cc:	617b      	str	r3, [r7, #20]
        }

        // Eğer veri gelmezse kırmızı LED yanıp sönsün
        if (!data_received) {
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	d1c0      	bne.n	8000856 <main+0x1a>
            LED_Blink();
 80008d4:	f7ff ff9c 	bl	8000810 <LED_Blink>
    while (1) {
 80008d8:	e7bd      	b.n	8000856 <main+0x1a>
 80008da:	bf00      	nop
 80008dc:	40005400 	.word	0x40005400

080008e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <NMI_Handler+0x4>

080008e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008ea:	e7fe      	b.n	80008ea <HardFault_Handler+0x4>

080008ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <MemManage_Handler+0x4>

080008f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008f6:	e7fe      	b.n	80008f6 <BusFault_Handler+0x4>

080008f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <UsageFault_Handler+0x4>

080008fe <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000902:	bf00      	nop
 8000904:	46bd      	mov	sp, r7
 8000906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090a:	4770      	bx	lr

0800090c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800090c:	b480      	push	{r7}
 800090e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000910:	bf00      	nop
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr

0800091a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800091a:	b480      	push	{r7}
 800091c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800091e:	bf00      	nop
 8000920:	46bd      	mov	sp, r7
 8000922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000926:	4770      	bx	lr

08000928 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800092c:	f000 f874 	bl	8000a18 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000930:	bf00      	nop
 8000932:	bd80      	pop	{r7, pc}

08000934 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af00      	add	r7, sp, #0
 800093a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800093c:	4a14      	ldr	r2, [pc, #80]	; (8000990 <_sbrk+0x5c>)
 800093e:	4b15      	ldr	r3, [pc, #84]	; (8000994 <_sbrk+0x60>)
 8000940:	1ad3      	subs	r3, r2, r3
 8000942:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000944:	697b      	ldr	r3, [r7, #20]
 8000946:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000948:	4b13      	ldr	r3, [pc, #76]	; (8000998 <_sbrk+0x64>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d102      	bne.n	8000956 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000950:	4b11      	ldr	r3, [pc, #68]	; (8000998 <_sbrk+0x64>)
 8000952:	4a12      	ldr	r2, [pc, #72]	; (800099c <_sbrk+0x68>)
 8000954:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000956:	4b10      	ldr	r3, [pc, #64]	; (8000998 <_sbrk+0x64>)
 8000958:	681a      	ldr	r2, [r3, #0]
 800095a:	687b      	ldr	r3, [r7, #4]
 800095c:	4413      	add	r3, r2
 800095e:	693a      	ldr	r2, [r7, #16]
 8000960:	429a      	cmp	r2, r3
 8000962:	d207      	bcs.n	8000974 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000964:	f000 f86c 	bl	8000a40 <__errno>
 8000968:	4603      	mov	r3, r0
 800096a:	220c      	movs	r2, #12
 800096c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800096e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000972:	e009      	b.n	8000988 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000974:	4b08      	ldr	r3, [pc, #32]	; (8000998 <_sbrk+0x64>)
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800097a:	4b07      	ldr	r3, [pc, #28]	; (8000998 <_sbrk+0x64>)
 800097c:	681a      	ldr	r2, [r3, #0]
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	4413      	add	r3, r2
 8000982:	4a05      	ldr	r2, [pc, #20]	; (8000998 <_sbrk+0x64>)
 8000984:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000986:	68fb      	ldr	r3, [r7, #12]
}
 8000988:	4618      	mov	r0, r3
 800098a:	3718      	adds	r7, #24
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	20020000 	.word	0x20020000
 8000994:	00000400 	.word	0x00000400
 8000998:	20000084 	.word	0x20000084
 800099c:	200000a0 	.word	0x200000a0

080009a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009a4:	4b06      	ldr	r3, [pc, #24]	; (80009c0 <SystemInit+0x20>)
 80009a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009aa:	4a05      	ldr	r2, [pc, #20]	; (80009c0 <SystemInit+0x20>)
 80009ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009b4:	bf00      	nop
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr
 80009be:	bf00      	nop
 80009c0:	e000ed00 	.word	0xe000ed00

080009c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009c8:	480d      	ldr	r0, [pc, #52]	; (8000a00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009ca:	490e      	ldr	r1, [pc, #56]	; (8000a04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009cc:	4a0e      	ldr	r2, [pc, #56]	; (8000a08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009d0:	e002      	b.n	80009d8 <LoopCopyDataInit>

080009d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009d6:	3304      	adds	r3, #4

080009d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009dc:	d3f9      	bcc.n	80009d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009de:	4a0b      	ldr	r2, [pc, #44]	; (8000a0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009e0:	4c0b      	ldr	r4, [pc, #44]	; (8000a10 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009e4:	e001      	b.n	80009ea <LoopFillZerobss>

080009e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009e8:	3204      	adds	r2, #4

080009ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009ec:	d3fb      	bcc.n	80009e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009ee:	f7ff ffd7 	bl	80009a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009f2:	f000 f82b 	bl	8000a4c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009f6:	f7ff ff21 	bl	800083c <main>
  bx  lr    
 80009fa:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a04:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000a08:	08001418 	.word	0x08001418
  ldr r2, =_sbss
 8000a0c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000a10:	2000009c 	.word	0x2000009c

08000a14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a14:	e7fe      	b.n	8000a14 <ADC_IRQHandler>
	...

08000a18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <HAL_IncTick+0x20>)
 8000a1e:	781b      	ldrb	r3, [r3, #0]
 8000a20:	461a      	mov	r2, r3
 8000a22:	4b06      	ldr	r3, [pc, #24]	; (8000a3c <HAL_IncTick+0x24>)
 8000a24:	681b      	ldr	r3, [r3, #0]
 8000a26:	4413      	add	r3, r2
 8000a28:	4a04      	ldr	r2, [pc, #16]	; (8000a3c <HAL_IncTick+0x24>)
 8000a2a:	6013      	str	r3, [r2, #0]
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a34:	4770      	bx	lr
 8000a36:	bf00      	nop
 8000a38:	20000000 	.word	0x20000000
 8000a3c:	20000088 	.word	0x20000088

08000a40 <__errno>:
 8000a40:	4b01      	ldr	r3, [pc, #4]	; (8000a48 <__errno+0x8>)
 8000a42:	6818      	ldr	r0, [r3, #0]
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop
 8000a48:	20000004 	.word	0x20000004

08000a4c <__libc_init_array>:
 8000a4c:	b570      	push	{r4, r5, r6, lr}
 8000a4e:	4d0d      	ldr	r5, [pc, #52]	; (8000a84 <__libc_init_array+0x38>)
 8000a50:	4c0d      	ldr	r4, [pc, #52]	; (8000a88 <__libc_init_array+0x3c>)
 8000a52:	1b64      	subs	r4, r4, r5
 8000a54:	10a4      	asrs	r4, r4, #2
 8000a56:	2600      	movs	r6, #0
 8000a58:	42a6      	cmp	r6, r4
 8000a5a:	d109      	bne.n	8000a70 <__libc_init_array+0x24>
 8000a5c:	4d0b      	ldr	r5, [pc, #44]	; (8000a8c <__libc_init_array+0x40>)
 8000a5e:	4c0c      	ldr	r4, [pc, #48]	; (8000a90 <__libc_init_array+0x44>)
 8000a60:	f000 fc9a 	bl	8001398 <_init>
 8000a64:	1b64      	subs	r4, r4, r5
 8000a66:	10a4      	asrs	r4, r4, #2
 8000a68:	2600      	movs	r6, #0
 8000a6a:	42a6      	cmp	r6, r4
 8000a6c:	d105      	bne.n	8000a7a <__libc_init_array+0x2e>
 8000a6e:	bd70      	pop	{r4, r5, r6, pc}
 8000a70:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a74:	4798      	blx	r3
 8000a76:	3601      	adds	r6, #1
 8000a78:	e7ee      	b.n	8000a58 <__libc_init_array+0xc>
 8000a7a:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a7e:	4798      	blx	r3
 8000a80:	3601      	adds	r6, #1
 8000a82:	e7f2      	b.n	8000a6a <__libc_init_array+0x1e>
 8000a84:	08001410 	.word	0x08001410
 8000a88:	08001410 	.word	0x08001410
 8000a8c:	08001410 	.word	0x08001410
 8000a90:	08001414 	.word	0x08001414

08000a94 <sniprintf>:
 8000a94:	b40c      	push	{r2, r3}
 8000a96:	b530      	push	{r4, r5, lr}
 8000a98:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <sniprintf+0x64>)
 8000a9a:	1e0c      	subs	r4, r1, #0
 8000a9c:	681d      	ldr	r5, [r3, #0]
 8000a9e:	b09d      	sub	sp, #116	; 0x74
 8000aa0:	da08      	bge.n	8000ab4 <sniprintf+0x20>
 8000aa2:	238b      	movs	r3, #139	; 0x8b
 8000aa4:	602b      	str	r3, [r5, #0]
 8000aa6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000aaa:	b01d      	add	sp, #116	; 0x74
 8000aac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000ab0:	b002      	add	sp, #8
 8000ab2:	4770      	bx	lr
 8000ab4:	f44f 7302 	mov.w	r3, #520	; 0x208
 8000ab8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8000abc:	bf14      	ite	ne
 8000abe:	f104 33ff 	addne.w	r3, r4, #4294967295	; 0xffffffff
 8000ac2:	4623      	moveq	r3, r4
 8000ac4:	9304      	str	r3, [sp, #16]
 8000ac6:	9307      	str	r3, [sp, #28]
 8000ac8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000acc:	9002      	str	r0, [sp, #8]
 8000ace:	9006      	str	r0, [sp, #24]
 8000ad0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8000ad4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8000ad6:	ab21      	add	r3, sp, #132	; 0x84
 8000ad8:	a902      	add	r1, sp, #8
 8000ada:	4628      	mov	r0, r5
 8000adc:	9301      	str	r3, [sp, #4]
 8000ade:	f000 f869 	bl	8000bb4 <_svfiprintf_r>
 8000ae2:	1c43      	adds	r3, r0, #1
 8000ae4:	bfbc      	itt	lt
 8000ae6:	238b      	movlt	r3, #139	; 0x8b
 8000ae8:	602b      	strlt	r3, [r5, #0]
 8000aea:	2c00      	cmp	r4, #0
 8000aec:	d0dd      	beq.n	8000aaa <sniprintf+0x16>
 8000aee:	9b02      	ldr	r3, [sp, #8]
 8000af0:	2200      	movs	r2, #0
 8000af2:	701a      	strb	r2, [r3, #0]
 8000af4:	e7d9      	b.n	8000aaa <sniprintf+0x16>
 8000af6:	bf00      	nop
 8000af8:	20000004 	.word	0x20000004

08000afc <__ssputs_r>:
 8000afc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b00:	688e      	ldr	r6, [r1, #8]
 8000b02:	429e      	cmp	r6, r3
 8000b04:	4682      	mov	sl, r0
 8000b06:	460c      	mov	r4, r1
 8000b08:	4690      	mov	r8, r2
 8000b0a:	461f      	mov	r7, r3
 8000b0c:	d838      	bhi.n	8000b80 <__ssputs_r+0x84>
 8000b0e:	898a      	ldrh	r2, [r1, #12]
 8000b10:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000b14:	d032      	beq.n	8000b7c <__ssputs_r+0x80>
 8000b16:	6825      	ldr	r5, [r4, #0]
 8000b18:	6909      	ldr	r1, [r1, #16]
 8000b1a:	eba5 0901 	sub.w	r9, r5, r1
 8000b1e:	6965      	ldr	r5, [r4, #20]
 8000b20:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000b24:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000b28:	3301      	adds	r3, #1
 8000b2a:	444b      	add	r3, r9
 8000b2c:	106d      	asrs	r5, r5, #1
 8000b2e:	429d      	cmp	r5, r3
 8000b30:	bf38      	it	cc
 8000b32:	461d      	movcc	r5, r3
 8000b34:	0553      	lsls	r3, r2, #21
 8000b36:	d531      	bpl.n	8000b9c <__ssputs_r+0xa0>
 8000b38:	4629      	mov	r1, r5
 8000b3a:	f000 fb63 	bl	8001204 <_malloc_r>
 8000b3e:	4606      	mov	r6, r0
 8000b40:	b950      	cbnz	r0, 8000b58 <__ssputs_r+0x5c>
 8000b42:	230c      	movs	r3, #12
 8000b44:	f8ca 3000 	str.w	r3, [sl]
 8000b48:	89a3      	ldrh	r3, [r4, #12]
 8000b4a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000b4e:	81a3      	strh	r3, [r4, #12]
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b58:	6921      	ldr	r1, [r4, #16]
 8000b5a:	464a      	mov	r2, r9
 8000b5c:	f000 fabe 	bl	80010dc <memcpy>
 8000b60:	89a3      	ldrh	r3, [r4, #12]
 8000b62:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000b66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000b6a:	81a3      	strh	r3, [r4, #12]
 8000b6c:	6126      	str	r6, [r4, #16]
 8000b6e:	6165      	str	r5, [r4, #20]
 8000b70:	444e      	add	r6, r9
 8000b72:	eba5 0509 	sub.w	r5, r5, r9
 8000b76:	6026      	str	r6, [r4, #0]
 8000b78:	60a5      	str	r5, [r4, #8]
 8000b7a:	463e      	mov	r6, r7
 8000b7c:	42be      	cmp	r6, r7
 8000b7e:	d900      	bls.n	8000b82 <__ssputs_r+0x86>
 8000b80:	463e      	mov	r6, r7
 8000b82:	6820      	ldr	r0, [r4, #0]
 8000b84:	4632      	mov	r2, r6
 8000b86:	4641      	mov	r1, r8
 8000b88:	f000 fab6 	bl	80010f8 <memmove>
 8000b8c:	68a3      	ldr	r3, [r4, #8]
 8000b8e:	1b9b      	subs	r3, r3, r6
 8000b90:	60a3      	str	r3, [r4, #8]
 8000b92:	6823      	ldr	r3, [r4, #0]
 8000b94:	4433      	add	r3, r6
 8000b96:	6023      	str	r3, [r4, #0]
 8000b98:	2000      	movs	r0, #0
 8000b9a:	e7db      	b.n	8000b54 <__ssputs_r+0x58>
 8000b9c:	462a      	mov	r2, r5
 8000b9e:	f000 fba5 	bl	80012ec <_realloc_r>
 8000ba2:	4606      	mov	r6, r0
 8000ba4:	2800      	cmp	r0, #0
 8000ba6:	d1e1      	bne.n	8000b6c <__ssputs_r+0x70>
 8000ba8:	6921      	ldr	r1, [r4, #16]
 8000baa:	4650      	mov	r0, sl
 8000bac:	f000 fabe 	bl	800112c <_free_r>
 8000bb0:	e7c7      	b.n	8000b42 <__ssputs_r+0x46>
	...

08000bb4 <_svfiprintf_r>:
 8000bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bb8:	4698      	mov	r8, r3
 8000bba:	898b      	ldrh	r3, [r1, #12]
 8000bbc:	061b      	lsls	r3, r3, #24
 8000bbe:	b09d      	sub	sp, #116	; 0x74
 8000bc0:	4607      	mov	r7, r0
 8000bc2:	460d      	mov	r5, r1
 8000bc4:	4614      	mov	r4, r2
 8000bc6:	d50e      	bpl.n	8000be6 <_svfiprintf_r+0x32>
 8000bc8:	690b      	ldr	r3, [r1, #16]
 8000bca:	b963      	cbnz	r3, 8000be6 <_svfiprintf_r+0x32>
 8000bcc:	2140      	movs	r1, #64	; 0x40
 8000bce:	f000 fb19 	bl	8001204 <_malloc_r>
 8000bd2:	6028      	str	r0, [r5, #0]
 8000bd4:	6128      	str	r0, [r5, #16]
 8000bd6:	b920      	cbnz	r0, 8000be2 <_svfiprintf_r+0x2e>
 8000bd8:	230c      	movs	r3, #12
 8000bda:	603b      	str	r3, [r7, #0]
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	e0d1      	b.n	8000d86 <_svfiprintf_r+0x1d2>
 8000be2:	2340      	movs	r3, #64	; 0x40
 8000be4:	616b      	str	r3, [r5, #20]
 8000be6:	2300      	movs	r3, #0
 8000be8:	9309      	str	r3, [sp, #36]	; 0x24
 8000bea:	2320      	movs	r3, #32
 8000bec:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000bf0:	f8cd 800c 	str.w	r8, [sp, #12]
 8000bf4:	2330      	movs	r3, #48	; 0x30
 8000bf6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8000da0 <_svfiprintf_r+0x1ec>
 8000bfa:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000bfe:	f04f 0901 	mov.w	r9, #1
 8000c02:	4623      	mov	r3, r4
 8000c04:	469a      	mov	sl, r3
 8000c06:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000c0a:	b10a      	cbz	r2, 8000c10 <_svfiprintf_r+0x5c>
 8000c0c:	2a25      	cmp	r2, #37	; 0x25
 8000c0e:	d1f9      	bne.n	8000c04 <_svfiprintf_r+0x50>
 8000c10:	ebba 0b04 	subs.w	fp, sl, r4
 8000c14:	d00b      	beq.n	8000c2e <_svfiprintf_r+0x7a>
 8000c16:	465b      	mov	r3, fp
 8000c18:	4622      	mov	r2, r4
 8000c1a:	4629      	mov	r1, r5
 8000c1c:	4638      	mov	r0, r7
 8000c1e:	f7ff ff6d 	bl	8000afc <__ssputs_r>
 8000c22:	3001      	adds	r0, #1
 8000c24:	f000 80aa 	beq.w	8000d7c <_svfiprintf_r+0x1c8>
 8000c28:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000c2a:	445a      	add	r2, fp
 8000c2c:	9209      	str	r2, [sp, #36]	; 0x24
 8000c2e:	f89a 3000 	ldrb.w	r3, [sl]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	f000 80a2 	beq.w	8000d7c <_svfiprintf_r+0x1c8>
 8000c38:	2300      	movs	r3, #0
 8000c3a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c3e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000c42:	f10a 0a01 	add.w	sl, sl, #1
 8000c46:	9304      	str	r3, [sp, #16]
 8000c48:	9307      	str	r3, [sp, #28]
 8000c4a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000c4e:	931a      	str	r3, [sp, #104]	; 0x68
 8000c50:	4654      	mov	r4, sl
 8000c52:	2205      	movs	r2, #5
 8000c54:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c58:	4851      	ldr	r0, [pc, #324]	; (8000da0 <_svfiprintf_r+0x1ec>)
 8000c5a:	f7ff fab9 	bl	80001d0 <memchr>
 8000c5e:	9a04      	ldr	r2, [sp, #16]
 8000c60:	b9d8      	cbnz	r0, 8000c9a <_svfiprintf_r+0xe6>
 8000c62:	06d0      	lsls	r0, r2, #27
 8000c64:	bf44      	itt	mi
 8000c66:	2320      	movmi	r3, #32
 8000c68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c6c:	0711      	lsls	r1, r2, #28
 8000c6e:	bf44      	itt	mi
 8000c70:	232b      	movmi	r3, #43	; 0x2b
 8000c72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c76:	f89a 3000 	ldrb.w	r3, [sl]
 8000c7a:	2b2a      	cmp	r3, #42	; 0x2a
 8000c7c:	d015      	beq.n	8000caa <_svfiprintf_r+0xf6>
 8000c7e:	9a07      	ldr	r2, [sp, #28]
 8000c80:	4654      	mov	r4, sl
 8000c82:	2000      	movs	r0, #0
 8000c84:	f04f 0c0a 	mov.w	ip, #10
 8000c88:	4621      	mov	r1, r4
 8000c8a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000c8e:	3b30      	subs	r3, #48	; 0x30
 8000c90:	2b09      	cmp	r3, #9
 8000c92:	d94e      	bls.n	8000d32 <_svfiprintf_r+0x17e>
 8000c94:	b1b0      	cbz	r0, 8000cc4 <_svfiprintf_r+0x110>
 8000c96:	9207      	str	r2, [sp, #28]
 8000c98:	e014      	b.n	8000cc4 <_svfiprintf_r+0x110>
 8000c9a:	eba0 0308 	sub.w	r3, r0, r8
 8000c9e:	fa09 f303 	lsl.w	r3, r9, r3
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	9304      	str	r3, [sp, #16]
 8000ca6:	46a2      	mov	sl, r4
 8000ca8:	e7d2      	b.n	8000c50 <_svfiprintf_r+0x9c>
 8000caa:	9b03      	ldr	r3, [sp, #12]
 8000cac:	1d19      	adds	r1, r3, #4
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	9103      	str	r1, [sp, #12]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	bfbb      	ittet	lt
 8000cb6:	425b      	neglt	r3, r3
 8000cb8:	f042 0202 	orrlt.w	r2, r2, #2
 8000cbc:	9307      	strge	r3, [sp, #28]
 8000cbe:	9307      	strlt	r3, [sp, #28]
 8000cc0:	bfb8      	it	lt
 8000cc2:	9204      	strlt	r2, [sp, #16]
 8000cc4:	7823      	ldrb	r3, [r4, #0]
 8000cc6:	2b2e      	cmp	r3, #46	; 0x2e
 8000cc8:	d10c      	bne.n	8000ce4 <_svfiprintf_r+0x130>
 8000cca:	7863      	ldrb	r3, [r4, #1]
 8000ccc:	2b2a      	cmp	r3, #42	; 0x2a
 8000cce:	d135      	bne.n	8000d3c <_svfiprintf_r+0x188>
 8000cd0:	9b03      	ldr	r3, [sp, #12]
 8000cd2:	1d1a      	adds	r2, r3, #4
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	9203      	str	r2, [sp, #12]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	bfb8      	it	lt
 8000cdc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8000ce0:	3402      	adds	r4, #2
 8000ce2:	9305      	str	r3, [sp, #20]
 8000ce4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8000db0 <_svfiprintf_r+0x1fc>
 8000ce8:	7821      	ldrb	r1, [r4, #0]
 8000cea:	2203      	movs	r2, #3
 8000cec:	4650      	mov	r0, sl
 8000cee:	f7ff fa6f 	bl	80001d0 <memchr>
 8000cf2:	b140      	cbz	r0, 8000d06 <_svfiprintf_r+0x152>
 8000cf4:	2340      	movs	r3, #64	; 0x40
 8000cf6:	eba0 000a 	sub.w	r0, r0, sl
 8000cfa:	fa03 f000 	lsl.w	r0, r3, r0
 8000cfe:	9b04      	ldr	r3, [sp, #16]
 8000d00:	4303      	orrs	r3, r0
 8000d02:	3401      	adds	r4, #1
 8000d04:	9304      	str	r3, [sp, #16]
 8000d06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d0a:	4826      	ldr	r0, [pc, #152]	; (8000da4 <_svfiprintf_r+0x1f0>)
 8000d0c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000d10:	2206      	movs	r2, #6
 8000d12:	f7ff fa5d 	bl	80001d0 <memchr>
 8000d16:	2800      	cmp	r0, #0
 8000d18:	d038      	beq.n	8000d8c <_svfiprintf_r+0x1d8>
 8000d1a:	4b23      	ldr	r3, [pc, #140]	; (8000da8 <_svfiprintf_r+0x1f4>)
 8000d1c:	bb1b      	cbnz	r3, 8000d66 <_svfiprintf_r+0x1b2>
 8000d1e:	9b03      	ldr	r3, [sp, #12]
 8000d20:	3307      	adds	r3, #7
 8000d22:	f023 0307 	bic.w	r3, r3, #7
 8000d26:	3308      	adds	r3, #8
 8000d28:	9303      	str	r3, [sp, #12]
 8000d2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000d2c:	4433      	add	r3, r6
 8000d2e:	9309      	str	r3, [sp, #36]	; 0x24
 8000d30:	e767      	b.n	8000c02 <_svfiprintf_r+0x4e>
 8000d32:	fb0c 3202 	mla	r2, ip, r2, r3
 8000d36:	460c      	mov	r4, r1
 8000d38:	2001      	movs	r0, #1
 8000d3a:	e7a5      	b.n	8000c88 <_svfiprintf_r+0xd4>
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	3401      	adds	r4, #1
 8000d40:	9305      	str	r3, [sp, #20]
 8000d42:	4619      	mov	r1, r3
 8000d44:	f04f 0c0a 	mov.w	ip, #10
 8000d48:	4620      	mov	r0, r4
 8000d4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000d4e:	3a30      	subs	r2, #48	; 0x30
 8000d50:	2a09      	cmp	r2, #9
 8000d52:	d903      	bls.n	8000d5c <_svfiprintf_r+0x1a8>
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d0c5      	beq.n	8000ce4 <_svfiprintf_r+0x130>
 8000d58:	9105      	str	r1, [sp, #20]
 8000d5a:	e7c3      	b.n	8000ce4 <_svfiprintf_r+0x130>
 8000d5c:	fb0c 2101 	mla	r1, ip, r1, r2
 8000d60:	4604      	mov	r4, r0
 8000d62:	2301      	movs	r3, #1
 8000d64:	e7f0      	b.n	8000d48 <_svfiprintf_r+0x194>
 8000d66:	ab03      	add	r3, sp, #12
 8000d68:	9300      	str	r3, [sp, #0]
 8000d6a:	462a      	mov	r2, r5
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <_svfiprintf_r+0x1f8>)
 8000d6e:	a904      	add	r1, sp, #16
 8000d70:	4638      	mov	r0, r7
 8000d72:	f3af 8000 	nop.w
 8000d76:	1c42      	adds	r2, r0, #1
 8000d78:	4606      	mov	r6, r0
 8000d7a:	d1d6      	bne.n	8000d2a <_svfiprintf_r+0x176>
 8000d7c:	89ab      	ldrh	r3, [r5, #12]
 8000d7e:	065b      	lsls	r3, r3, #25
 8000d80:	f53f af2c 	bmi.w	8000bdc <_svfiprintf_r+0x28>
 8000d84:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000d86:	b01d      	add	sp, #116	; 0x74
 8000d88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d8c:	ab03      	add	r3, sp, #12
 8000d8e:	9300      	str	r3, [sp, #0]
 8000d90:	462a      	mov	r2, r5
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <_svfiprintf_r+0x1f8>)
 8000d94:	a904      	add	r1, sp, #16
 8000d96:	4638      	mov	r0, r7
 8000d98:	f000 f87a 	bl	8000e90 <_printf_i>
 8000d9c:	e7eb      	b.n	8000d76 <_svfiprintf_r+0x1c2>
 8000d9e:	bf00      	nop
 8000da0:	080013dd 	.word	0x080013dd
 8000da4:	080013e7 	.word	0x080013e7
 8000da8:	00000000 	.word	0x00000000
 8000dac:	08000afd 	.word	0x08000afd
 8000db0:	080013e3 	.word	0x080013e3

08000db4 <_printf_common>:
 8000db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000db8:	4616      	mov	r6, r2
 8000dba:	4699      	mov	r9, r3
 8000dbc:	688a      	ldr	r2, [r1, #8]
 8000dbe:	690b      	ldr	r3, [r1, #16]
 8000dc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	bfb8      	it	lt
 8000dc8:	4613      	movlt	r3, r2
 8000dca:	6033      	str	r3, [r6, #0]
 8000dcc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000dd0:	4607      	mov	r7, r0
 8000dd2:	460c      	mov	r4, r1
 8000dd4:	b10a      	cbz	r2, 8000dda <_printf_common+0x26>
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	6033      	str	r3, [r6, #0]
 8000dda:	6823      	ldr	r3, [r4, #0]
 8000ddc:	0699      	lsls	r1, r3, #26
 8000dde:	bf42      	ittt	mi
 8000de0:	6833      	ldrmi	r3, [r6, #0]
 8000de2:	3302      	addmi	r3, #2
 8000de4:	6033      	strmi	r3, [r6, #0]
 8000de6:	6825      	ldr	r5, [r4, #0]
 8000de8:	f015 0506 	ands.w	r5, r5, #6
 8000dec:	d106      	bne.n	8000dfc <_printf_common+0x48>
 8000dee:	f104 0a19 	add.w	sl, r4, #25
 8000df2:	68e3      	ldr	r3, [r4, #12]
 8000df4:	6832      	ldr	r2, [r6, #0]
 8000df6:	1a9b      	subs	r3, r3, r2
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	dc26      	bgt.n	8000e4a <_printf_common+0x96>
 8000dfc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000e00:	1e13      	subs	r3, r2, #0
 8000e02:	6822      	ldr	r2, [r4, #0]
 8000e04:	bf18      	it	ne
 8000e06:	2301      	movne	r3, #1
 8000e08:	0692      	lsls	r2, r2, #26
 8000e0a:	d42b      	bmi.n	8000e64 <_printf_common+0xb0>
 8000e0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000e10:	4649      	mov	r1, r9
 8000e12:	4638      	mov	r0, r7
 8000e14:	47c0      	blx	r8
 8000e16:	3001      	adds	r0, #1
 8000e18:	d01e      	beq.n	8000e58 <_printf_common+0xa4>
 8000e1a:	6823      	ldr	r3, [r4, #0]
 8000e1c:	68e5      	ldr	r5, [r4, #12]
 8000e1e:	6832      	ldr	r2, [r6, #0]
 8000e20:	f003 0306 	and.w	r3, r3, #6
 8000e24:	2b04      	cmp	r3, #4
 8000e26:	bf08      	it	eq
 8000e28:	1aad      	subeq	r5, r5, r2
 8000e2a:	68a3      	ldr	r3, [r4, #8]
 8000e2c:	6922      	ldr	r2, [r4, #16]
 8000e2e:	bf0c      	ite	eq
 8000e30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000e34:	2500      	movne	r5, #0
 8000e36:	4293      	cmp	r3, r2
 8000e38:	bfc4      	itt	gt
 8000e3a:	1a9b      	subgt	r3, r3, r2
 8000e3c:	18ed      	addgt	r5, r5, r3
 8000e3e:	2600      	movs	r6, #0
 8000e40:	341a      	adds	r4, #26
 8000e42:	42b5      	cmp	r5, r6
 8000e44:	d11a      	bne.n	8000e7c <_printf_common+0xc8>
 8000e46:	2000      	movs	r0, #0
 8000e48:	e008      	b.n	8000e5c <_printf_common+0xa8>
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	4652      	mov	r2, sl
 8000e4e:	4649      	mov	r1, r9
 8000e50:	4638      	mov	r0, r7
 8000e52:	47c0      	blx	r8
 8000e54:	3001      	adds	r0, #1
 8000e56:	d103      	bne.n	8000e60 <_printf_common+0xac>
 8000e58:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e60:	3501      	adds	r5, #1
 8000e62:	e7c6      	b.n	8000df2 <_printf_common+0x3e>
 8000e64:	18e1      	adds	r1, r4, r3
 8000e66:	1c5a      	adds	r2, r3, #1
 8000e68:	2030      	movs	r0, #48	; 0x30
 8000e6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000e6e:	4422      	add	r2, r4
 8000e70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000e74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000e78:	3302      	adds	r3, #2
 8000e7a:	e7c7      	b.n	8000e0c <_printf_common+0x58>
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	4622      	mov	r2, r4
 8000e80:	4649      	mov	r1, r9
 8000e82:	4638      	mov	r0, r7
 8000e84:	47c0      	blx	r8
 8000e86:	3001      	adds	r0, #1
 8000e88:	d0e6      	beq.n	8000e58 <_printf_common+0xa4>
 8000e8a:	3601      	adds	r6, #1
 8000e8c:	e7d9      	b.n	8000e42 <_printf_common+0x8e>
	...

08000e90 <_printf_i>:
 8000e90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000e94:	7e0f      	ldrb	r7, [r1, #24]
 8000e96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000e98:	2f78      	cmp	r7, #120	; 0x78
 8000e9a:	4691      	mov	r9, r2
 8000e9c:	4680      	mov	r8, r0
 8000e9e:	460c      	mov	r4, r1
 8000ea0:	469a      	mov	sl, r3
 8000ea2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000ea6:	d807      	bhi.n	8000eb8 <_printf_i+0x28>
 8000ea8:	2f62      	cmp	r7, #98	; 0x62
 8000eaa:	d80a      	bhi.n	8000ec2 <_printf_i+0x32>
 8000eac:	2f00      	cmp	r7, #0
 8000eae:	f000 80d8 	beq.w	8001062 <_printf_i+0x1d2>
 8000eb2:	2f58      	cmp	r7, #88	; 0x58
 8000eb4:	f000 80a3 	beq.w	8000ffe <_printf_i+0x16e>
 8000eb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000ebc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000ec0:	e03a      	b.n	8000f38 <_printf_i+0xa8>
 8000ec2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000ec6:	2b15      	cmp	r3, #21
 8000ec8:	d8f6      	bhi.n	8000eb8 <_printf_i+0x28>
 8000eca:	a101      	add	r1, pc, #4	; (adr r1, 8000ed0 <_printf_i+0x40>)
 8000ecc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000ed0:	08000f29 	.word	0x08000f29
 8000ed4:	08000f3d 	.word	0x08000f3d
 8000ed8:	08000eb9 	.word	0x08000eb9
 8000edc:	08000eb9 	.word	0x08000eb9
 8000ee0:	08000eb9 	.word	0x08000eb9
 8000ee4:	08000eb9 	.word	0x08000eb9
 8000ee8:	08000f3d 	.word	0x08000f3d
 8000eec:	08000eb9 	.word	0x08000eb9
 8000ef0:	08000eb9 	.word	0x08000eb9
 8000ef4:	08000eb9 	.word	0x08000eb9
 8000ef8:	08000eb9 	.word	0x08000eb9
 8000efc:	08001049 	.word	0x08001049
 8000f00:	08000f6d 	.word	0x08000f6d
 8000f04:	0800102b 	.word	0x0800102b
 8000f08:	08000eb9 	.word	0x08000eb9
 8000f0c:	08000eb9 	.word	0x08000eb9
 8000f10:	0800106b 	.word	0x0800106b
 8000f14:	08000eb9 	.word	0x08000eb9
 8000f18:	08000f6d 	.word	0x08000f6d
 8000f1c:	08000eb9 	.word	0x08000eb9
 8000f20:	08000eb9 	.word	0x08000eb9
 8000f24:	08001033 	.word	0x08001033
 8000f28:	682b      	ldr	r3, [r5, #0]
 8000f2a:	1d1a      	adds	r2, r3, #4
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	602a      	str	r2, [r5, #0]
 8000f30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000f34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e0a3      	b.n	8001084 <_printf_i+0x1f4>
 8000f3c:	6820      	ldr	r0, [r4, #0]
 8000f3e:	6829      	ldr	r1, [r5, #0]
 8000f40:	0606      	lsls	r6, r0, #24
 8000f42:	f101 0304 	add.w	r3, r1, #4
 8000f46:	d50a      	bpl.n	8000f5e <_printf_i+0xce>
 8000f48:	680e      	ldr	r6, [r1, #0]
 8000f4a:	602b      	str	r3, [r5, #0]
 8000f4c:	2e00      	cmp	r6, #0
 8000f4e:	da03      	bge.n	8000f58 <_printf_i+0xc8>
 8000f50:	232d      	movs	r3, #45	; 0x2d
 8000f52:	4276      	negs	r6, r6
 8000f54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000f58:	485e      	ldr	r0, [pc, #376]	; (80010d4 <_printf_i+0x244>)
 8000f5a:	230a      	movs	r3, #10
 8000f5c:	e019      	b.n	8000f92 <_printf_i+0x102>
 8000f5e:	680e      	ldr	r6, [r1, #0]
 8000f60:	602b      	str	r3, [r5, #0]
 8000f62:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000f66:	bf18      	it	ne
 8000f68:	b236      	sxthne	r6, r6
 8000f6a:	e7ef      	b.n	8000f4c <_printf_i+0xbc>
 8000f6c:	682b      	ldr	r3, [r5, #0]
 8000f6e:	6820      	ldr	r0, [r4, #0]
 8000f70:	1d19      	adds	r1, r3, #4
 8000f72:	6029      	str	r1, [r5, #0]
 8000f74:	0601      	lsls	r1, r0, #24
 8000f76:	d501      	bpl.n	8000f7c <_printf_i+0xec>
 8000f78:	681e      	ldr	r6, [r3, #0]
 8000f7a:	e002      	b.n	8000f82 <_printf_i+0xf2>
 8000f7c:	0646      	lsls	r6, r0, #25
 8000f7e:	d5fb      	bpl.n	8000f78 <_printf_i+0xe8>
 8000f80:	881e      	ldrh	r6, [r3, #0]
 8000f82:	4854      	ldr	r0, [pc, #336]	; (80010d4 <_printf_i+0x244>)
 8000f84:	2f6f      	cmp	r7, #111	; 0x6f
 8000f86:	bf0c      	ite	eq
 8000f88:	2308      	moveq	r3, #8
 8000f8a:	230a      	movne	r3, #10
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000f92:	6865      	ldr	r5, [r4, #4]
 8000f94:	60a5      	str	r5, [r4, #8]
 8000f96:	2d00      	cmp	r5, #0
 8000f98:	bfa2      	ittt	ge
 8000f9a:	6821      	ldrge	r1, [r4, #0]
 8000f9c:	f021 0104 	bicge.w	r1, r1, #4
 8000fa0:	6021      	strge	r1, [r4, #0]
 8000fa2:	b90e      	cbnz	r6, 8000fa8 <_printf_i+0x118>
 8000fa4:	2d00      	cmp	r5, #0
 8000fa6:	d04d      	beq.n	8001044 <_printf_i+0x1b4>
 8000fa8:	4615      	mov	r5, r2
 8000faa:	fbb6 f1f3 	udiv	r1, r6, r3
 8000fae:	fb03 6711 	mls	r7, r3, r1, r6
 8000fb2:	5dc7      	ldrb	r7, [r0, r7]
 8000fb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000fb8:	4637      	mov	r7, r6
 8000fba:	42bb      	cmp	r3, r7
 8000fbc:	460e      	mov	r6, r1
 8000fbe:	d9f4      	bls.n	8000faa <_printf_i+0x11a>
 8000fc0:	2b08      	cmp	r3, #8
 8000fc2:	d10b      	bne.n	8000fdc <_printf_i+0x14c>
 8000fc4:	6823      	ldr	r3, [r4, #0]
 8000fc6:	07de      	lsls	r6, r3, #31
 8000fc8:	d508      	bpl.n	8000fdc <_printf_i+0x14c>
 8000fca:	6923      	ldr	r3, [r4, #16]
 8000fcc:	6861      	ldr	r1, [r4, #4]
 8000fce:	4299      	cmp	r1, r3
 8000fd0:	bfde      	ittt	le
 8000fd2:	2330      	movle	r3, #48	; 0x30
 8000fd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000fd8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8000fdc:	1b52      	subs	r2, r2, r5
 8000fde:	6122      	str	r2, [r4, #16]
 8000fe0:	f8cd a000 	str.w	sl, [sp]
 8000fe4:	464b      	mov	r3, r9
 8000fe6:	aa03      	add	r2, sp, #12
 8000fe8:	4621      	mov	r1, r4
 8000fea:	4640      	mov	r0, r8
 8000fec:	f7ff fee2 	bl	8000db4 <_printf_common>
 8000ff0:	3001      	adds	r0, #1
 8000ff2:	d14c      	bne.n	800108e <_printf_i+0x1fe>
 8000ff4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000ff8:	b004      	add	sp, #16
 8000ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ffe:	4835      	ldr	r0, [pc, #212]	; (80010d4 <_printf_i+0x244>)
 8001000:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001004:	6829      	ldr	r1, [r5, #0]
 8001006:	6823      	ldr	r3, [r4, #0]
 8001008:	f851 6b04 	ldr.w	r6, [r1], #4
 800100c:	6029      	str	r1, [r5, #0]
 800100e:	061d      	lsls	r5, r3, #24
 8001010:	d514      	bpl.n	800103c <_printf_i+0x1ac>
 8001012:	07df      	lsls	r7, r3, #31
 8001014:	bf44      	itt	mi
 8001016:	f043 0320 	orrmi.w	r3, r3, #32
 800101a:	6023      	strmi	r3, [r4, #0]
 800101c:	b91e      	cbnz	r6, 8001026 <_printf_i+0x196>
 800101e:	6823      	ldr	r3, [r4, #0]
 8001020:	f023 0320 	bic.w	r3, r3, #32
 8001024:	6023      	str	r3, [r4, #0]
 8001026:	2310      	movs	r3, #16
 8001028:	e7b0      	b.n	8000f8c <_printf_i+0xfc>
 800102a:	6823      	ldr	r3, [r4, #0]
 800102c:	f043 0320 	orr.w	r3, r3, #32
 8001030:	6023      	str	r3, [r4, #0]
 8001032:	2378      	movs	r3, #120	; 0x78
 8001034:	4828      	ldr	r0, [pc, #160]	; (80010d8 <_printf_i+0x248>)
 8001036:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800103a:	e7e3      	b.n	8001004 <_printf_i+0x174>
 800103c:	0659      	lsls	r1, r3, #25
 800103e:	bf48      	it	mi
 8001040:	b2b6      	uxthmi	r6, r6
 8001042:	e7e6      	b.n	8001012 <_printf_i+0x182>
 8001044:	4615      	mov	r5, r2
 8001046:	e7bb      	b.n	8000fc0 <_printf_i+0x130>
 8001048:	682b      	ldr	r3, [r5, #0]
 800104a:	6826      	ldr	r6, [r4, #0]
 800104c:	6961      	ldr	r1, [r4, #20]
 800104e:	1d18      	adds	r0, r3, #4
 8001050:	6028      	str	r0, [r5, #0]
 8001052:	0635      	lsls	r5, r6, #24
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	d501      	bpl.n	800105c <_printf_i+0x1cc>
 8001058:	6019      	str	r1, [r3, #0]
 800105a:	e002      	b.n	8001062 <_printf_i+0x1d2>
 800105c:	0670      	lsls	r0, r6, #25
 800105e:	d5fb      	bpl.n	8001058 <_printf_i+0x1c8>
 8001060:	8019      	strh	r1, [r3, #0]
 8001062:	2300      	movs	r3, #0
 8001064:	6123      	str	r3, [r4, #16]
 8001066:	4615      	mov	r5, r2
 8001068:	e7ba      	b.n	8000fe0 <_printf_i+0x150>
 800106a:	682b      	ldr	r3, [r5, #0]
 800106c:	1d1a      	adds	r2, r3, #4
 800106e:	602a      	str	r2, [r5, #0]
 8001070:	681d      	ldr	r5, [r3, #0]
 8001072:	6862      	ldr	r2, [r4, #4]
 8001074:	2100      	movs	r1, #0
 8001076:	4628      	mov	r0, r5
 8001078:	f7ff f8aa 	bl	80001d0 <memchr>
 800107c:	b108      	cbz	r0, 8001082 <_printf_i+0x1f2>
 800107e:	1b40      	subs	r0, r0, r5
 8001080:	6060      	str	r0, [r4, #4]
 8001082:	6863      	ldr	r3, [r4, #4]
 8001084:	6123      	str	r3, [r4, #16]
 8001086:	2300      	movs	r3, #0
 8001088:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800108c:	e7a8      	b.n	8000fe0 <_printf_i+0x150>
 800108e:	6923      	ldr	r3, [r4, #16]
 8001090:	462a      	mov	r2, r5
 8001092:	4649      	mov	r1, r9
 8001094:	4640      	mov	r0, r8
 8001096:	47d0      	blx	sl
 8001098:	3001      	adds	r0, #1
 800109a:	d0ab      	beq.n	8000ff4 <_printf_i+0x164>
 800109c:	6823      	ldr	r3, [r4, #0]
 800109e:	079b      	lsls	r3, r3, #30
 80010a0:	d413      	bmi.n	80010ca <_printf_i+0x23a>
 80010a2:	68e0      	ldr	r0, [r4, #12]
 80010a4:	9b03      	ldr	r3, [sp, #12]
 80010a6:	4298      	cmp	r0, r3
 80010a8:	bfb8      	it	lt
 80010aa:	4618      	movlt	r0, r3
 80010ac:	e7a4      	b.n	8000ff8 <_printf_i+0x168>
 80010ae:	2301      	movs	r3, #1
 80010b0:	4632      	mov	r2, r6
 80010b2:	4649      	mov	r1, r9
 80010b4:	4640      	mov	r0, r8
 80010b6:	47d0      	blx	sl
 80010b8:	3001      	adds	r0, #1
 80010ba:	d09b      	beq.n	8000ff4 <_printf_i+0x164>
 80010bc:	3501      	adds	r5, #1
 80010be:	68e3      	ldr	r3, [r4, #12]
 80010c0:	9903      	ldr	r1, [sp, #12]
 80010c2:	1a5b      	subs	r3, r3, r1
 80010c4:	42ab      	cmp	r3, r5
 80010c6:	dcf2      	bgt.n	80010ae <_printf_i+0x21e>
 80010c8:	e7eb      	b.n	80010a2 <_printf_i+0x212>
 80010ca:	2500      	movs	r5, #0
 80010cc:	f104 0619 	add.w	r6, r4, #25
 80010d0:	e7f5      	b.n	80010be <_printf_i+0x22e>
 80010d2:	bf00      	nop
 80010d4:	080013ee 	.word	0x080013ee
 80010d8:	080013ff 	.word	0x080013ff

080010dc <memcpy>:
 80010dc:	440a      	add	r2, r1
 80010de:	4291      	cmp	r1, r2
 80010e0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80010e4:	d100      	bne.n	80010e8 <memcpy+0xc>
 80010e6:	4770      	bx	lr
 80010e8:	b510      	push	{r4, lr}
 80010ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80010ee:	f803 4f01 	strb.w	r4, [r3, #1]!
 80010f2:	4291      	cmp	r1, r2
 80010f4:	d1f9      	bne.n	80010ea <memcpy+0xe>
 80010f6:	bd10      	pop	{r4, pc}

080010f8 <memmove>:
 80010f8:	4288      	cmp	r0, r1
 80010fa:	b510      	push	{r4, lr}
 80010fc:	eb01 0402 	add.w	r4, r1, r2
 8001100:	d902      	bls.n	8001108 <memmove+0x10>
 8001102:	4284      	cmp	r4, r0
 8001104:	4623      	mov	r3, r4
 8001106:	d807      	bhi.n	8001118 <memmove+0x20>
 8001108:	1e43      	subs	r3, r0, #1
 800110a:	42a1      	cmp	r1, r4
 800110c:	d008      	beq.n	8001120 <memmove+0x28>
 800110e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8001112:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001116:	e7f8      	b.n	800110a <memmove+0x12>
 8001118:	4402      	add	r2, r0
 800111a:	4601      	mov	r1, r0
 800111c:	428a      	cmp	r2, r1
 800111e:	d100      	bne.n	8001122 <memmove+0x2a>
 8001120:	bd10      	pop	{r4, pc}
 8001122:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001126:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800112a:	e7f7      	b.n	800111c <memmove+0x24>

0800112c <_free_r>:
 800112c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800112e:	2900      	cmp	r1, #0
 8001130:	d044      	beq.n	80011bc <_free_r+0x90>
 8001132:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001136:	9001      	str	r0, [sp, #4]
 8001138:	2b00      	cmp	r3, #0
 800113a:	f1a1 0404 	sub.w	r4, r1, #4
 800113e:	bfb8      	it	lt
 8001140:	18e4      	addlt	r4, r4, r3
 8001142:	f000 f913 	bl	800136c <__malloc_lock>
 8001146:	4a1e      	ldr	r2, [pc, #120]	; (80011c0 <_free_r+0x94>)
 8001148:	9801      	ldr	r0, [sp, #4]
 800114a:	6813      	ldr	r3, [r2, #0]
 800114c:	b933      	cbnz	r3, 800115c <_free_r+0x30>
 800114e:	6063      	str	r3, [r4, #4]
 8001150:	6014      	str	r4, [r2, #0]
 8001152:	b003      	add	sp, #12
 8001154:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001158:	f000 b90e 	b.w	8001378 <__malloc_unlock>
 800115c:	42a3      	cmp	r3, r4
 800115e:	d908      	bls.n	8001172 <_free_r+0x46>
 8001160:	6825      	ldr	r5, [r4, #0]
 8001162:	1961      	adds	r1, r4, r5
 8001164:	428b      	cmp	r3, r1
 8001166:	bf01      	itttt	eq
 8001168:	6819      	ldreq	r1, [r3, #0]
 800116a:	685b      	ldreq	r3, [r3, #4]
 800116c:	1949      	addeq	r1, r1, r5
 800116e:	6021      	streq	r1, [r4, #0]
 8001170:	e7ed      	b.n	800114e <_free_r+0x22>
 8001172:	461a      	mov	r2, r3
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	b10b      	cbz	r3, 800117c <_free_r+0x50>
 8001178:	42a3      	cmp	r3, r4
 800117a:	d9fa      	bls.n	8001172 <_free_r+0x46>
 800117c:	6811      	ldr	r1, [r2, #0]
 800117e:	1855      	adds	r5, r2, r1
 8001180:	42a5      	cmp	r5, r4
 8001182:	d10b      	bne.n	800119c <_free_r+0x70>
 8001184:	6824      	ldr	r4, [r4, #0]
 8001186:	4421      	add	r1, r4
 8001188:	1854      	adds	r4, r2, r1
 800118a:	42a3      	cmp	r3, r4
 800118c:	6011      	str	r1, [r2, #0]
 800118e:	d1e0      	bne.n	8001152 <_free_r+0x26>
 8001190:	681c      	ldr	r4, [r3, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	6053      	str	r3, [r2, #4]
 8001196:	4421      	add	r1, r4
 8001198:	6011      	str	r1, [r2, #0]
 800119a:	e7da      	b.n	8001152 <_free_r+0x26>
 800119c:	d902      	bls.n	80011a4 <_free_r+0x78>
 800119e:	230c      	movs	r3, #12
 80011a0:	6003      	str	r3, [r0, #0]
 80011a2:	e7d6      	b.n	8001152 <_free_r+0x26>
 80011a4:	6825      	ldr	r5, [r4, #0]
 80011a6:	1961      	adds	r1, r4, r5
 80011a8:	428b      	cmp	r3, r1
 80011aa:	bf04      	itt	eq
 80011ac:	6819      	ldreq	r1, [r3, #0]
 80011ae:	685b      	ldreq	r3, [r3, #4]
 80011b0:	6063      	str	r3, [r4, #4]
 80011b2:	bf04      	itt	eq
 80011b4:	1949      	addeq	r1, r1, r5
 80011b6:	6021      	streq	r1, [r4, #0]
 80011b8:	6054      	str	r4, [r2, #4]
 80011ba:	e7ca      	b.n	8001152 <_free_r+0x26>
 80011bc:	b003      	add	sp, #12
 80011be:	bd30      	pop	{r4, r5, pc}
 80011c0:	2000008c 	.word	0x2000008c

080011c4 <sbrk_aligned>:
 80011c4:	b570      	push	{r4, r5, r6, lr}
 80011c6:	4e0e      	ldr	r6, [pc, #56]	; (8001200 <sbrk_aligned+0x3c>)
 80011c8:	460c      	mov	r4, r1
 80011ca:	6831      	ldr	r1, [r6, #0]
 80011cc:	4605      	mov	r5, r0
 80011ce:	b911      	cbnz	r1, 80011d6 <sbrk_aligned+0x12>
 80011d0:	f000 f8bc 	bl	800134c <_sbrk_r>
 80011d4:	6030      	str	r0, [r6, #0]
 80011d6:	4621      	mov	r1, r4
 80011d8:	4628      	mov	r0, r5
 80011da:	f000 f8b7 	bl	800134c <_sbrk_r>
 80011de:	1c43      	adds	r3, r0, #1
 80011e0:	d00a      	beq.n	80011f8 <sbrk_aligned+0x34>
 80011e2:	1cc4      	adds	r4, r0, #3
 80011e4:	f024 0403 	bic.w	r4, r4, #3
 80011e8:	42a0      	cmp	r0, r4
 80011ea:	d007      	beq.n	80011fc <sbrk_aligned+0x38>
 80011ec:	1a21      	subs	r1, r4, r0
 80011ee:	4628      	mov	r0, r5
 80011f0:	f000 f8ac 	bl	800134c <_sbrk_r>
 80011f4:	3001      	adds	r0, #1
 80011f6:	d101      	bne.n	80011fc <sbrk_aligned+0x38>
 80011f8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80011fc:	4620      	mov	r0, r4
 80011fe:	bd70      	pop	{r4, r5, r6, pc}
 8001200:	20000090 	.word	0x20000090

08001204 <_malloc_r>:
 8001204:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001208:	1ccd      	adds	r5, r1, #3
 800120a:	f025 0503 	bic.w	r5, r5, #3
 800120e:	3508      	adds	r5, #8
 8001210:	2d0c      	cmp	r5, #12
 8001212:	bf38      	it	cc
 8001214:	250c      	movcc	r5, #12
 8001216:	2d00      	cmp	r5, #0
 8001218:	4607      	mov	r7, r0
 800121a:	db01      	blt.n	8001220 <_malloc_r+0x1c>
 800121c:	42a9      	cmp	r1, r5
 800121e:	d905      	bls.n	800122c <_malloc_r+0x28>
 8001220:	230c      	movs	r3, #12
 8001222:	603b      	str	r3, [r7, #0]
 8001224:	2600      	movs	r6, #0
 8001226:	4630      	mov	r0, r6
 8001228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800122c:	4e2e      	ldr	r6, [pc, #184]	; (80012e8 <_malloc_r+0xe4>)
 800122e:	f000 f89d 	bl	800136c <__malloc_lock>
 8001232:	6833      	ldr	r3, [r6, #0]
 8001234:	461c      	mov	r4, r3
 8001236:	bb34      	cbnz	r4, 8001286 <_malloc_r+0x82>
 8001238:	4629      	mov	r1, r5
 800123a:	4638      	mov	r0, r7
 800123c:	f7ff ffc2 	bl	80011c4 <sbrk_aligned>
 8001240:	1c43      	adds	r3, r0, #1
 8001242:	4604      	mov	r4, r0
 8001244:	d14d      	bne.n	80012e2 <_malloc_r+0xde>
 8001246:	6834      	ldr	r4, [r6, #0]
 8001248:	4626      	mov	r6, r4
 800124a:	2e00      	cmp	r6, #0
 800124c:	d140      	bne.n	80012d0 <_malloc_r+0xcc>
 800124e:	6823      	ldr	r3, [r4, #0]
 8001250:	4631      	mov	r1, r6
 8001252:	4638      	mov	r0, r7
 8001254:	eb04 0803 	add.w	r8, r4, r3
 8001258:	f000 f878 	bl	800134c <_sbrk_r>
 800125c:	4580      	cmp	r8, r0
 800125e:	d13a      	bne.n	80012d6 <_malloc_r+0xd2>
 8001260:	6821      	ldr	r1, [r4, #0]
 8001262:	3503      	adds	r5, #3
 8001264:	1a6d      	subs	r5, r5, r1
 8001266:	f025 0503 	bic.w	r5, r5, #3
 800126a:	3508      	adds	r5, #8
 800126c:	2d0c      	cmp	r5, #12
 800126e:	bf38      	it	cc
 8001270:	250c      	movcc	r5, #12
 8001272:	4629      	mov	r1, r5
 8001274:	4638      	mov	r0, r7
 8001276:	f7ff ffa5 	bl	80011c4 <sbrk_aligned>
 800127a:	3001      	adds	r0, #1
 800127c:	d02b      	beq.n	80012d6 <_malloc_r+0xd2>
 800127e:	6823      	ldr	r3, [r4, #0]
 8001280:	442b      	add	r3, r5
 8001282:	6023      	str	r3, [r4, #0]
 8001284:	e00e      	b.n	80012a4 <_malloc_r+0xa0>
 8001286:	6822      	ldr	r2, [r4, #0]
 8001288:	1b52      	subs	r2, r2, r5
 800128a:	d41e      	bmi.n	80012ca <_malloc_r+0xc6>
 800128c:	2a0b      	cmp	r2, #11
 800128e:	d916      	bls.n	80012be <_malloc_r+0xba>
 8001290:	1961      	adds	r1, r4, r5
 8001292:	42a3      	cmp	r3, r4
 8001294:	6025      	str	r5, [r4, #0]
 8001296:	bf18      	it	ne
 8001298:	6059      	strne	r1, [r3, #4]
 800129a:	6863      	ldr	r3, [r4, #4]
 800129c:	bf08      	it	eq
 800129e:	6031      	streq	r1, [r6, #0]
 80012a0:	5162      	str	r2, [r4, r5]
 80012a2:	604b      	str	r3, [r1, #4]
 80012a4:	4638      	mov	r0, r7
 80012a6:	f104 060b 	add.w	r6, r4, #11
 80012aa:	f000 f865 	bl	8001378 <__malloc_unlock>
 80012ae:	f026 0607 	bic.w	r6, r6, #7
 80012b2:	1d23      	adds	r3, r4, #4
 80012b4:	1af2      	subs	r2, r6, r3
 80012b6:	d0b6      	beq.n	8001226 <_malloc_r+0x22>
 80012b8:	1b9b      	subs	r3, r3, r6
 80012ba:	50a3      	str	r3, [r4, r2]
 80012bc:	e7b3      	b.n	8001226 <_malloc_r+0x22>
 80012be:	6862      	ldr	r2, [r4, #4]
 80012c0:	42a3      	cmp	r3, r4
 80012c2:	bf0c      	ite	eq
 80012c4:	6032      	streq	r2, [r6, #0]
 80012c6:	605a      	strne	r2, [r3, #4]
 80012c8:	e7ec      	b.n	80012a4 <_malloc_r+0xa0>
 80012ca:	4623      	mov	r3, r4
 80012cc:	6864      	ldr	r4, [r4, #4]
 80012ce:	e7b2      	b.n	8001236 <_malloc_r+0x32>
 80012d0:	4634      	mov	r4, r6
 80012d2:	6876      	ldr	r6, [r6, #4]
 80012d4:	e7b9      	b.n	800124a <_malloc_r+0x46>
 80012d6:	230c      	movs	r3, #12
 80012d8:	603b      	str	r3, [r7, #0]
 80012da:	4638      	mov	r0, r7
 80012dc:	f000 f84c 	bl	8001378 <__malloc_unlock>
 80012e0:	e7a1      	b.n	8001226 <_malloc_r+0x22>
 80012e2:	6025      	str	r5, [r4, #0]
 80012e4:	e7de      	b.n	80012a4 <_malloc_r+0xa0>
 80012e6:	bf00      	nop
 80012e8:	2000008c 	.word	0x2000008c

080012ec <_realloc_r>:
 80012ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80012f0:	4680      	mov	r8, r0
 80012f2:	4614      	mov	r4, r2
 80012f4:	460e      	mov	r6, r1
 80012f6:	b921      	cbnz	r1, 8001302 <_realloc_r+0x16>
 80012f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80012fc:	4611      	mov	r1, r2
 80012fe:	f7ff bf81 	b.w	8001204 <_malloc_r>
 8001302:	b92a      	cbnz	r2, 8001310 <_realloc_r+0x24>
 8001304:	f7ff ff12 	bl	800112c <_free_r>
 8001308:	4625      	mov	r5, r4
 800130a:	4628      	mov	r0, r5
 800130c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001310:	f000 f838 	bl	8001384 <_malloc_usable_size_r>
 8001314:	4284      	cmp	r4, r0
 8001316:	4607      	mov	r7, r0
 8001318:	d802      	bhi.n	8001320 <_realloc_r+0x34>
 800131a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800131e:	d812      	bhi.n	8001346 <_realloc_r+0x5a>
 8001320:	4621      	mov	r1, r4
 8001322:	4640      	mov	r0, r8
 8001324:	f7ff ff6e 	bl	8001204 <_malloc_r>
 8001328:	4605      	mov	r5, r0
 800132a:	2800      	cmp	r0, #0
 800132c:	d0ed      	beq.n	800130a <_realloc_r+0x1e>
 800132e:	42bc      	cmp	r4, r7
 8001330:	4622      	mov	r2, r4
 8001332:	4631      	mov	r1, r6
 8001334:	bf28      	it	cs
 8001336:	463a      	movcs	r2, r7
 8001338:	f7ff fed0 	bl	80010dc <memcpy>
 800133c:	4631      	mov	r1, r6
 800133e:	4640      	mov	r0, r8
 8001340:	f7ff fef4 	bl	800112c <_free_r>
 8001344:	e7e1      	b.n	800130a <_realloc_r+0x1e>
 8001346:	4635      	mov	r5, r6
 8001348:	e7df      	b.n	800130a <_realloc_r+0x1e>
	...

0800134c <_sbrk_r>:
 800134c:	b538      	push	{r3, r4, r5, lr}
 800134e:	4d06      	ldr	r5, [pc, #24]	; (8001368 <_sbrk_r+0x1c>)
 8001350:	2300      	movs	r3, #0
 8001352:	4604      	mov	r4, r0
 8001354:	4608      	mov	r0, r1
 8001356:	602b      	str	r3, [r5, #0]
 8001358:	f7ff faec 	bl	8000934 <_sbrk>
 800135c:	1c43      	adds	r3, r0, #1
 800135e:	d102      	bne.n	8001366 <_sbrk_r+0x1a>
 8001360:	682b      	ldr	r3, [r5, #0]
 8001362:	b103      	cbz	r3, 8001366 <_sbrk_r+0x1a>
 8001364:	6023      	str	r3, [r4, #0]
 8001366:	bd38      	pop	{r3, r4, r5, pc}
 8001368:	20000094 	.word	0x20000094

0800136c <__malloc_lock>:
 800136c:	4801      	ldr	r0, [pc, #4]	; (8001374 <__malloc_lock+0x8>)
 800136e:	f000 b811 	b.w	8001394 <__retarget_lock_acquire_recursive>
 8001372:	bf00      	nop
 8001374:	20000098 	.word	0x20000098

08001378 <__malloc_unlock>:
 8001378:	4801      	ldr	r0, [pc, #4]	; (8001380 <__malloc_unlock+0x8>)
 800137a:	f000 b80c 	b.w	8001396 <__retarget_lock_release_recursive>
 800137e:	bf00      	nop
 8001380:	20000098 	.word	0x20000098

08001384 <_malloc_usable_size_r>:
 8001384:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001388:	1f18      	subs	r0, r3, #4
 800138a:	2b00      	cmp	r3, #0
 800138c:	bfbc      	itt	lt
 800138e:	580b      	ldrlt	r3, [r1, r0]
 8001390:	18c0      	addlt	r0, r0, r3
 8001392:	4770      	bx	lr

08001394 <__retarget_lock_acquire_recursive>:
 8001394:	4770      	bx	lr

08001396 <__retarget_lock_release_recursive>:
 8001396:	4770      	bx	lr

08001398 <_init>:
 8001398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800139a:	bf00      	nop
 800139c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800139e:	bc08      	pop	{r3}
 80013a0:	469e      	mov	lr, r3
 80013a2:	4770      	bx	lr

080013a4 <_fini>:
 80013a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80013a6:	bf00      	nop
 80013a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80013aa:	bc08      	pop	{r3}
 80013ac:	469e      	mov	lr, r3
 80013ae:	4770      	bx	lr
