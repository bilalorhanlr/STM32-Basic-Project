
dot-matrix_tutorial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000410  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000598  08000598  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000598  08000598  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000598  08000598  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000598  08000598  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000598  08000598  00010598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800059c  0800059c  0001059c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  080005a0  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001585  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000517  00000000  00000000  000215b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000210  00000000  00000000  00021ad0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001c8  00000000  00000000  00021ce0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e63c  00000000  00000000  00021ea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000212b  00000000  00000000  000404e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bb584  00000000  00000000  0004260f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000fdb93  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000690  00000000  00000000  000fdbe4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000580 	.word	0x08000580

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000580 	.word	0x08000580

080001c8 <System_Clock_Init>:
#include "stm32f4xx.h"

void System_Clock_Init(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
    RCC->CR |= (1 << 0);                // Sistem saatini HSI seç
 80001cc:	4b1b      	ldr	r3, [pc, #108]	; (800023c <System_Clock_Init+0x74>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a1a      	ldr	r2, [pc, #104]	; (800023c <System_Clock_Init+0x74>)
 80001d2:	f043 0301 	orr.w	r3, r3, #1
 80001d6:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_HSIRDY)); // HSI hazır olana kadar bekle
 80001d8:	bf00      	nop
 80001da:	4b18      	ldr	r3, [pc, #96]	; (800023c <System_Clock_Init+0x74>)
 80001dc:	681b      	ldr	r3, [r3, #0]
 80001de:	f003 0302 	and.w	r3, r3, #2
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d0f9      	beq.n	80001da <System_Clock_Init+0x12>
    RCC->CFGR &= ~(3 << 0);             // HSI'yi sistem saati olarak yapılandır
 80001e6:	4b15      	ldr	r3, [pc, #84]	; (800023c <System_Clock_Init+0x74>)
 80001e8:	689b      	ldr	r3, [r3, #8]
 80001ea:	4a14      	ldr	r2, [pc, #80]	; (800023c <System_Clock_Init+0x74>)
 80001ec:	f023 0303 	bic.w	r3, r3, #3
 80001f0:	6093      	str	r3, [r2, #8]
    while ((RCC->CFGR & (3 << 2)) != (0 << 2));
 80001f2:	bf00      	nop
 80001f4:	4b11      	ldr	r3, [pc, #68]	; (800023c <System_Clock_Init+0x74>)
 80001f6:	689b      	ldr	r3, [r3, #8]
 80001f8:	f003 030c 	and.w	r3, r3, #12
 80001fc:	2b00      	cmp	r3, #0
 80001fe:	d1f9      	bne.n	80001f4 <System_Clock_Init+0x2c>
    RCC->AHB1ENR |= (1 << 0);           // GPIOA saatini etkinleştir
 8000200:	4b0e      	ldr	r3, [pc, #56]	; (800023c <System_Clock_Init+0x74>)
 8000202:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000204:	4a0d      	ldr	r2, [pc, #52]	; (800023c <System_Clock_Init+0x74>)
 8000206:	f043 0301 	orr.w	r3, r3, #1
 800020a:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->AHB1ENR |= (1 << 1);           // GPIOB saatini etkinleştir
 800020c:	4b0b      	ldr	r3, [pc, #44]	; (800023c <System_Clock_Init+0x74>)
 800020e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000210:	4a0a      	ldr	r2, [pc, #40]	; (800023c <System_Clock_Init+0x74>)
 8000212:	f043 0302 	orr.w	r3, r3, #2
 8000216:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->AHB1ENR |= (1 << 3);           // GPIOD saatini etkinleştir (LED için)
 8000218:	4b08      	ldr	r3, [pc, #32]	; (800023c <System_Clock_Init+0x74>)
 800021a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800021c:	4a07      	ldr	r2, [pc, #28]	; (800023c <System_Clock_Init+0x74>)
 800021e:	f043 0308 	orr.w	r3, r3, #8
 8000222:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->APB2ENR |= (1 << 12);          // SPI1 için saat etkinleştir
 8000224:	4b05      	ldr	r3, [pc, #20]	; (800023c <System_Clock_Init+0x74>)
 8000226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000228:	4a04      	ldr	r2, [pc, #16]	; (800023c <System_Clock_Init+0x74>)
 800022a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800022e:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000230:	bf00      	nop
 8000232:	46bd      	mov	sp, r7
 8000234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000238:	4770      	bx	lr
 800023a:	bf00      	nop
 800023c:	40023800 	.word	0x40023800

08000240 <GPIO_Init>:

void GPIO_Init(void)
{
 8000240:	b480      	push	{r7}
 8000242:	af00      	add	r7, sp, #0
    // PA4, PA5, PA6, PA7 pinlerini alternatif fonksiyon (AF) moduna ayarla
    GPIOA->MODER &= ~((0x3 << (2 * 5)) | (0x3 << (2 * 6)) | (0x3 << (2 * 7)));  // PA4, PA5, PA6, PA7 pinlerini temizle
 8000244:	4b1a      	ldr	r3, [pc, #104]	; (80002b0 <GPIO_Init+0x70>)
 8000246:	681b      	ldr	r3, [r3, #0]
 8000248:	4a19      	ldr	r2, [pc, #100]	; (80002b0 <GPIO_Init+0x70>)
 800024a:	f423 437c 	bic.w	r3, r3, #64512	; 0xfc00
 800024e:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= ((0x2 << (2 * 5)) | (0x2 << (2 * 6)) | (0x2 << (2 * 7)));   // PA4, PA5, PA6, PA7 pinlerini AF moduna ayarla
 8000250:	4b17      	ldr	r3, [pc, #92]	; (80002b0 <GPIO_Init+0x70>)
 8000252:	681b      	ldr	r3, [r3, #0]
 8000254:	4a16      	ldr	r2, [pc, #88]	; (80002b0 <GPIO_Init+0x70>)
 8000256:	f443 4328 	orr.w	r3, r3, #43008	; 0xa800
 800025a:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] |= (5 << (4 * 5)) | (5 << (4 * 6)) | (5 << (4 * 7));            // PA4, PA5, PA6, PA7 için AF5 seç
 800025c:	4b14      	ldr	r3, [pc, #80]	; (80002b0 <GPIO_Init+0x70>)
 800025e:	6a1b      	ldr	r3, [r3, #32]
 8000260:	4a13      	ldr	r2, [pc, #76]	; (80002b0 <GPIO_Init+0x70>)
 8000262:	f043 43aa 	orr.w	r3, r3, #1426063360	; 0x55000000
 8000266:	f443 03a0 	orr.w	r3, r3, #5242880	; 0x500000
 800026a:	6213      	str	r3, [r2, #32]

    // PA1, PA3, PA8, PA10 pinlerini çıkış (output) moduna ayarla
    GPIOA->MODER &= ~((0x3 << (2 * 1)) | (0x3 << (2 * 3)) | (0x3 << (2 * 8)) | (0x3 << (2 * 10))); // PA1, PA3, PA8, PA10 pinlerini temizle
 800026c:	4b10      	ldr	r3, [pc, #64]	; (80002b0 <GPIO_Init+0x70>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a0f      	ldr	r2, [pc, #60]	; (80002b0 <GPIO_Init+0x70>)
 8000272:	f423 134c 	bic.w	r3, r3, #3342336	; 0x330000
 8000276:	f023 03cc 	bic.w	r3, r3, #204	; 0xcc
 800027a:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= ((0x1 << (2 * 1)) | (0x1 << (2 * 3)) | (0x1 << (2 * 8)) | (0x1 << (2 * 10)));  // PA1, PA3, PA8, PA10 pinlerini output moduna ayarla
 800027c:	4b0c      	ldr	r3, [pc, #48]	; (80002b0 <GPIO_Init+0x70>)
 800027e:	681b      	ldr	r3, [r3, #0]
 8000280:	4a0b      	ldr	r2, [pc, #44]	; (80002b0 <GPIO_Init+0x70>)
 8000282:	f443 1388 	orr.w	r3, r3, #1114112	; 0x110000
 8000286:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800028a:	6013      	str	r3, [r2, #0]

    // PB2, PB4, PB5, PB6, PB9, PB11, PB12 pinlerini çıkış (output) moduna ayarla
    GPIOB->MODER &= ~((0x3 << (2 * 2)) | (0x3 << (2 * 4)) | (0x3 << (2 * 5)) | (0x3 << (2 * 6)) |
 800028c:	4b09      	ldr	r3, [pc, #36]	; (80002b4 <GPIO_Init+0x74>)
 800028e:	681a      	ldr	r2, [r3, #0]
 8000290:	4908      	ldr	r1, [pc, #32]	; (80002b4 <GPIO_Init+0x74>)
 8000292:	4b09      	ldr	r3, [pc, #36]	; (80002b8 <GPIO_Init+0x78>)
 8000294:	4013      	ands	r3, r2
 8000296:	600b      	str	r3, [r1, #0]
                      (0x3 << (2 * 9)) | (0x3 << (2 * 11)) | (0x3 << (2 * 12)));                    // PB2, PB4, PB5, PB6, PB9, PB11, PB12 pinlerini temizle
    GPIOB->MODER |= ((0x1 << (2 * 2)) | (0x1 << (2 * 4)) | (0x1 << (2 * 5)) | (0x1 << (2 * 6)) |
 8000298:	4b06      	ldr	r3, [pc, #24]	; (80002b4 <GPIO_Init+0x74>)
 800029a:	681a      	ldr	r2, [r3, #0]
 800029c:	4905      	ldr	r1, [pc, #20]	; (80002b4 <GPIO_Init+0x74>)
 800029e:	4b07      	ldr	r3, [pc, #28]	; (80002bc <GPIO_Init+0x7c>)
 80002a0:	4313      	orrs	r3, r2
 80002a2:	600b      	str	r3, [r1, #0]
//    // PD15 pinini çıkış (output) moduna ayarla (Mavi LED)
//    GPIOD->MODER &= ~(0x3 << (2 * 15)); // PD15 pinini temizle
//    GPIOD->MODER |= (0x1 << (2 * 15));  // PD15 pinini output moduna ayarla


}
 80002a4:	bf00      	nop
 80002a6:	46bd      	mov	sp, r7
 80002a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop
 80002b0:	40020000 	.word	0x40020000
 80002b4:	40020400 	.word	0x40020400
 80002b8:	fc33c0cf 	.word	0xfc33c0cf
 80002bc:	01441510 	.word	0x01441510

080002c0 <SPI1_Init>:

void SPI1_Init(void)
{
 80002c0:	b480      	push	{r7}
 80002c2:	af00      	add	r7, sp, #0
    SPI1->CR1 &= ~(1 << 0);      // CPHA (Saat Fazı)
 80002c4:	4b1f      	ldr	r3, [pc, #124]	; (8000344 <SPI1_Init+0x84>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a1e      	ldr	r2, [pc, #120]	; (8000344 <SPI1_Init+0x84>)
 80002ca:	f023 0301 	bic.w	r3, r3, #1
 80002ce:	6013      	str	r3, [r2, #0]
    SPI1->CR1 &= ~(1 << 1);      // CPOL (Saat Kutbu)
 80002d0:	4b1c      	ldr	r3, [pc, #112]	; (8000344 <SPI1_Init+0x84>)
 80002d2:	681b      	ldr	r3, [r3, #0]
 80002d4:	4a1b      	ldr	r2, [pc, #108]	; (8000344 <SPI1_Init+0x84>)
 80002d6:	f023 0302 	bic.w	r3, r3, #2
 80002da:	6013      	str	r3, [r2, #0]
    SPI1->CR1 &= ~(1 << 2);      // MSTR (Master/Slave Seçimi)
 80002dc:	4b19      	ldr	r3, [pc, #100]	; (8000344 <SPI1_Init+0x84>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	4a18      	ldr	r2, [pc, #96]	; (8000344 <SPI1_Init+0x84>)
 80002e2:	f023 0304 	bic.w	r3, r3, #4
 80002e6:	6013      	str	r3, [r2, #0]
    SPI1->CR1 &= ~(0x7 << 3);    // BR (Baud Rate)
 80002e8:	4b16      	ldr	r3, [pc, #88]	; (8000344 <SPI1_Init+0x84>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a15      	ldr	r2, [pc, #84]	; (8000344 <SPI1_Init+0x84>)
 80002ee:	f023 0338 	bic.w	r3, r3, #56	; 0x38
 80002f2:	6013      	str	r3, [r2, #0]
    SPI1->CR1 |= (0x3 << 3);     // SPI hızını ayarla
 80002f4:	4b13      	ldr	r3, [pc, #76]	; (8000344 <SPI1_Init+0x84>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	4a12      	ldr	r2, [pc, #72]	; (8000344 <SPI1_Init+0x84>)
 80002fa:	f043 0318 	orr.w	r3, r3, #24
 80002fe:	6013      	str	r3, [r2, #0]
    SPI1->CR1 &= ~(1 << 11);     // DFF (Data Frame Format)
 8000300:	4b10      	ldr	r3, [pc, #64]	; (8000344 <SPI1_Init+0x84>)
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a0f      	ldr	r2, [pc, #60]	; (8000344 <SPI1_Init+0x84>)
 8000306:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800030a:	6013      	str	r3, [r2, #0]
    SPI1->CR1 |= (SPI_CR1_SPE);  // SPI'yi etkinleştir
 800030c:	4b0d      	ldr	r3, [pc, #52]	; (8000344 <SPI1_Init+0x84>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4a0c      	ldr	r2, [pc, #48]	; (8000344 <SPI1_Init+0x84>)
 8000312:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000316:	6013      	str	r3, [r2, #0]

    // SS pinini (PA4) çıkış moduna ayarla
        GPIOA->MODER &= ~(0x3 << (2 * 4)); // PA4 pinini temizle
 8000318:	4b0b      	ldr	r3, [pc, #44]	; (8000348 <SPI1_Init+0x88>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	4a0a      	ldr	r2, [pc, #40]	; (8000348 <SPI1_Init+0x88>)
 800031e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000322:	6013      	str	r3, [r2, #0]
        GPIOA->MODER |=  (0x1 << (2 * 4)); // PA4'ü output moduna ayarla
 8000324:	4b08      	ldr	r3, [pc, #32]	; (8000348 <SPI1_Init+0x88>)
 8000326:	681b      	ldr	r3, [r3, #0]
 8000328:	4a07      	ldr	r2, [pc, #28]	; (8000348 <SPI1_Init+0x88>)
 800032a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800032e:	6013      	str	r3, [r2, #0]
        GPIOA->BSRR = (1 << (4 + 16)); // SS pinini HIGH yap (slave'i devre dışı bırak)
 8000330:	4b05      	ldr	r3, [pc, #20]	; (8000348 <SPI1_Init+0x88>)
 8000332:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000336:	619a      	str	r2, [r3, #24]
}
 8000338:	bf00      	nop
 800033a:	46bd      	mov	sp, r7
 800033c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000340:	4770      	bx	lr
 8000342:	bf00      	nop
 8000344:	40013000 	.word	0x40013000
 8000348:	40020000 	.word	0x40020000

0800034c <UART2_Init>:

void UART2_Init(void)
{
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN;  // UART2 saatini etkinleştir
 8000350:	4b0f      	ldr	r3, [pc, #60]	; (8000390 <UART2_Init+0x44>)
 8000352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000354:	4a0e      	ldr	r2, [pc, #56]	; (8000390 <UART2_Init+0x44>)
 8000356:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800035a:	6413      	str	r3, [r2, #64]	; 0x40

    GPIOA->MODER |= (2 << 4) | (2 << 6);  // PA2 ve PA3'ü alternatif fonksiyona ayarla
 800035c:	4b0d      	ldr	r3, [pc, #52]	; (8000394 <UART2_Init+0x48>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a0c      	ldr	r2, [pc, #48]	; (8000394 <UART2_Init+0x48>)
 8000362:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000366:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] |= (7 << 8) | (7 << 12);  // PA2 ve PA3 için AF7 (UART2) ayarla
 8000368:	4b0a      	ldr	r3, [pc, #40]	; (8000394 <UART2_Init+0x48>)
 800036a:	6a1b      	ldr	r3, [r3, #32]
 800036c:	4a09      	ldr	r2, [pc, #36]	; (8000394 <UART2_Init+0x48>)
 800036e:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8000372:	6213      	str	r3, [r2, #32]

    USART2->BRR = 0x0683;  // Baud rate 9600 bps
 8000374:	4b08      	ldr	r3, [pc, #32]	; (8000398 <UART2_Init+0x4c>)
 8000376:	f240 6283 	movw	r2, #1667	; 0x683
 800037a:	609a      	str	r2, [r3, #8]
    USART2->CR1 = USART_CR1_TE | USART_CR1_RE | USART_CR1_UE;  // UART'ı etkinleştir, TX ve RX'i etkinleştir
 800037c:	4b06      	ldr	r3, [pc, #24]	; (8000398 <UART2_Init+0x4c>)
 800037e:	f242 020c 	movw	r2, #8204	; 0x200c
 8000382:	60da      	str	r2, [r3, #12]
}
 8000384:	bf00      	nop
 8000386:	46bd      	mov	sp, r7
 8000388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop
 8000390:	40023800 	.word	0x40023800
 8000394:	40020000 	.word	0x40020000
 8000398:	40004400 	.word	0x40004400

0800039c <SPI_Transmit>:

void SPI_Transmit(uint8_t data) {
 800039c:	b480      	push	{r7}
 800039e:	b083      	sub	sp, #12
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	4603      	mov	r3, r0
 80003a4:	71fb      	strb	r3, [r7, #7]
    while (!(SPI1->SR & SPI_SR_TXE));  // TXE bayrağının set olmasını bekle
 80003a6:	bf00      	nop
 80003a8:	4b07      	ldr	r3, [pc, #28]	; (80003c8 <SPI_Transmit+0x2c>)
 80003aa:	689b      	ldr	r3, [r3, #8]
 80003ac:	f003 0302 	and.w	r3, r3, #2
 80003b0:	2b00      	cmp	r3, #0
 80003b2:	d0f9      	beq.n	80003a8 <SPI_Transmit+0xc>
    SPI1->DR = data;  // Veriyi gönder
 80003b4:	4a04      	ldr	r2, [pc, #16]	; (80003c8 <SPI_Transmit+0x2c>)
 80003b6:	79fb      	ldrb	r3, [r7, #7]
 80003b8:	60d3      	str	r3, [r2, #12]
}
 80003ba:	bf00      	nop
 80003bc:	370c      	adds	r7, #12
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop
 80003c8:	40013000 	.word	0x40013000

080003cc <delay_ms>:

void LED_Off(uint16_t pin) {
    GPIOD->BSRR = (1 << (pin + 16)); // İlgili pini LOW yap
}

void delay_ms(int delay) {
 80003cc:	b480      	push	{r7}
 80003ce:	b085      	sub	sp, #20
 80003d0:	af00      	add	r7, sp, #0
 80003d2:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < delay * 1000; i++);
 80003d4:	2300      	movs	r3, #0
 80003d6:	60fb      	str	r3, [r7, #12]
 80003d8:	e002      	b.n	80003e0 <delay_ms+0x14>
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	3301      	adds	r3, #1
 80003de:	60fb      	str	r3, [r7, #12]
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80003e6:	fb02 f303 	mul.w	r3, r2, r3
 80003ea:	68fa      	ldr	r2, [r7, #12]
 80003ec:	429a      	cmp	r2, r3
 80003ee:	dbf4      	blt.n	80003da <delay_ms+0xe>
}
 80003f0:	bf00      	nop
 80003f2:	bf00      	nop
 80003f4:	3714      	adds	r7, #20
 80003f6:	46bd      	mov	sp, r7
 80003f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003fc:	4770      	bx	lr
	...

08000400 <main>:

int main(void)
{
 8000400:	b580      	push	{r7, lr}
 8000402:	b082      	sub	sp, #8
 8000404:	af00      	add	r7, sp, #0
    System_Clock_Init();
 8000406:	f7ff fedf 	bl	80001c8 <System_Clock_Init>
    GPIO_Init();
 800040a:	f7ff ff19 	bl	8000240 <GPIO_Init>
    SPI1_Init();
 800040e:	f7ff ff57 	bl	80002c0 <SPI1_Init>
    UART2_Init();
 8000412:	f7ff ff9b 	bl	800034c <UART2_Init>

    uint8_t number = 1;
 8000416:	2301      	movs	r3, #1
 8000418:	71fb      	strb	r3, [r7, #7]
    while (1) {
        GPIOA->BSRR = (1 << (4 + 16));  // SS pinini LOW yap (slave'i etkinleştir)
 800041a:	4b09      	ldr	r3, [pc, #36]	; (8000440 <main+0x40>)
 800041c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000420:	619a      	str	r2, [r3, #24]
        SPI_Transmit(number++);  // Veriyi gönder
 8000422:	79fb      	ldrb	r3, [r7, #7]
 8000424:	1c5a      	adds	r2, r3, #1
 8000426:	71fa      	strb	r2, [r7, #7]
 8000428:	4618      	mov	r0, r3
 800042a:	f7ff ffb7 	bl	800039c <SPI_Transmit>
        GPIOA->BSRR = (1 << 4);  // SS pinini HIGH yap (slave'i devre dışı bırak)
 800042e:	4b04      	ldr	r3, [pc, #16]	; (8000440 <main+0x40>)
 8000430:	2210      	movs	r2, #16
 8000432:	619a      	str	r2, [r3, #24]
        delay_ms(1000); // 1 saniye bekle
 8000434:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000438:	f7ff ffc8 	bl	80003cc <delay_ms>
        GPIOA->BSRR = (1 << (4 + 16));  // SS pinini LOW yap (slave'i etkinleştir)
 800043c:	e7ed      	b.n	800041a <main+0x1a>
 800043e:	bf00      	nop
 8000440:	40020000 	.word	0x40020000

08000444 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000444:	b480      	push	{r7}
 8000446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000448:	e7fe      	b.n	8000448 <NMI_Handler+0x4>

0800044a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800044a:	b480      	push	{r7}
 800044c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800044e:	e7fe      	b.n	800044e <HardFault_Handler+0x4>

08000450 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000450:	b480      	push	{r7}
 8000452:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000454:	e7fe      	b.n	8000454 <MemManage_Handler+0x4>

08000456 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000456:	b480      	push	{r7}
 8000458:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800045a:	e7fe      	b.n	800045a <BusFault_Handler+0x4>

0800045c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800045c:	b480      	push	{r7}
 800045e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000460:	e7fe      	b.n	8000460 <UsageFault_Handler+0x4>

08000462 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000462:	b480      	push	{r7}
 8000464:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000466:	bf00      	nop
 8000468:	46bd      	mov	sp, r7
 800046a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046e:	4770      	bx	lr

08000470 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000470:	b480      	push	{r7}
 8000472:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000474:	bf00      	nop
 8000476:	46bd      	mov	sp, r7
 8000478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800047c:	4770      	bx	lr

0800047e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800047e:	b480      	push	{r7}
 8000480:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000482:	bf00      	nop
 8000484:	46bd      	mov	sp, r7
 8000486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800048a:	4770      	bx	lr

0800048c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000490:	f000 f83e 	bl	8000510 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000494:	bf00      	nop
 8000496:	bd80      	pop	{r7, pc}

08000498 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800049c:	4b06      	ldr	r3, [pc, #24]	; (80004b8 <SystemInit+0x20>)
 800049e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80004a2:	4a05      	ldr	r2, [pc, #20]	; (80004b8 <SystemInit+0x20>)
 80004a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80004a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80004ac:	bf00      	nop
 80004ae:	46bd      	mov	sp, r7
 80004b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop
 80004b8:	e000ed00 	.word	0xe000ed00

080004bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80004bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80004f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80004c0:	480d      	ldr	r0, [pc, #52]	; (80004f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80004c2:	490e      	ldr	r1, [pc, #56]	; (80004fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80004c4:	4a0e      	ldr	r2, [pc, #56]	; (8000500 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004c8:	e002      	b.n	80004d0 <LoopCopyDataInit>

080004ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ce:	3304      	adds	r3, #4

080004d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004d4:	d3f9      	bcc.n	80004ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004d6:	4a0b      	ldr	r2, [pc, #44]	; (8000504 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80004d8:	4c0b      	ldr	r4, [pc, #44]	; (8000508 <LoopFillZerobss+0x26>)
  movs r3, #0
 80004da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004dc:	e001      	b.n	80004e2 <LoopFillZerobss>

080004de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80004e0:	3204      	adds	r2, #4

080004e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80004e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80004e4:	d3fb      	bcc.n	80004de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80004e6:	f7ff ffd7 	bl	8000498 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80004ea:	f000 f825 	bl	8000538 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80004ee:	f7ff ff87 	bl	8000400 <main>
  bx  lr    
 80004f2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80004f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80004f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80004fc:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000500:	080005a0 	.word	0x080005a0
  ldr r2, =_sbss
 8000504:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000508:	20000024 	.word	0x20000024

0800050c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800050c:	e7fe      	b.n	800050c <ADC_IRQHandler>
	...

08000510 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000510:	b480      	push	{r7}
 8000512:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000514:	4b06      	ldr	r3, [pc, #24]	; (8000530 <HAL_IncTick+0x20>)
 8000516:	781b      	ldrb	r3, [r3, #0]
 8000518:	461a      	mov	r2, r3
 800051a:	4b06      	ldr	r3, [pc, #24]	; (8000534 <HAL_IncTick+0x24>)
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	4413      	add	r3, r2
 8000520:	4a04      	ldr	r2, [pc, #16]	; (8000534 <HAL_IncTick+0x24>)
 8000522:	6013      	str	r3, [r2, #0]
}
 8000524:	bf00      	nop
 8000526:	46bd      	mov	sp, r7
 8000528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052c:	4770      	bx	lr
 800052e:	bf00      	nop
 8000530:	20000000 	.word	0x20000000
 8000534:	20000020 	.word	0x20000020

08000538 <__libc_init_array>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	4d0d      	ldr	r5, [pc, #52]	; (8000570 <__libc_init_array+0x38>)
 800053c:	4c0d      	ldr	r4, [pc, #52]	; (8000574 <__libc_init_array+0x3c>)
 800053e:	1b64      	subs	r4, r4, r5
 8000540:	10a4      	asrs	r4, r4, #2
 8000542:	2600      	movs	r6, #0
 8000544:	42a6      	cmp	r6, r4
 8000546:	d109      	bne.n	800055c <__libc_init_array+0x24>
 8000548:	4d0b      	ldr	r5, [pc, #44]	; (8000578 <__libc_init_array+0x40>)
 800054a:	4c0c      	ldr	r4, [pc, #48]	; (800057c <__libc_init_array+0x44>)
 800054c:	f000 f818 	bl	8000580 <_init>
 8000550:	1b64      	subs	r4, r4, r5
 8000552:	10a4      	asrs	r4, r4, #2
 8000554:	2600      	movs	r6, #0
 8000556:	42a6      	cmp	r6, r4
 8000558:	d105      	bne.n	8000566 <__libc_init_array+0x2e>
 800055a:	bd70      	pop	{r4, r5, r6, pc}
 800055c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000560:	4798      	blx	r3
 8000562:	3601      	adds	r6, #1
 8000564:	e7ee      	b.n	8000544 <__libc_init_array+0xc>
 8000566:	f855 3b04 	ldr.w	r3, [r5], #4
 800056a:	4798      	blx	r3
 800056c:	3601      	adds	r6, #1
 800056e:	e7f2      	b.n	8000556 <__libc_init_array+0x1e>
 8000570:	08000598 	.word	0x08000598
 8000574:	08000598 	.word	0x08000598
 8000578:	08000598 	.word	0x08000598
 800057c:	0800059c 	.word	0x0800059c

08000580 <_init>:
 8000580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000582:	bf00      	nop
 8000584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000586:	bc08      	pop	{r3}
 8000588:	469e      	mov	lr, r3
 800058a:	4770      	bx	lr

0800058c <_fini>:
 800058c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800058e:	bf00      	nop
 8000590:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000592:	bc08      	pop	{r3}
 8000594:	469e      	mov	lr, r3
 8000596:	4770      	bx	lr
