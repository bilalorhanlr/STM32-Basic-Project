
FENTEK EC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000023c  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000348  08000348  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000348  08000348  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000348  08000348  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000348  08000348  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000348  08000348  00010348  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800034c  0800034c  0001034c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000350  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08000354  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08000354  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000d56  00000000  00000000  0002002d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004a4  00000000  00000000  00020d83  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001c0  00000000  00000000  00021228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000178  00000000  00000000  000213e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015235  00000000  00000000  00021560  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001e2b  00000000  00000000  00036795  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b0e9  00000000  00000000  000385c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000b36a9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000052c  00000000  00000000  000b36fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000004 	.word	0x20000004
 8000128:	00000000 	.word	0x00000000
 800012c:	08000330 	.word	0x08000330

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000008 	.word	0x20000008
 8000148:	08000330 	.word	0x08000330

0800014c <SPI1_Init>:
#include "stm32f1xx.h"

void SPI1_Init(void) {
 800014c:	b480      	push	{r7}
 800014e:	af00      	add	r7, sp, #0
    // GPIOA portu ve SPI1 için saat sinyallerini etkinleştir
    RCC->APB2ENR |= RCC_APB2ENR_IOPAEN | RCC_APB2ENR_SPI1EN;
 8000150:	4b21      	ldr	r3, [pc, #132]	; (80001d8 <SPI1_Init+0x8c>)
 8000152:	699b      	ldr	r3, [r3, #24]
 8000154:	4a20      	ldr	r2, [pc, #128]	; (80001d8 <SPI1_Init+0x8c>)
 8000156:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800015a:	f043 0304 	orr.w	r3, r3, #4
 800015e:	6193      	str	r3, [r2, #24]

    // PA5 (SCK), PA6 (MISO), PA7 (MOSI) pinlerini ayarla
    GPIOA->CRL &= ~(GPIO_CRL_CNF5 | GPIO_CRL_CNF6 | GPIO_CRL_CNF7);
 8000160:	4b1e      	ldr	r3, [pc, #120]	; (80001dc <SPI1_Init+0x90>)
 8000162:	681b      	ldr	r3, [r3, #0]
 8000164:	4a1d      	ldr	r2, [pc, #116]	; (80001dc <SPI1_Init+0x90>)
 8000166:	f023 434c 	bic.w	r3, r3, #3422552064	; 0xcc000000
 800016a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800016e:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= (GPIO_CRL_CNF5_1 | GPIO_CRL_CNF7_1); // PA5 ve PA7 Input mode floating
 8000170:	4b1a      	ldr	r3, [pc, #104]	; (80001dc <SPI1_Init+0x90>)
 8000172:	681b      	ldr	r3, [r3, #0]
 8000174:	4a19      	ldr	r2, [pc, #100]	; (80001dc <SPI1_Init+0x90>)
 8000176:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800017a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800017e:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= (GPIO_CRL_CNF6_1 | GPIO_CRL_MODE6_1); // PA6 Output mode, AF push-pull
 8000180:	4b16      	ldr	r3, [pc, #88]	; (80001dc <SPI1_Init+0x90>)
 8000182:	681b      	ldr	r3, [r3, #0]
 8000184:	4a15      	ldr	r2, [pc, #84]	; (80001dc <SPI1_Init+0x90>)
 8000186:	f043 6320 	orr.w	r3, r3, #167772160	; 0xa000000
 800018a:	6013      	str	r3, [r2, #0]

    // PA4 (NSS) pinini ayarla
    GPIOA->CRL &= ~GPIO_CRL_CNF4;
 800018c:	4b13      	ldr	r3, [pc, #76]	; (80001dc <SPI1_Init+0x90>)
 800018e:	681b      	ldr	r3, [r3, #0]
 8000190:	4a12      	ldr	r2, [pc, #72]	; (80001dc <SPI1_Init+0x90>)
 8000192:	f423 2340 	bic.w	r3, r3, #786432	; 0xc0000
 8000196:	6013      	str	r3, [r2, #0]
    GPIOA->CRL |= GPIO_CRL_CNF4_1; // PA4 Input mode floating
 8000198:	4b10      	ldr	r3, [pc, #64]	; (80001dc <SPI1_Init+0x90>)
 800019a:	681b      	ldr	r3, [r3, #0]
 800019c:	4a0f      	ldr	r2, [pc, #60]	; (80001dc <SPI1_Init+0x90>)
 800019e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80001a2:	6013      	str	r3, [r2, #0]

    // SPI1 yapılandırması
    SPI1->CR1 = 0; // SPI1 kontrol register'ını sıfırla
 80001a4:	4b0e      	ldr	r3, [pc, #56]	; (80001e0 <SPI1_Init+0x94>)
 80001a6:	2200      	movs	r2, #0
 80001a8:	601a      	str	r2, [r3, #0]
    SPI1->CR1 |= SPI_CR1_MSTR; // Master değil, Slave modundayız
 80001aa:	4b0d      	ldr	r3, [pc, #52]	; (80001e0 <SPI1_Init+0x94>)
 80001ac:	681b      	ldr	r3, [r3, #0]
 80001ae:	4a0c      	ldr	r2, [pc, #48]	; (80001e0 <SPI1_Init+0x94>)
 80001b0:	f043 0304 	orr.w	r3, r3, #4
 80001b4:	6013      	str	r3, [r2, #0]
    SPI1->CR1 |= SPI_CR1_SSM | SPI_CR1_SSI; // Yazılım NSS yönetimi
 80001b6:	4b0a      	ldr	r3, [pc, #40]	; (80001e0 <SPI1_Init+0x94>)
 80001b8:	681b      	ldr	r3, [r3, #0]
 80001ba:	4a09      	ldr	r2, [pc, #36]	; (80001e0 <SPI1_Init+0x94>)
 80001bc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80001c0:	6013      	str	r3, [r2, #0]
    SPI1->CR1 |= SPI_CR1_SPE; // SPI'yi etkinleştir
 80001c2:	4b07      	ldr	r3, [pc, #28]	; (80001e0 <SPI1_Init+0x94>)
 80001c4:	681b      	ldr	r3, [r3, #0]
 80001c6:	4a06      	ldr	r2, [pc, #24]	; (80001e0 <SPI1_Init+0x94>)
 80001c8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001cc:	6013      	str	r3, [r2, #0]
}
 80001ce:	bf00      	nop
 80001d0:	46bd      	mov	sp, r7
 80001d2:	bc80      	pop	{r7}
 80001d4:	4770      	bx	lr
 80001d6:	bf00      	nop
 80001d8:	40021000 	.word	0x40021000
 80001dc:	40010800 	.word	0x40010800
 80001e0:	40013000 	.word	0x40013000

080001e4 <SPI1_ReceiveData>:

uint8_t SPI1_ReceiveData(void) {
 80001e4:	b480      	push	{r7}
 80001e6:	af00      	add	r7, sp, #0
    // SPI'den veri gelmesini bekle
    while (!(SPI1->SR & SPI_SR_RXNE));
 80001e8:	bf00      	nop
 80001ea:	4b06      	ldr	r3, [pc, #24]	; (8000204 <SPI1_ReceiveData+0x20>)
 80001ec:	689b      	ldr	r3, [r3, #8]
 80001ee:	f003 0301 	and.w	r3, r3, #1
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d0f9      	beq.n	80001ea <SPI1_ReceiveData+0x6>
    // Gelen veriyi oku
    return SPI1->DR;
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <SPI1_ReceiveData+0x20>)
 80001f8:	68db      	ldr	r3, [r3, #12]
 80001fa:	b2db      	uxtb	r3, r3
}
 80001fc:	4618      	mov	r0, r3
 80001fe:	46bd      	mov	sp, r7
 8000200:	bc80      	pop	{r7}
 8000202:	4770      	bx	lr
 8000204:	40013000 	.word	0x40013000

08000208 <main>:

int main(void) {
 8000208:	b580      	push	{r7, lr}
 800020a:	b082      	sub	sp, #8
 800020c:	af00      	add	r7, sp, #0
    uint8_t received_data;

    SPI1_Init();  // SPI1'i başlat
 800020e:	f7ff ff9d 	bl	800014c <SPI1_Init>

    while (1) {
        received_data = SPI1_ReceiveData();
 8000212:	f7ff ffe7 	bl	80001e4 <SPI1_ReceiveData>
 8000216:	4603      	mov	r3, r0
 8000218:	71fb      	strb	r3, [r7, #7]
 800021a:	e7fa      	b.n	8000212 <main+0xa>

0800021c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800021c:	b480      	push	{r7}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000220:	e7fe      	b.n	8000220 <NMI_Handler+0x4>

08000222 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000222:	b480      	push	{r7}
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000226:	e7fe      	b.n	8000226 <HardFault_Handler+0x4>

08000228 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000228:	b480      	push	{r7}
 800022a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800022c:	e7fe      	b.n	800022c <MemManage_Handler+0x4>

0800022e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800022e:	b480      	push	{r7}
 8000230:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000232:	e7fe      	b.n	8000232 <BusFault_Handler+0x4>

08000234 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000234:	b480      	push	{r7}
 8000236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000238:	e7fe      	b.n	8000238 <UsageFault_Handler+0x4>

0800023a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800023a:	b480      	push	{r7}
 800023c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800023e:	bf00      	nop
 8000240:	46bd      	mov	sp, r7
 8000242:	bc80      	pop	{r7}
 8000244:	4770      	bx	lr

08000246 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000246:	b480      	push	{r7}
 8000248:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800024a:	bf00      	nop
 800024c:	46bd      	mov	sp, r7
 800024e:	bc80      	pop	{r7}
 8000250:	4770      	bx	lr

08000252 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000252:	b480      	push	{r7}
 8000254:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000256:	bf00      	nop
 8000258:	46bd      	mov	sp, r7
 800025a:	bc80      	pop	{r7}
 800025c:	4770      	bx	lr

0800025e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800025e:	b580      	push	{r7, lr}
 8000260:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000262:	f000 f82f 	bl	80002c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000266:	bf00      	nop
 8000268:	bd80      	pop	{r7, pc}

0800026a <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800026a:	b480      	push	{r7}
 800026c:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800026e:	bf00      	nop
 8000270:	46bd      	mov	sp, r7
 8000272:	bc80      	pop	{r7}
 8000274:	4770      	bx	lr
	...

08000278 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000278:	f7ff fff7 	bl	800026a <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800027c:	480b      	ldr	r0, [pc, #44]	; (80002ac <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800027e:	490c      	ldr	r1, [pc, #48]	; (80002b0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000280:	4a0c      	ldr	r2, [pc, #48]	; (80002b4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000282:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000284:	e002      	b.n	800028c <LoopCopyDataInit>

08000286 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000286:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000288:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800028a:	3304      	adds	r3, #4

0800028c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800028c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800028e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000290:	d3f9      	bcc.n	8000286 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000292:	4a09      	ldr	r2, [pc, #36]	; (80002b8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000294:	4c09      	ldr	r4, [pc, #36]	; (80002bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000296:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000298:	e001      	b.n	800029e <LoopFillZerobss>

0800029a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800029a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800029c:	3204      	adds	r2, #4

0800029e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800029e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002a0:	d3fb      	bcc.n	800029a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80002a2:	f000 f821 	bl	80002e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002a6:	f7ff ffaf 	bl	8000208 <main>
  bx lr
 80002aa:	4770      	bx	lr
  ldr r0, =_sdata
 80002ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002b0:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80002b4:	08000350 	.word	0x08000350
  ldr r2, =_sbss
 80002b8:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80002bc:	20000024 	.word	0x20000024

080002c0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002c0:	e7fe      	b.n	80002c0 <ADC1_2_IRQHandler>
	...

080002c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80002c4:	b480      	push	{r7}
 80002c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80002c8:	4b05      	ldr	r3, [pc, #20]	; (80002e0 <HAL_IncTick+0x1c>)
 80002ca:	781b      	ldrb	r3, [r3, #0]
 80002cc:	461a      	mov	r2, r3
 80002ce:	4b05      	ldr	r3, [pc, #20]	; (80002e4 <HAL_IncTick+0x20>)
 80002d0:	681b      	ldr	r3, [r3, #0]
 80002d2:	4413      	add	r3, r2
 80002d4:	4a03      	ldr	r2, [pc, #12]	; (80002e4 <HAL_IncTick+0x20>)
 80002d6:	6013      	str	r3, [r2, #0]
}
 80002d8:	bf00      	nop
 80002da:	46bd      	mov	sp, r7
 80002dc:	bc80      	pop	{r7}
 80002de:	4770      	bx	lr
 80002e0:	20000000 	.word	0x20000000
 80002e4:	20000020 	.word	0x20000020

080002e8 <__libc_init_array>:
 80002e8:	b570      	push	{r4, r5, r6, lr}
 80002ea:	2600      	movs	r6, #0
 80002ec:	4d0c      	ldr	r5, [pc, #48]	; (8000320 <__libc_init_array+0x38>)
 80002ee:	4c0d      	ldr	r4, [pc, #52]	; (8000324 <__libc_init_array+0x3c>)
 80002f0:	1b64      	subs	r4, r4, r5
 80002f2:	10a4      	asrs	r4, r4, #2
 80002f4:	42a6      	cmp	r6, r4
 80002f6:	d109      	bne.n	800030c <__libc_init_array+0x24>
 80002f8:	f000 f81a 	bl	8000330 <_init>
 80002fc:	2600      	movs	r6, #0
 80002fe:	4d0a      	ldr	r5, [pc, #40]	; (8000328 <__libc_init_array+0x40>)
 8000300:	4c0a      	ldr	r4, [pc, #40]	; (800032c <__libc_init_array+0x44>)
 8000302:	1b64      	subs	r4, r4, r5
 8000304:	10a4      	asrs	r4, r4, #2
 8000306:	42a6      	cmp	r6, r4
 8000308:	d105      	bne.n	8000316 <__libc_init_array+0x2e>
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000310:	4798      	blx	r3
 8000312:	3601      	adds	r6, #1
 8000314:	e7ee      	b.n	80002f4 <__libc_init_array+0xc>
 8000316:	f855 3b04 	ldr.w	r3, [r5], #4
 800031a:	4798      	blx	r3
 800031c:	3601      	adds	r6, #1
 800031e:	e7f2      	b.n	8000306 <__libc_init_array+0x1e>
 8000320:	08000348 	.word	0x08000348
 8000324:	08000348 	.word	0x08000348
 8000328:	08000348 	.word	0x08000348
 800032c:	0800034c 	.word	0x0800034c

08000330 <_init>:
 8000330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000332:	bf00      	nop
 8000334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000336:	bc08      	pop	{r3}
 8000338:	469e      	mov	lr, r3
 800033a:	4770      	bx	lr

0800033c <_fini>:
 800033c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800033e:	bf00      	nop
 8000340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000342:	bc08      	pop	{r3}
 8000344:	469e      	mov	lr, r3
 8000346:	4770      	bx	lr
