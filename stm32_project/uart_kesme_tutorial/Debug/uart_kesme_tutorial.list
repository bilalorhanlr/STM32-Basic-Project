
uart_kesme_tutorial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000166c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080017fc  080017fc  000117fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001844  08001844  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08001844  08001844  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001844  08001844  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001844  08001844  00011844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001848  08001848  00011848  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800184c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020068  2**0
                  CONTENTS
 10 .bss          00000038  20000068  20000068  00020068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000a0  200000a0  00020068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001784  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000005e1  00000000  00000000  0002181c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000220  00000000  00000000  00021e00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001c8  00000000  00000000  00022020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f588  00000000  00000000  000221e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000281e  00000000  00000000  00041770  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bf78d  00000000  00000000  00043f8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0010371b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000bac  00000000  00000000  0010376c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080017e4 	.word	0x080017e4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080017e4 	.word	0x080017e4

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2uiz>:
 8000a0c:	004a      	lsls	r2, r1, #1
 8000a0e:	d211      	bcs.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a10:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a14:	d211      	bcs.n	8000a3a <__aeabi_d2uiz+0x2e>
 8000a16:	d50d      	bpl.n	8000a34 <__aeabi_d2uiz+0x28>
 8000a18:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a1c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a20:	d40e      	bmi.n	8000a40 <__aeabi_d2uiz+0x34>
 8000a22:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a26:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a2a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a2e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a32:	4770      	bx	lr
 8000a34:	f04f 0000 	mov.w	r0, #0
 8000a38:	4770      	bx	lr
 8000a3a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_d2uiz+0x3a>
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0000 	mov.w	r0, #0
 8000a4a:	4770      	bx	lr

08000a4c <main>:
void USART_WriteString(char* str);

// Mesafe ölçüm değişkeni
volatile uint32_t distance;

int main(void) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b08e      	sub	sp, #56	; 0x38
 8000a50:	af00      	add	r7, sp, #0
    SystemClock_Config();
 8000a52:	f000 f81d 	bl	8000a90 <SystemClock_Config>
    GPIO_Init();
 8000a56:	f000 f849 	bl	8000aec <GPIO_Init>
    USART2_Init();
 8000a5a:	f000 f883 	bl	8000b64 <USART2_Init>
    TIM3_Init();
 8000a5e:	f000 f89f 	bl	8000ba0 <TIM3_Init>

    while (1) {
        HCSR04_Read();
 8000a62:	f000 f8d1 	bl	8000c08 <HCSR04_Read>
        char buffer[50];
        sprintf(buffer, "Distance: %lu cm\r\n", distance);
 8000a66:	4b07      	ldr	r3, [pc, #28]	; (8000a84 <main+0x38>)
 8000a68:	681a      	ldr	r2, [r3, #0]
 8000a6a:	1d3b      	adds	r3, r7, #4
 8000a6c:	4906      	ldr	r1, [pc, #24]	; (8000a88 <main+0x3c>)
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f000 fa4a 	bl	8000f08 <siprintf>
        USART_WriteString(buffer);
 8000a74:	1d3b      	adds	r3, r7, #4
 8000a76:	4618      	mov	r0, r3
 8000a78:	f000 f956 	bl	8000d28 <USART_WriteString>
        delay_us(1000000); // 1 saniye bekle
 8000a7c:	4803      	ldr	r0, [pc, #12]	; (8000a8c <main+0x40>)
 8000a7e:	f000 f8ad 	bl	8000bdc <delay_us>
    while (1) {
 8000a82:	e7ee      	b.n	8000a62 <main+0x16>
 8000a84:	20000084 	.word	0x20000084
 8000a88:	080017fc 	.word	0x080017fc
 8000a8c:	000f4240 	.word	0x000f4240

08000a90 <SystemClock_Config>:
    }
}

void SystemClock_Config(void) {
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
    RCC->CR |= RCC_CR_HSION; // HSI osilatörünü etkinleştir
 8000a94:	4b14      	ldr	r3, [pc, #80]	; (8000ae8 <SystemClock_Config+0x58>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	4a13      	ldr	r2, [pc, #76]	; (8000ae8 <SystemClock_Config+0x58>)
 8000a9a:	f043 0301 	orr.w	r3, r3, #1
 8000a9e:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_HSIRDY)); // HSI hazır olana kadar bekle
 8000aa0:	bf00      	nop
 8000aa2:	4b11      	ldr	r3, [pc, #68]	; (8000ae8 <SystemClock_Config+0x58>)
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	f003 0302 	and.w	r3, r3, #2
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d0f9      	beq.n	8000aa2 <SystemClock_Config+0x12>
    RCC->CFGR |= RCC_CFGR_SW_HSI; // HSI'yı sistem saati olarak seç
 8000aae:	4b0e      	ldr	r3, [pc, #56]	; (8000ae8 <SystemClock_Config+0x58>)
 8000ab0:	4a0d      	ldr	r2, [pc, #52]	; (8000ae8 <SystemClock_Config+0x58>)
 8000ab2:	689b      	ldr	r3, [r3, #8]
 8000ab4:	6093      	str	r3, [r2, #8]
    while ((RCC->CFGR & RCC_CFGR_SWS) != RCC_CFGR_SWS_HSI); // HSI'nın sistem saati olduğunu doğrula
 8000ab6:	bf00      	nop
 8000ab8:	4b0b      	ldr	r3, [pc, #44]	; (8000ae8 <SystemClock_Config+0x58>)
 8000aba:	689b      	ldr	r3, [r3, #8]
 8000abc:	f003 030c 	and.w	r3, r3, #12
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d1f9      	bne.n	8000ab8 <SystemClock_Config+0x28>
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1; // AHB önbölücü: 1
 8000ac4:	4b08      	ldr	r3, [pc, #32]	; (8000ae8 <SystemClock_Config+0x58>)
 8000ac6:	4a08      	ldr	r2, [pc, #32]	; (8000ae8 <SystemClock_Config+0x58>)
 8000ac8:	689b      	ldr	r3, [r3, #8]
 8000aca:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV1; // APB1 önbölücü: 1
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <SystemClock_Config+0x58>)
 8000ace:	4a06      	ldr	r2, [pc, #24]	; (8000ae8 <SystemClock_Config+0x58>)
 8000ad0:	689b      	ldr	r3, [r3, #8]
 8000ad2:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV1; // APB2 önbölücü: 1
 8000ad4:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <SystemClock_Config+0x58>)
 8000ad6:	4a04      	ldr	r2, [pc, #16]	; (8000ae8 <SystemClock_Config+0x58>)
 8000ad8:	689b      	ldr	r3, [r3, #8]
 8000ada:	6093      	str	r3, [r2, #8]
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	40023800 	.word	0x40023800

08000aec <GPIO_Init>:

void GPIO_Init(void) {
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIODEN; // GPIOD saatini etkinleştir
 8000af0:	4b19      	ldr	r3, [pc, #100]	; (8000b58 <GPIO_Init+0x6c>)
 8000af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000af4:	4a18      	ldr	r2, [pc, #96]	; (8000b58 <GPIO_Init+0x6c>)
 8000af6:	f043 0308 	orr.w	r3, r3, #8
 8000afa:	6313      	str	r3, [r2, #48]	; 0x30
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN; // GPIOA saatini etkinleştir
 8000afc:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <GPIO_Init+0x6c>)
 8000afe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b00:	4a15      	ldr	r2, [pc, #84]	; (8000b58 <GPIO_Init+0x6c>)
 8000b02:	f043 0301 	orr.w	r3, r3, #1
 8000b06:	6313      	str	r3, [r2, #48]	; 0x30

    // PA2 ve PA3 pinlerini alternatif fonksiyon olarak ayarla (USART2 TX/RX)
    GPIOA->MODER &= ~((0x3 << (2 * 2)) | (0x3 << (3 * 2)));
 8000b08:	4b14      	ldr	r3, [pc, #80]	; (8000b5c <GPIO_Init+0x70>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a13      	ldr	r2, [pc, #76]	; (8000b5c <GPIO_Init+0x70>)
 8000b0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b12:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= (0x2 << (2 * 2)) | (0x2 << (3 * 2));
 8000b14:	4b11      	ldr	r3, [pc, #68]	; (8000b5c <GPIO_Init+0x70>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a10      	ldr	r2, [pc, #64]	; (8000b5c <GPIO_Init+0x70>)
 8000b1a:	f043 03a0 	orr.w	r3, r3, #160	; 0xa0
 8000b1e:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] |= (0x7 << (2 * 4)) | (0x7 << (3 * 4));
 8000b20:	4b0e      	ldr	r3, [pc, #56]	; (8000b5c <GPIO_Init+0x70>)
 8000b22:	6a1b      	ldr	r3, [r3, #32]
 8000b24:	4a0d      	ldr	r2, [pc, #52]	; (8000b5c <GPIO_Init+0x70>)
 8000b26:	f443 43ee 	orr.w	r3, r3, #30464	; 0x7700
 8000b2a:	6213      	str	r3, [r2, #32]

    // PD12 (Trig) ve PD13 (Echo) pinlerini çıkış ve giriş olarak ayarla
    GPIOD->MODER &= ~((0x3 << (12 * 2)) | (0x3 << (13 * 2)));
 8000b2c:	4b0c      	ldr	r3, [pc, #48]	; (8000b60 <GPIO_Init+0x74>)
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a0b      	ldr	r2, [pc, #44]	; (8000b60 <GPIO_Init+0x74>)
 8000b32:	f023 6370 	bic.w	r3, r3, #251658240	; 0xf000000
 8000b36:	6013      	str	r3, [r2, #0]
    GPIOD->MODER |= (0x1 << (12 * 2)); // PD12 çıkış (Trig)
 8000b38:	4b09      	ldr	r3, [pc, #36]	; (8000b60 <GPIO_Init+0x74>)
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a08      	ldr	r2, [pc, #32]	; (8000b60 <GPIO_Init+0x74>)
 8000b3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b42:	6013      	str	r3, [r2, #0]
    GPIOD->MODER |= (0x0 << (13 * 2)); // PD13 giriş (Echo)
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <GPIO_Init+0x74>)
 8000b46:	4a06      	ldr	r2, [pc, #24]	; (8000b60 <GPIO_Init+0x74>)
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	6013      	str	r3, [r2, #0]
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40020000 	.word	0x40020000
 8000b60:	40020c00 	.word	0x40020c00

08000b64 <USART2_Init>:

void USART2_Init(void) {
 8000b64:	b480      	push	{r7}
 8000b66:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_USART2EN; // USART2 saatini etkinleştir
 8000b68:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <USART2_Init+0x34>)
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6c:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <USART2_Init+0x34>)
 8000b6e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b72:	6413      	str	r3, [r2, #64]	; 0x40

    USART2->BRR = 0x0683; // Baudrate 9600 (16 MHz sistem saatinde)
 8000b74:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <USART2_Init+0x38>)
 8000b76:	f240 6283 	movw	r2, #1667	; 0x683
 8000b7a:	609a      	str	r2, [r3, #8]
    USART2->CR1 = USART_CR1_RE | USART_CR1_TE; // Receive ve Transmit enable
 8000b7c:	4b07      	ldr	r3, [pc, #28]	; (8000b9c <USART2_Init+0x38>)
 8000b7e:	220c      	movs	r2, #12
 8000b80:	60da      	str	r2, [r3, #12]
    USART2->CR1 |= USART_CR1_UE; // USART2 etkinleştir
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <USART2_Init+0x38>)
 8000b84:	68db      	ldr	r3, [r3, #12]
 8000b86:	4a05      	ldr	r2, [pc, #20]	; (8000b9c <USART2_Init+0x38>)
 8000b88:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000b8c:	60d3      	str	r3, [r2, #12]
}
 8000b8e:	bf00      	nop
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40004400 	.word	0x40004400

08000ba0 <TIM3_Init>:

void TIM3_Init(void) {
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
    RCC->APB1ENR |= RCC_APB1ENR_TIM3EN; // TIM3 saatini etkinleştir
 8000ba4:	4b0b      	ldr	r3, [pc, #44]	; (8000bd4 <TIM3_Init+0x34>)
 8000ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ba8:	4a0a      	ldr	r2, [pc, #40]	; (8000bd4 <TIM3_Init+0x34>)
 8000baa:	f043 0302 	orr.w	r3, r3, #2
 8000bae:	6413      	str	r3, [r2, #64]	; 0x40

    TIM3->PSC = 16 - 1; // Prescaler değeri (16MHz / 16 = 1MHz)
 8000bb0:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <TIM3_Init+0x38>)
 8000bb2:	220f      	movs	r2, #15
 8000bb4:	629a      	str	r2, [r3, #40]	; 0x28
    TIM3->ARR = 0xFFFF; // Auto-reload register (maksimum değer)
 8000bb6:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <TIM3_Init+0x38>)
 8000bb8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000bbc:	62da      	str	r2, [r3, #44]	; 0x2c
    TIM3->CR1 |= TIM_CR1_CEN; // Timer'ı etkinleştir
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <TIM3_Init+0x38>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a05      	ldr	r2, [pc, #20]	; (8000bd8 <TIM3_Init+0x38>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6013      	str	r3, [r2, #0]
}
 8000bca:	bf00      	nop
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd2:	4770      	bx	lr
 8000bd4:	40023800 	.word	0x40023800
 8000bd8:	40000400 	.word	0x40000400

08000bdc <delay_us>:

void delay_us(uint32_t us) {
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
    TIM3->CNT = 0; // Sayaç registerını sıfırla
 8000be4:	4b07      	ldr	r3, [pc, #28]	; (8000c04 <delay_us+0x28>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	625a      	str	r2, [r3, #36]	; 0x24
    while (TIM3->CNT < us); // Belirtilen mikrosaniye kadar bekle
 8000bea:	bf00      	nop
 8000bec:	4b05      	ldr	r3, [pc, #20]	; (8000c04 <delay_us+0x28>)
 8000bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000bf0:	687a      	ldr	r2, [r7, #4]
 8000bf2:	429a      	cmp	r2, r3
 8000bf4:	d8fa      	bhi.n	8000bec <delay_us+0x10>
}
 8000bf6:	bf00      	nop
 8000bf8:	bf00      	nop
 8000bfa:	370c      	adds	r7, #12
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	40000400 	.word	0x40000400

08000c08 <HCSR04_Read>:

void HCSR04_Read(void) {
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
    // Trig pini düşük yap
    GPIOD->ODR &= ~(1 << 12);
 8000c0e:	4b36      	ldr	r3, [pc, #216]	; (8000ce8 <HCSR04_Read+0xe0>)
 8000c10:	695b      	ldr	r3, [r3, #20]
 8000c12:	4a35      	ldr	r2, [pc, #212]	; (8000ce8 <HCSR04_Read+0xe0>)
 8000c14:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000c18:	6153      	str	r3, [r2, #20]
    delay_us(2);
 8000c1a:	2002      	movs	r0, #2
 8000c1c:	f7ff ffde 	bl	8000bdc <delay_us>

    // Trig pini yüksek yap (10us süreyle)
    GPIOD->ODR |= (1 << 12);
 8000c20:	4b31      	ldr	r3, [pc, #196]	; (8000ce8 <HCSR04_Read+0xe0>)
 8000c22:	695b      	ldr	r3, [r3, #20]
 8000c24:	4a30      	ldr	r2, [pc, #192]	; (8000ce8 <HCSR04_Read+0xe0>)
 8000c26:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000c2a:	6153      	str	r3, [r2, #20]
    delay_us(10);
 8000c2c:	200a      	movs	r0, #10
 8000c2e:	f7ff ffd5 	bl	8000bdc <delay_us>
    GPIOD->ODR &= ~(1 << 12);
 8000c32:	4b2d      	ldr	r3, [pc, #180]	; (8000ce8 <HCSR04_Read+0xe0>)
 8000c34:	695b      	ldr	r3, [r3, #20]
 8000c36:	4a2c      	ldr	r2, [pc, #176]	; (8000ce8 <HCSR04_Read+0xe0>)
 8000c38:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000c3c:	6153      	str	r3, [r2, #20]

    // Echo pini yüksek olana kadar bekle (maksimum bekleme süresi 1 saniye)
    uint32_t timeout = 1000000;
 8000c3e:	4b2b      	ldr	r3, [pc, #172]	; (8000cec <HCSR04_Read+0xe4>)
 8000c40:	607b      	str	r3, [r7, #4]
    while (!(GPIOD->IDR & (1 << 13)) && timeout > 0) {
 8000c42:	e002      	b.n	8000c4a <HCSR04_Read+0x42>
        timeout--;
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	3b01      	subs	r3, #1
 8000c48:	607b      	str	r3, [r7, #4]
    while (!(GPIOD->IDR & (1 << 13)) && timeout > 0) {
 8000c4a:	4b27      	ldr	r3, [pc, #156]	; (8000ce8 <HCSR04_Read+0xe0>)
 8000c4c:	691b      	ldr	r3, [r3, #16]
 8000c4e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d102      	bne.n	8000c5c <HCSR04_Read+0x54>
 8000c56:	687b      	ldr	r3, [r7, #4]
 8000c58:	2b00      	cmp	r3, #0
 8000c5a:	d1f3      	bne.n	8000c44 <HCSR04_Read+0x3c>
    }

    if (timeout == 0) {
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d103      	bne.n	8000c6a <HCSR04_Read+0x62>
        distance = 0; // Eğer timeout olduysa, mesafe 0 olarak ayarlanır
 8000c62:	4b23      	ldr	r3, [pc, #140]	; (8000cf0 <HCSR04_Read+0xe8>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	601a      	str	r2, [r3, #0]
        return;
 8000c68:	e036      	b.n	8000cd8 <HCSR04_Read+0xd0>
    }

    // Yükselen kenar tespit edildiğinde zamanlayıcıyı başlat
    TIM3->CNT = 0;
 8000c6a:	4b22      	ldr	r3, [pc, #136]	; (8000cf4 <HCSR04_Read+0xec>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	625a      	str	r2, [r3, #36]	; 0x24

    // Echo pini düşük olana kadar bekle (maksimum bekleme süresi 1 saniye)
    timeout = 1000000;
 8000c70:	4b1e      	ldr	r3, [pc, #120]	; (8000cec <HCSR04_Read+0xe4>)
 8000c72:	607b      	str	r3, [r7, #4]
    while ((GPIOD->IDR & (1 << 13)) && timeout > 0) {
 8000c74:	e002      	b.n	8000c7c <HCSR04_Read+0x74>
        timeout--;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	3b01      	subs	r3, #1
 8000c7a:	607b      	str	r3, [r7, #4]
    while ((GPIOD->IDR & (1 << 13)) && timeout > 0) {
 8000c7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ce8 <HCSR04_Read+0xe0>)
 8000c7e:	691b      	ldr	r3, [r3, #16]
 8000c80:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000c84:	2b00      	cmp	r3, #0
 8000c86:	d002      	beq.n	8000c8e <HCSR04_Read+0x86>
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d1f3      	bne.n	8000c76 <HCSR04_Read+0x6e>
    }

    if (timeout == 0) {
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d103      	bne.n	8000c9c <HCSR04_Read+0x94>
        distance = 0; // Eğer timeout olduysa, mesafe 0 olarak ayarlanır
 8000c94:	4b16      	ldr	r3, [pc, #88]	; (8000cf0 <HCSR04_Read+0xe8>)
 8000c96:	2200      	movs	r2, #0
 8000c98:	601a      	str	r2, [r3, #0]
        return;
 8000c9a:	e01d      	b.n	8000cd8 <HCSR04_Read+0xd0>
    }

    // Zamanlayıcıyı durdur ve süreyi al
    uint32_t timeElapsed = TIM3->CNT;
 8000c9c:	4b15      	ldr	r3, [pc, #84]	; (8000cf4 <HCSR04_Read+0xec>)
 8000c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ca0:	603b      	str	r3, [r7, #0]

    // Mesafeyi hesapla (cm cinsinden)
    distance = (timeElapsed * 0.0343) / 2;
 8000ca2:	6838      	ldr	r0, [r7, #0]
 8000ca4:	f7ff fc26 	bl	80004f4 <__aeabi_ui2d>
 8000ca8:	a30d      	add	r3, pc, #52	; (adr r3, 8000ce0 <HCSR04_Read+0xd8>)
 8000caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cae:	f7ff fc9b 	bl	80005e8 <__aeabi_dmul>
 8000cb2:	4602      	mov	r2, r0
 8000cb4:	460b      	mov	r3, r1
 8000cb6:	4610      	mov	r0, r2
 8000cb8:	4619      	mov	r1, r3
 8000cba:	f04f 0200 	mov.w	r2, #0
 8000cbe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000cc2:	f7ff fdbb 	bl	800083c <__aeabi_ddiv>
 8000cc6:	4602      	mov	r2, r0
 8000cc8:	460b      	mov	r3, r1
 8000cca:	4610      	mov	r0, r2
 8000ccc:	4619      	mov	r1, r3
 8000cce:	f7ff fe9d 	bl	8000a0c <__aeabi_d2uiz>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	4a06      	ldr	r2, [pc, #24]	; (8000cf0 <HCSR04_Read+0xe8>)
 8000cd6:	6013      	str	r3, [r2, #0]
}
 8000cd8:	3708      	adds	r7, #8
 8000cda:	46bd      	mov	sp, r7
 8000cdc:	bd80      	pop	{r7, pc}
 8000cde:	bf00      	nop
 8000ce0:	04816f00 	.word	0x04816f00
 8000ce4:	3fa18fc5 	.word	0x3fa18fc5
 8000ce8:	40020c00 	.word	0x40020c00
 8000cec:	000f4240 	.word	0x000f4240
 8000cf0:	20000084 	.word	0x20000084
 8000cf4:	40000400 	.word	0x40000400

08000cf8 <USART_Write>:

void USART_Write(char ch) {
 8000cf8:	b480      	push	{r7}
 8000cfa:	b083      	sub	sp, #12
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	4603      	mov	r3, r0
 8000d00:	71fb      	strb	r3, [r7, #7]
    while (!(USART2->SR & USART_SR_TXE)); // Gönderim tamponu boş olana kadar bekle
 8000d02:	bf00      	nop
 8000d04:	4b07      	ldr	r3, [pc, #28]	; (8000d24 <USART_Write+0x2c>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d0f9      	beq.n	8000d04 <USART_Write+0xc>
    USART2->DR = ch;
 8000d10:	4a04      	ldr	r2, [pc, #16]	; (8000d24 <USART_Write+0x2c>)
 8000d12:	79fb      	ldrb	r3, [r7, #7]
 8000d14:	6053      	str	r3, [r2, #4]
}
 8000d16:	bf00      	nop
 8000d18:	370c      	adds	r7, #12
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	40004400 	.word	0x40004400

08000d28 <USART_WriteString>:

void USART_WriteString(char* str) {
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000d30:	e006      	b.n	8000d40 <USART_WriteString+0x18>
        USART_Write(*str++);
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	1c5a      	adds	r2, r3, #1
 8000d36:	607a      	str	r2, [r7, #4]
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	f7ff ffdc 	bl	8000cf8 <USART_Write>
    while (*str) {
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d1f4      	bne.n	8000d32 <USART_WriteString+0xa>
    }
}
 8000d48:	bf00      	nop
 8000d4a:	bf00      	nop
 8000d4c:	3708      	adds	r7, #8
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	bd80      	pop	{r7, pc}

08000d52 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d52:	b480      	push	{r7}
 8000d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d56:	e7fe      	b.n	8000d56 <NMI_Handler+0x4>

08000d58 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d5c:	e7fe      	b.n	8000d5c <HardFault_Handler+0x4>

08000d5e <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d5e:	b480      	push	{r7}
 8000d60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d62:	e7fe      	b.n	8000d62 <MemManage_Handler+0x4>

08000d64 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d68:	e7fe      	b.n	8000d68 <BusFault_Handler+0x4>

08000d6a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d6a:	b480      	push	{r7}
 8000d6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d6e:	e7fe      	b.n	8000d6e <UsageFault_Handler+0x4>

08000d70 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d74:	bf00      	nop
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr

08000d7e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d9a:	b580      	push	{r7, lr}
 8000d9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d9e:	f000 f875 	bl	8000e8c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000da2:	bf00      	nop
 8000da4:	bd80      	pop	{r7, pc}
	...

08000da8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000db0:	4a14      	ldr	r2, [pc, #80]	; (8000e04 <_sbrk+0x5c>)
 8000db2:	4b15      	ldr	r3, [pc, #84]	; (8000e08 <_sbrk+0x60>)
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000db8:	697b      	ldr	r3, [r7, #20]
 8000dba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000dbc:	4b13      	ldr	r3, [pc, #76]	; (8000e0c <_sbrk+0x64>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d102      	bne.n	8000dca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000dc4:	4b11      	ldr	r3, [pc, #68]	; (8000e0c <_sbrk+0x64>)
 8000dc6:	4a12      	ldr	r2, [pc, #72]	; (8000e10 <_sbrk+0x68>)
 8000dc8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000dca:	4b10      	ldr	r3, [pc, #64]	; (8000e0c <_sbrk+0x64>)
 8000dcc:	681a      	ldr	r2, [r3, #0]
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	4413      	add	r3, r2
 8000dd2:	693a      	ldr	r2, [r7, #16]
 8000dd4:	429a      	cmp	r2, r3
 8000dd6:	d207      	bcs.n	8000de8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000dd8:	f000 f86c 	bl	8000eb4 <__errno>
 8000ddc:	4603      	mov	r3, r0
 8000dde:	220c      	movs	r2, #12
 8000de0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000de2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000de6:	e009      	b.n	8000dfc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000de8:	4b08      	ldr	r3, [pc, #32]	; (8000e0c <_sbrk+0x64>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dee:	4b07      	ldr	r3, [pc, #28]	; (8000e0c <_sbrk+0x64>)
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4413      	add	r3, r2
 8000df6:	4a05      	ldr	r2, [pc, #20]	; (8000e0c <_sbrk+0x64>)
 8000df8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dfa:	68fb      	ldr	r3, [r7, #12]
}
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	3718      	adds	r7, #24
 8000e00:	46bd      	mov	sp, r7
 8000e02:	bd80      	pop	{r7, pc}
 8000e04:	20020000 	.word	0x20020000
 8000e08:	00000400 	.word	0x00000400
 8000e0c:	20000088 	.word	0x20000088
 8000e10:	200000a0 	.word	0x200000a0

08000e14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000e18:	4b06      	ldr	r3, [pc, #24]	; (8000e34 <SystemInit+0x20>)
 8000e1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e1e:	4a05      	ldr	r2, [pc, #20]	; (8000e34 <SystemInit+0x20>)
 8000e20:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000e24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000e28:	bf00      	nop
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e30:	4770      	bx	lr
 8000e32:	bf00      	nop
 8000e34:	e000ed00 	.word	0xe000ed00

08000e38 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000e38:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e70 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e3c:	480d      	ldr	r0, [pc, #52]	; (8000e74 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000e3e:	490e      	ldr	r1, [pc, #56]	; (8000e78 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000e40:	4a0e      	ldr	r2, [pc, #56]	; (8000e7c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000e42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e44:	e002      	b.n	8000e4c <LoopCopyDataInit>

08000e46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e4a:	3304      	adds	r3, #4

08000e4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e50:	d3f9      	bcc.n	8000e46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e52:	4a0b      	ldr	r2, [pc, #44]	; (8000e80 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e54:	4c0b      	ldr	r4, [pc, #44]	; (8000e84 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e56:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e58:	e001      	b.n	8000e5e <LoopFillZerobss>

08000e5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e5c:	3204      	adds	r2, #4

08000e5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e60:	d3fb      	bcc.n	8000e5a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e62:	f7ff ffd7 	bl	8000e14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e66:	f000 f82b 	bl	8000ec0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e6a:	f7ff fdef 	bl	8000a4c <main>
  bx  lr    
 8000e6e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000e70:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000e74:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e78:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e7c:	0800184c 	.word	0x0800184c
  ldr r2, =_sbss
 8000e80:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e84:	200000a0 	.word	0x200000a0

08000e88 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e88:	e7fe      	b.n	8000e88 <ADC_IRQHandler>
	...

08000e8c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e90:	4b06      	ldr	r3, [pc, #24]	; (8000eac <HAL_IncTick+0x20>)
 8000e92:	781b      	ldrb	r3, [r3, #0]
 8000e94:	461a      	mov	r2, r3
 8000e96:	4b06      	ldr	r3, [pc, #24]	; (8000eb0 <HAL_IncTick+0x24>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	4413      	add	r3, r2
 8000e9c:	4a04      	ldr	r2, [pc, #16]	; (8000eb0 <HAL_IncTick+0x24>)
 8000e9e:	6013      	str	r3, [r2, #0]
}
 8000ea0:	bf00      	nop
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop
 8000eac:	20000000 	.word	0x20000000
 8000eb0:	2000008c 	.word	0x2000008c

08000eb4 <__errno>:
 8000eb4:	4b01      	ldr	r3, [pc, #4]	; (8000ebc <__errno+0x8>)
 8000eb6:	6818      	ldr	r0, [r3, #0]
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	20000004 	.word	0x20000004

08000ec0 <__libc_init_array>:
 8000ec0:	b570      	push	{r4, r5, r6, lr}
 8000ec2:	4d0d      	ldr	r5, [pc, #52]	; (8000ef8 <__libc_init_array+0x38>)
 8000ec4:	4c0d      	ldr	r4, [pc, #52]	; (8000efc <__libc_init_array+0x3c>)
 8000ec6:	1b64      	subs	r4, r4, r5
 8000ec8:	10a4      	asrs	r4, r4, #2
 8000eca:	2600      	movs	r6, #0
 8000ecc:	42a6      	cmp	r6, r4
 8000ece:	d109      	bne.n	8000ee4 <__libc_init_array+0x24>
 8000ed0:	4d0b      	ldr	r5, [pc, #44]	; (8000f00 <__libc_init_array+0x40>)
 8000ed2:	4c0c      	ldr	r4, [pc, #48]	; (8000f04 <__libc_init_array+0x44>)
 8000ed4:	f000 fc86 	bl	80017e4 <_init>
 8000ed8:	1b64      	subs	r4, r4, r5
 8000eda:	10a4      	asrs	r4, r4, #2
 8000edc:	2600      	movs	r6, #0
 8000ede:	42a6      	cmp	r6, r4
 8000ee0:	d105      	bne.n	8000eee <__libc_init_array+0x2e>
 8000ee2:	bd70      	pop	{r4, r5, r6, pc}
 8000ee4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ee8:	4798      	blx	r3
 8000eea:	3601      	adds	r6, #1
 8000eec:	e7ee      	b.n	8000ecc <__libc_init_array+0xc>
 8000eee:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ef2:	4798      	blx	r3
 8000ef4:	3601      	adds	r6, #1
 8000ef6:	e7f2      	b.n	8000ede <__libc_init_array+0x1e>
 8000ef8:	08001844 	.word	0x08001844
 8000efc:	08001844 	.word	0x08001844
 8000f00:	08001844 	.word	0x08001844
 8000f04:	08001848 	.word	0x08001848

08000f08 <siprintf>:
 8000f08:	b40e      	push	{r1, r2, r3}
 8000f0a:	b500      	push	{lr}
 8000f0c:	b09c      	sub	sp, #112	; 0x70
 8000f0e:	ab1d      	add	r3, sp, #116	; 0x74
 8000f10:	9002      	str	r0, [sp, #8]
 8000f12:	9006      	str	r0, [sp, #24]
 8000f14:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8000f18:	4809      	ldr	r0, [pc, #36]	; (8000f40 <siprintf+0x38>)
 8000f1a:	9107      	str	r1, [sp, #28]
 8000f1c:	9104      	str	r1, [sp, #16]
 8000f1e:	4909      	ldr	r1, [pc, #36]	; (8000f44 <siprintf+0x3c>)
 8000f20:	f853 2b04 	ldr.w	r2, [r3], #4
 8000f24:	9105      	str	r1, [sp, #20]
 8000f26:	6800      	ldr	r0, [r0, #0]
 8000f28:	9301      	str	r3, [sp, #4]
 8000f2a:	a902      	add	r1, sp, #8
 8000f2c:	f000 f868 	bl	8001000 <_svfiprintf_r>
 8000f30:	9b02      	ldr	r3, [sp, #8]
 8000f32:	2200      	movs	r2, #0
 8000f34:	701a      	strb	r2, [r3, #0]
 8000f36:	b01c      	add	sp, #112	; 0x70
 8000f38:	f85d eb04 	ldr.w	lr, [sp], #4
 8000f3c:	b003      	add	sp, #12
 8000f3e:	4770      	bx	lr
 8000f40:	20000004 	.word	0x20000004
 8000f44:	ffff0208 	.word	0xffff0208

08000f48 <__ssputs_r>:
 8000f48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000f4c:	688e      	ldr	r6, [r1, #8]
 8000f4e:	429e      	cmp	r6, r3
 8000f50:	4682      	mov	sl, r0
 8000f52:	460c      	mov	r4, r1
 8000f54:	4690      	mov	r8, r2
 8000f56:	461f      	mov	r7, r3
 8000f58:	d838      	bhi.n	8000fcc <__ssputs_r+0x84>
 8000f5a:	898a      	ldrh	r2, [r1, #12]
 8000f5c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8000f60:	d032      	beq.n	8000fc8 <__ssputs_r+0x80>
 8000f62:	6825      	ldr	r5, [r4, #0]
 8000f64:	6909      	ldr	r1, [r1, #16]
 8000f66:	eba5 0901 	sub.w	r9, r5, r1
 8000f6a:	6965      	ldr	r5, [r4, #20]
 8000f6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8000f70:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8000f74:	3301      	adds	r3, #1
 8000f76:	444b      	add	r3, r9
 8000f78:	106d      	asrs	r5, r5, #1
 8000f7a:	429d      	cmp	r5, r3
 8000f7c:	bf38      	it	cc
 8000f7e:	461d      	movcc	r5, r3
 8000f80:	0553      	lsls	r3, r2, #21
 8000f82:	d531      	bpl.n	8000fe8 <__ssputs_r+0xa0>
 8000f84:	4629      	mov	r1, r5
 8000f86:	f000 fb63 	bl	8001650 <_malloc_r>
 8000f8a:	4606      	mov	r6, r0
 8000f8c:	b950      	cbnz	r0, 8000fa4 <__ssputs_r+0x5c>
 8000f8e:	230c      	movs	r3, #12
 8000f90:	f8ca 3000 	str.w	r3, [sl]
 8000f94:	89a3      	ldrh	r3, [r4, #12]
 8000f96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f9a:	81a3      	strh	r3, [r4, #12]
 8000f9c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000fa0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa4:	6921      	ldr	r1, [r4, #16]
 8000fa6:	464a      	mov	r2, r9
 8000fa8:	f000 fabe 	bl	8001528 <memcpy>
 8000fac:	89a3      	ldrh	r3, [r4, #12]
 8000fae:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8000fb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fb6:	81a3      	strh	r3, [r4, #12]
 8000fb8:	6126      	str	r6, [r4, #16]
 8000fba:	6165      	str	r5, [r4, #20]
 8000fbc:	444e      	add	r6, r9
 8000fbe:	eba5 0509 	sub.w	r5, r5, r9
 8000fc2:	6026      	str	r6, [r4, #0]
 8000fc4:	60a5      	str	r5, [r4, #8]
 8000fc6:	463e      	mov	r6, r7
 8000fc8:	42be      	cmp	r6, r7
 8000fca:	d900      	bls.n	8000fce <__ssputs_r+0x86>
 8000fcc:	463e      	mov	r6, r7
 8000fce:	6820      	ldr	r0, [r4, #0]
 8000fd0:	4632      	mov	r2, r6
 8000fd2:	4641      	mov	r1, r8
 8000fd4:	f000 fab6 	bl	8001544 <memmove>
 8000fd8:	68a3      	ldr	r3, [r4, #8]
 8000fda:	1b9b      	subs	r3, r3, r6
 8000fdc:	60a3      	str	r3, [r4, #8]
 8000fde:	6823      	ldr	r3, [r4, #0]
 8000fe0:	4433      	add	r3, r6
 8000fe2:	6023      	str	r3, [r4, #0]
 8000fe4:	2000      	movs	r0, #0
 8000fe6:	e7db      	b.n	8000fa0 <__ssputs_r+0x58>
 8000fe8:	462a      	mov	r2, r5
 8000fea:	f000 fba5 	bl	8001738 <_realloc_r>
 8000fee:	4606      	mov	r6, r0
 8000ff0:	2800      	cmp	r0, #0
 8000ff2:	d1e1      	bne.n	8000fb8 <__ssputs_r+0x70>
 8000ff4:	6921      	ldr	r1, [r4, #16]
 8000ff6:	4650      	mov	r0, sl
 8000ff8:	f000 fabe 	bl	8001578 <_free_r>
 8000ffc:	e7c7      	b.n	8000f8e <__ssputs_r+0x46>
	...

08001000 <_svfiprintf_r>:
 8001000:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001004:	4698      	mov	r8, r3
 8001006:	898b      	ldrh	r3, [r1, #12]
 8001008:	061b      	lsls	r3, r3, #24
 800100a:	b09d      	sub	sp, #116	; 0x74
 800100c:	4607      	mov	r7, r0
 800100e:	460d      	mov	r5, r1
 8001010:	4614      	mov	r4, r2
 8001012:	d50e      	bpl.n	8001032 <_svfiprintf_r+0x32>
 8001014:	690b      	ldr	r3, [r1, #16]
 8001016:	b963      	cbnz	r3, 8001032 <_svfiprintf_r+0x32>
 8001018:	2140      	movs	r1, #64	; 0x40
 800101a:	f000 fb19 	bl	8001650 <_malloc_r>
 800101e:	6028      	str	r0, [r5, #0]
 8001020:	6128      	str	r0, [r5, #16]
 8001022:	b920      	cbnz	r0, 800102e <_svfiprintf_r+0x2e>
 8001024:	230c      	movs	r3, #12
 8001026:	603b      	str	r3, [r7, #0]
 8001028:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800102c:	e0d1      	b.n	80011d2 <_svfiprintf_r+0x1d2>
 800102e:	2340      	movs	r3, #64	; 0x40
 8001030:	616b      	str	r3, [r5, #20]
 8001032:	2300      	movs	r3, #0
 8001034:	9309      	str	r3, [sp, #36]	; 0x24
 8001036:	2320      	movs	r3, #32
 8001038:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800103c:	f8cd 800c 	str.w	r8, [sp, #12]
 8001040:	2330      	movs	r3, #48	; 0x30
 8001042:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80011ec <_svfiprintf_r+0x1ec>
 8001046:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800104a:	f04f 0901 	mov.w	r9, #1
 800104e:	4623      	mov	r3, r4
 8001050:	469a      	mov	sl, r3
 8001052:	f813 2b01 	ldrb.w	r2, [r3], #1
 8001056:	b10a      	cbz	r2, 800105c <_svfiprintf_r+0x5c>
 8001058:	2a25      	cmp	r2, #37	; 0x25
 800105a:	d1f9      	bne.n	8001050 <_svfiprintf_r+0x50>
 800105c:	ebba 0b04 	subs.w	fp, sl, r4
 8001060:	d00b      	beq.n	800107a <_svfiprintf_r+0x7a>
 8001062:	465b      	mov	r3, fp
 8001064:	4622      	mov	r2, r4
 8001066:	4629      	mov	r1, r5
 8001068:	4638      	mov	r0, r7
 800106a:	f7ff ff6d 	bl	8000f48 <__ssputs_r>
 800106e:	3001      	adds	r0, #1
 8001070:	f000 80aa 	beq.w	80011c8 <_svfiprintf_r+0x1c8>
 8001074:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001076:	445a      	add	r2, fp
 8001078:	9209      	str	r2, [sp, #36]	; 0x24
 800107a:	f89a 3000 	ldrb.w	r3, [sl]
 800107e:	2b00      	cmp	r3, #0
 8001080:	f000 80a2 	beq.w	80011c8 <_svfiprintf_r+0x1c8>
 8001084:	2300      	movs	r3, #0
 8001086:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800108a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800108e:	f10a 0a01 	add.w	sl, sl, #1
 8001092:	9304      	str	r3, [sp, #16]
 8001094:	9307      	str	r3, [sp, #28]
 8001096:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800109a:	931a      	str	r3, [sp, #104]	; 0x68
 800109c:	4654      	mov	r4, sl
 800109e:	2205      	movs	r2, #5
 80010a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80010a4:	4851      	ldr	r0, [pc, #324]	; (80011ec <_svfiprintf_r+0x1ec>)
 80010a6:	f7ff f893 	bl	80001d0 <memchr>
 80010aa:	9a04      	ldr	r2, [sp, #16]
 80010ac:	b9d8      	cbnz	r0, 80010e6 <_svfiprintf_r+0xe6>
 80010ae:	06d0      	lsls	r0, r2, #27
 80010b0:	bf44      	itt	mi
 80010b2:	2320      	movmi	r3, #32
 80010b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80010b8:	0711      	lsls	r1, r2, #28
 80010ba:	bf44      	itt	mi
 80010bc:	232b      	movmi	r3, #43	; 0x2b
 80010be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80010c2:	f89a 3000 	ldrb.w	r3, [sl]
 80010c6:	2b2a      	cmp	r3, #42	; 0x2a
 80010c8:	d015      	beq.n	80010f6 <_svfiprintf_r+0xf6>
 80010ca:	9a07      	ldr	r2, [sp, #28]
 80010cc:	4654      	mov	r4, sl
 80010ce:	2000      	movs	r0, #0
 80010d0:	f04f 0c0a 	mov.w	ip, #10
 80010d4:	4621      	mov	r1, r4
 80010d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80010da:	3b30      	subs	r3, #48	; 0x30
 80010dc:	2b09      	cmp	r3, #9
 80010de:	d94e      	bls.n	800117e <_svfiprintf_r+0x17e>
 80010e0:	b1b0      	cbz	r0, 8001110 <_svfiprintf_r+0x110>
 80010e2:	9207      	str	r2, [sp, #28]
 80010e4:	e014      	b.n	8001110 <_svfiprintf_r+0x110>
 80010e6:	eba0 0308 	sub.w	r3, r0, r8
 80010ea:	fa09 f303 	lsl.w	r3, r9, r3
 80010ee:	4313      	orrs	r3, r2
 80010f0:	9304      	str	r3, [sp, #16]
 80010f2:	46a2      	mov	sl, r4
 80010f4:	e7d2      	b.n	800109c <_svfiprintf_r+0x9c>
 80010f6:	9b03      	ldr	r3, [sp, #12]
 80010f8:	1d19      	adds	r1, r3, #4
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	9103      	str	r1, [sp, #12]
 80010fe:	2b00      	cmp	r3, #0
 8001100:	bfbb      	ittet	lt
 8001102:	425b      	neglt	r3, r3
 8001104:	f042 0202 	orrlt.w	r2, r2, #2
 8001108:	9307      	strge	r3, [sp, #28]
 800110a:	9307      	strlt	r3, [sp, #28]
 800110c:	bfb8      	it	lt
 800110e:	9204      	strlt	r2, [sp, #16]
 8001110:	7823      	ldrb	r3, [r4, #0]
 8001112:	2b2e      	cmp	r3, #46	; 0x2e
 8001114:	d10c      	bne.n	8001130 <_svfiprintf_r+0x130>
 8001116:	7863      	ldrb	r3, [r4, #1]
 8001118:	2b2a      	cmp	r3, #42	; 0x2a
 800111a:	d135      	bne.n	8001188 <_svfiprintf_r+0x188>
 800111c:	9b03      	ldr	r3, [sp, #12]
 800111e:	1d1a      	adds	r2, r3, #4
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	9203      	str	r2, [sp, #12]
 8001124:	2b00      	cmp	r3, #0
 8001126:	bfb8      	it	lt
 8001128:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800112c:	3402      	adds	r4, #2
 800112e:	9305      	str	r3, [sp, #20]
 8001130:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80011fc <_svfiprintf_r+0x1fc>
 8001134:	7821      	ldrb	r1, [r4, #0]
 8001136:	2203      	movs	r2, #3
 8001138:	4650      	mov	r0, sl
 800113a:	f7ff f849 	bl	80001d0 <memchr>
 800113e:	b140      	cbz	r0, 8001152 <_svfiprintf_r+0x152>
 8001140:	2340      	movs	r3, #64	; 0x40
 8001142:	eba0 000a 	sub.w	r0, r0, sl
 8001146:	fa03 f000 	lsl.w	r0, r3, r0
 800114a:	9b04      	ldr	r3, [sp, #16]
 800114c:	4303      	orrs	r3, r0
 800114e:	3401      	adds	r4, #1
 8001150:	9304      	str	r3, [sp, #16]
 8001152:	f814 1b01 	ldrb.w	r1, [r4], #1
 8001156:	4826      	ldr	r0, [pc, #152]	; (80011f0 <_svfiprintf_r+0x1f0>)
 8001158:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800115c:	2206      	movs	r2, #6
 800115e:	f7ff f837 	bl	80001d0 <memchr>
 8001162:	2800      	cmp	r0, #0
 8001164:	d038      	beq.n	80011d8 <_svfiprintf_r+0x1d8>
 8001166:	4b23      	ldr	r3, [pc, #140]	; (80011f4 <_svfiprintf_r+0x1f4>)
 8001168:	bb1b      	cbnz	r3, 80011b2 <_svfiprintf_r+0x1b2>
 800116a:	9b03      	ldr	r3, [sp, #12]
 800116c:	3307      	adds	r3, #7
 800116e:	f023 0307 	bic.w	r3, r3, #7
 8001172:	3308      	adds	r3, #8
 8001174:	9303      	str	r3, [sp, #12]
 8001176:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001178:	4433      	add	r3, r6
 800117a:	9309      	str	r3, [sp, #36]	; 0x24
 800117c:	e767      	b.n	800104e <_svfiprintf_r+0x4e>
 800117e:	fb0c 3202 	mla	r2, ip, r2, r3
 8001182:	460c      	mov	r4, r1
 8001184:	2001      	movs	r0, #1
 8001186:	e7a5      	b.n	80010d4 <_svfiprintf_r+0xd4>
 8001188:	2300      	movs	r3, #0
 800118a:	3401      	adds	r4, #1
 800118c:	9305      	str	r3, [sp, #20]
 800118e:	4619      	mov	r1, r3
 8001190:	f04f 0c0a 	mov.w	ip, #10
 8001194:	4620      	mov	r0, r4
 8001196:	f810 2b01 	ldrb.w	r2, [r0], #1
 800119a:	3a30      	subs	r2, #48	; 0x30
 800119c:	2a09      	cmp	r2, #9
 800119e:	d903      	bls.n	80011a8 <_svfiprintf_r+0x1a8>
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d0c5      	beq.n	8001130 <_svfiprintf_r+0x130>
 80011a4:	9105      	str	r1, [sp, #20]
 80011a6:	e7c3      	b.n	8001130 <_svfiprintf_r+0x130>
 80011a8:	fb0c 2101 	mla	r1, ip, r1, r2
 80011ac:	4604      	mov	r4, r0
 80011ae:	2301      	movs	r3, #1
 80011b0:	e7f0      	b.n	8001194 <_svfiprintf_r+0x194>
 80011b2:	ab03      	add	r3, sp, #12
 80011b4:	9300      	str	r3, [sp, #0]
 80011b6:	462a      	mov	r2, r5
 80011b8:	4b0f      	ldr	r3, [pc, #60]	; (80011f8 <_svfiprintf_r+0x1f8>)
 80011ba:	a904      	add	r1, sp, #16
 80011bc:	4638      	mov	r0, r7
 80011be:	f3af 8000 	nop.w
 80011c2:	1c42      	adds	r2, r0, #1
 80011c4:	4606      	mov	r6, r0
 80011c6:	d1d6      	bne.n	8001176 <_svfiprintf_r+0x176>
 80011c8:	89ab      	ldrh	r3, [r5, #12]
 80011ca:	065b      	lsls	r3, r3, #25
 80011cc:	f53f af2c 	bmi.w	8001028 <_svfiprintf_r+0x28>
 80011d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80011d2:	b01d      	add	sp, #116	; 0x74
 80011d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011d8:	ab03      	add	r3, sp, #12
 80011da:	9300      	str	r3, [sp, #0]
 80011dc:	462a      	mov	r2, r5
 80011de:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <_svfiprintf_r+0x1f8>)
 80011e0:	a904      	add	r1, sp, #16
 80011e2:	4638      	mov	r0, r7
 80011e4:	f000 f87a 	bl	80012dc <_printf_i>
 80011e8:	e7eb      	b.n	80011c2 <_svfiprintf_r+0x1c2>
 80011ea:	bf00      	nop
 80011ec:	0800180f 	.word	0x0800180f
 80011f0:	08001819 	.word	0x08001819
 80011f4:	00000000 	.word	0x00000000
 80011f8:	08000f49 	.word	0x08000f49
 80011fc:	08001815 	.word	0x08001815

08001200 <_printf_common>:
 8001200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001204:	4616      	mov	r6, r2
 8001206:	4699      	mov	r9, r3
 8001208:	688a      	ldr	r2, [r1, #8]
 800120a:	690b      	ldr	r3, [r1, #16]
 800120c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001210:	4293      	cmp	r3, r2
 8001212:	bfb8      	it	lt
 8001214:	4613      	movlt	r3, r2
 8001216:	6033      	str	r3, [r6, #0]
 8001218:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800121c:	4607      	mov	r7, r0
 800121e:	460c      	mov	r4, r1
 8001220:	b10a      	cbz	r2, 8001226 <_printf_common+0x26>
 8001222:	3301      	adds	r3, #1
 8001224:	6033      	str	r3, [r6, #0]
 8001226:	6823      	ldr	r3, [r4, #0]
 8001228:	0699      	lsls	r1, r3, #26
 800122a:	bf42      	ittt	mi
 800122c:	6833      	ldrmi	r3, [r6, #0]
 800122e:	3302      	addmi	r3, #2
 8001230:	6033      	strmi	r3, [r6, #0]
 8001232:	6825      	ldr	r5, [r4, #0]
 8001234:	f015 0506 	ands.w	r5, r5, #6
 8001238:	d106      	bne.n	8001248 <_printf_common+0x48>
 800123a:	f104 0a19 	add.w	sl, r4, #25
 800123e:	68e3      	ldr	r3, [r4, #12]
 8001240:	6832      	ldr	r2, [r6, #0]
 8001242:	1a9b      	subs	r3, r3, r2
 8001244:	42ab      	cmp	r3, r5
 8001246:	dc26      	bgt.n	8001296 <_printf_common+0x96>
 8001248:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800124c:	1e13      	subs	r3, r2, #0
 800124e:	6822      	ldr	r2, [r4, #0]
 8001250:	bf18      	it	ne
 8001252:	2301      	movne	r3, #1
 8001254:	0692      	lsls	r2, r2, #26
 8001256:	d42b      	bmi.n	80012b0 <_printf_common+0xb0>
 8001258:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800125c:	4649      	mov	r1, r9
 800125e:	4638      	mov	r0, r7
 8001260:	47c0      	blx	r8
 8001262:	3001      	adds	r0, #1
 8001264:	d01e      	beq.n	80012a4 <_printf_common+0xa4>
 8001266:	6823      	ldr	r3, [r4, #0]
 8001268:	68e5      	ldr	r5, [r4, #12]
 800126a:	6832      	ldr	r2, [r6, #0]
 800126c:	f003 0306 	and.w	r3, r3, #6
 8001270:	2b04      	cmp	r3, #4
 8001272:	bf08      	it	eq
 8001274:	1aad      	subeq	r5, r5, r2
 8001276:	68a3      	ldr	r3, [r4, #8]
 8001278:	6922      	ldr	r2, [r4, #16]
 800127a:	bf0c      	ite	eq
 800127c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001280:	2500      	movne	r5, #0
 8001282:	4293      	cmp	r3, r2
 8001284:	bfc4      	itt	gt
 8001286:	1a9b      	subgt	r3, r3, r2
 8001288:	18ed      	addgt	r5, r5, r3
 800128a:	2600      	movs	r6, #0
 800128c:	341a      	adds	r4, #26
 800128e:	42b5      	cmp	r5, r6
 8001290:	d11a      	bne.n	80012c8 <_printf_common+0xc8>
 8001292:	2000      	movs	r0, #0
 8001294:	e008      	b.n	80012a8 <_printf_common+0xa8>
 8001296:	2301      	movs	r3, #1
 8001298:	4652      	mov	r2, sl
 800129a:	4649      	mov	r1, r9
 800129c:	4638      	mov	r0, r7
 800129e:	47c0      	blx	r8
 80012a0:	3001      	adds	r0, #1
 80012a2:	d103      	bne.n	80012ac <_printf_common+0xac>
 80012a4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80012a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012ac:	3501      	adds	r5, #1
 80012ae:	e7c6      	b.n	800123e <_printf_common+0x3e>
 80012b0:	18e1      	adds	r1, r4, r3
 80012b2:	1c5a      	adds	r2, r3, #1
 80012b4:	2030      	movs	r0, #48	; 0x30
 80012b6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80012ba:	4422      	add	r2, r4
 80012bc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80012c0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80012c4:	3302      	adds	r3, #2
 80012c6:	e7c7      	b.n	8001258 <_printf_common+0x58>
 80012c8:	2301      	movs	r3, #1
 80012ca:	4622      	mov	r2, r4
 80012cc:	4649      	mov	r1, r9
 80012ce:	4638      	mov	r0, r7
 80012d0:	47c0      	blx	r8
 80012d2:	3001      	adds	r0, #1
 80012d4:	d0e6      	beq.n	80012a4 <_printf_common+0xa4>
 80012d6:	3601      	adds	r6, #1
 80012d8:	e7d9      	b.n	800128e <_printf_common+0x8e>
	...

080012dc <_printf_i>:
 80012dc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80012e0:	7e0f      	ldrb	r7, [r1, #24]
 80012e2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80012e4:	2f78      	cmp	r7, #120	; 0x78
 80012e6:	4691      	mov	r9, r2
 80012e8:	4680      	mov	r8, r0
 80012ea:	460c      	mov	r4, r1
 80012ec:	469a      	mov	sl, r3
 80012ee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80012f2:	d807      	bhi.n	8001304 <_printf_i+0x28>
 80012f4:	2f62      	cmp	r7, #98	; 0x62
 80012f6:	d80a      	bhi.n	800130e <_printf_i+0x32>
 80012f8:	2f00      	cmp	r7, #0
 80012fa:	f000 80d8 	beq.w	80014ae <_printf_i+0x1d2>
 80012fe:	2f58      	cmp	r7, #88	; 0x58
 8001300:	f000 80a3 	beq.w	800144a <_printf_i+0x16e>
 8001304:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001308:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800130c:	e03a      	b.n	8001384 <_printf_i+0xa8>
 800130e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8001312:	2b15      	cmp	r3, #21
 8001314:	d8f6      	bhi.n	8001304 <_printf_i+0x28>
 8001316:	a101      	add	r1, pc, #4	; (adr r1, 800131c <_printf_i+0x40>)
 8001318:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800131c:	08001375 	.word	0x08001375
 8001320:	08001389 	.word	0x08001389
 8001324:	08001305 	.word	0x08001305
 8001328:	08001305 	.word	0x08001305
 800132c:	08001305 	.word	0x08001305
 8001330:	08001305 	.word	0x08001305
 8001334:	08001389 	.word	0x08001389
 8001338:	08001305 	.word	0x08001305
 800133c:	08001305 	.word	0x08001305
 8001340:	08001305 	.word	0x08001305
 8001344:	08001305 	.word	0x08001305
 8001348:	08001495 	.word	0x08001495
 800134c:	080013b9 	.word	0x080013b9
 8001350:	08001477 	.word	0x08001477
 8001354:	08001305 	.word	0x08001305
 8001358:	08001305 	.word	0x08001305
 800135c:	080014b7 	.word	0x080014b7
 8001360:	08001305 	.word	0x08001305
 8001364:	080013b9 	.word	0x080013b9
 8001368:	08001305 	.word	0x08001305
 800136c:	08001305 	.word	0x08001305
 8001370:	0800147f 	.word	0x0800147f
 8001374:	682b      	ldr	r3, [r5, #0]
 8001376:	1d1a      	adds	r2, r3, #4
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	602a      	str	r2, [r5, #0]
 800137c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001380:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001384:	2301      	movs	r3, #1
 8001386:	e0a3      	b.n	80014d0 <_printf_i+0x1f4>
 8001388:	6820      	ldr	r0, [r4, #0]
 800138a:	6829      	ldr	r1, [r5, #0]
 800138c:	0606      	lsls	r6, r0, #24
 800138e:	f101 0304 	add.w	r3, r1, #4
 8001392:	d50a      	bpl.n	80013aa <_printf_i+0xce>
 8001394:	680e      	ldr	r6, [r1, #0]
 8001396:	602b      	str	r3, [r5, #0]
 8001398:	2e00      	cmp	r6, #0
 800139a:	da03      	bge.n	80013a4 <_printf_i+0xc8>
 800139c:	232d      	movs	r3, #45	; 0x2d
 800139e:	4276      	negs	r6, r6
 80013a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80013a4:	485e      	ldr	r0, [pc, #376]	; (8001520 <_printf_i+0x244>)
 80013a6:	230a      	movs	r3, #10
 80013a8:	e019      	b.n	80013de <_printf_i+0x102>
 80013aa:	680e      	ldr	r6, [r1, #0]
 80013ac:	602b      	str	r3, [r5, #0]
 80013ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80013b2:	bf18      	it	ne
 80013b4:	b236      	sxthne	r6, r6
 80013b6:	e7ef      	b.n	8001398 <_printf_i+0xbc>
 80013b8:	682b      	ldr	r3, [r5, #0]
 80013ba:	6820      	ldr	r0, [r4, #0]
 80013bc:	1d19      	adds	r1, r3, #4
 80013be:	6029      	str	r1, [r5, #0]
 80013c0:	0601      	lsls	r1, r0, #24
 80013c2:	d501      	bpl.n	80013c8 <_printf_i+0xec>
 80013c4:	681e      	ldr	r6, [r3, #0]
 80013c6:	e002      	b.n	80013ce <_printf_i+0xf2>
 80013c8:	0646      	lsls	r6, r0, #25
 80013ca:	d5fb      	bpl.n	80013c4 <_printf_i+0xe8>
 80013cc:	881e      	ldrh	r6, [r3, #0]
 80013ce:	4854      	ldr	r0, [pc, #336]	; (8001520 <_printf_i+0x244>)
 80013d0:	2f6f      	cmp	r7, #111	; 0x6f
 80013d2:	bf0c      	ite	eq
 80013d4:	2308      	moveq	r3, #8
 80013d6:	230a      	movne	r3, #10
 80013d8:	2100      	movs	r1, #0
 80013da:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80013de:	6865      	ldr	r5, [r4, #4]
 80013e0:	60a5      	str	r5, [r4, #8]
 80013e2:	2d00      	cmp	r5, #0
 80013e4:	bfa2      	ittt	ge
 80013e6:	6821      	ldrge	r1, [r4, #0]
 80013e8:	f021 0104 	bicge.w	r1, r1, #4
 80013ec:	6021      	strge	r1, [r4, #0]
 80013ee:	b90e      	cbnz	r6, 80013f4 <_printf_i+0x118>
 80013f0:	2d00      	cmp	r5, #0
 80013f2:	d04d      	beq.n	8001490 <_printf_i+0x1b4>
 80013f4:	4615      	mov	r5, r2
 80013f6:	fbb6 f1f3 	udiv	r1, r6, r3
 80013fa:	fb03 6711 	mls	r7, r3, r1, r6
 80013fe:	5dc7      	ldrb	r7, [r0, r7]
 8001400:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001404:	4637      	mov	r7, r6
 8001406:	42bb      	cmp	r3, r7
 8001408:	460e      	mov	r6, r1
 800140a:	d9f4      	bls.n	80013f6 <_printf_i+0x11a>
 800140c:	2b08      	cmp	r3, #8
 800140e:	d10b      	bne.n	8001428 <_printf_i+0x14c>
 8001410:	6823      	ldr	r3, [r4, #0]
 8001412:	07de      	lsls	r6, r3, #31
 8001414:	d508      	bpl.n	8001428 <_printf_i+0x14c>
 8001416:	6923      	ldr	r3, [r4, #16]
 8001418:	6861      	ldr	r1, [r4, #4]
 800141a:	4299      	cmp	r1, r3
 800141c:	bfde      	ittt	le
 800141e:	2330      	movle	r3, #48	; 0x30
 8001420:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001424:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8001428:	1b52      	subs	r2, r2, r5
 800142a:	6122      	str	r2, [r4, #16]
 800142c:	f8cd a000 	str.w	sl, [sp]
 8001430:	464b      	mov	r3, r9
 8001432:	aa03      	add	r2, sp, #12
 8001434:	4621      	mov	r1, r4
 8001436:	4640      	mov	r0, r8
 8001438:	f7ff fee2 	bl	8001200 <_printf_common>
 800143c:	3001      	adds	r0, #1
 800143e:	d14c      	bne.n	80014da <_printf_i+0x1fe>
 8001440:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001444:	b004      	add	sp, #16
 8001446:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800144a:	4835      	ldr	r0, [pc, #212]	; (8001520 <_printf_i+0x244>)
 800144c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001450:	6829      	ldr	r1, [r5, #0]
 8001452:	6823      	ldr	r3, [r4, #0]
 8001454:	f851 6b04 	ldr.w	r6, [r1], #4
 8001458:	6029      	str	r1, [r5, #0]
 800145a:	061d      	lsls	r5, r3, #24
 800145c:	d514      	bpl.n	8001488 <_printf_i+0x1ac>
 800145e:	07df      	lsls	r7, r3, #31
 8001460:	bf44      	itt	mi
 8001462:	f043 0320 	orrmi.w	r3, r3, #32
 8001466:	6023      	strmi	r3, [r4, #0]
 8001468:	b91e      	cbnz	r6, 8001472 <_printf_i+0x196>
 800146a:	6823      	ldr	r3, [r4, #0]
 800146c:	f023 0320 	bic.w	r3, r3, #32
 8001470:	6023      	str	r3, [r4, #0]
 8001472:	2310      	movs	r3, #16
 8001474:	e7b0      	b.n	80013d8 <_printf_i+0xfc>
 8001476:	6823      	ldr	r3, [r4, #0]
 8001478:	f043 0320 	orr.w	r3, r3, #32
 800147c:	6023      	str	r3, [r4, #0]
 800147e:	2378      	movs	r3, #120	; 0x78
 8001480:	4828      	ldr	r0, [pc, #160]	; (8001524 <_printf_i+0x248>)
 8001482:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001486:	e7e3      	b.n	8001450 <_printf_i+0x174>
 8001488:	0659      	lsls	r1, r3, #25
 800148a:	bf48      	it	mi
 800148c:	b2b6      	uxthmi	r6, r6
 800148e:	e7e6      	b.n	800145e <_printf_i+0x182>
 8001490:	4615      	mov	r5, r2
 8001492:	e7bb      	b.n	800140c <_printf_i+0x130>
 8001494:	682b      	ldr	r3, [r5, #0]
 8001496:	6826      	ldr	r6, [r4, #0]
 8001498:	6961      	ldr	r1, [r4, #20]
 800149a:	1d18      	adds	r0, r3, #4
 800149c:	6028      	str	r0, [r5, #0]
 800149e:	0635      	lsls	r5, r6, #24
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	d501      	bpl.n	80014a8 <_printf_i+0x1cc>
 80014a4:	6019      	str	r1, [r3, #0]
 80014a6:	e002      	b.n	80014ae <_printf_i+0x1d2>
 80014a8:	0670      	lsls	r0, r6, #25
 80014aa:	d5fb      	bpl.n	80014a4 <_printf_i+0x1c8>
 80014ac:	8019      	strh	r1, [r3, #0]
 80014ae:	2300      	movs	r3, #0
 80014b0:	6123      	str	r3, [r4, #16]
 80014b2:	4615      	mov	r5, r2
 80014b4:	e7ba      	b.n	800142c <_printf_i+0x150>
 80014b6:	682b      	ldr	r3, [r5, #0]
 80014b8:	1d1a      	adds	r2, r3, #4
 80014ba:	602a      	str	r2, [r5, #0]
 80014bc:	681d      	ldr	r5, [r3, #0]
 80014be:	6862      	ldr	r2, [r4, #4]
 80014c0:	2100      	movs	r1, #0
 80014c2:	4628      	mov	r0, r5
 80014c4:	f7fe fe84 	bl	80001d0 <memchr>
 80014c8:	b108      	cbz	r0, 80014ce <_printf_i+0x1f2>
 80014ca:	1b40      	subs	r0, r0, r5
 80014cc:	6060      	str	r0, [r4, #4]
 80014ce:	6863      	ldr	r3, [r4, #4]
 80014d0:	6123      	str	r3, [r4, #16]
 80014d2:	2300      	movs	r3, #0
 80014d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80014d8:	e7a8      	b.n	800142c <_printf_i+0x150>
 80014da:	6923      	ldr	r3, [r4, #16]
 80014dc:	462a      	mov	r2, r5
 80014de:	4649      	mov	r1, r9
 80014e0:	4640      	mov	r0, r8
 80014e2:	47d0      	blx	sl
 80014e4:	3001      	adds	r0, #1
 80014e6:	d0ab      	beq.n	8001440 <_printf_i+0x164>
 80014e8:	6823      	ldr	r3, [r4, #0]
 80014ea:	079b      	lsls	r3, r3, #30
 80014ec:	d413      	bmi.n	8001516 <_printf_i+0x23a>
 80014ee:	68e0      	ldr	r0, [r4, #12]
 80014f0:	9b03      	ldr	r3, [sp, #12]
 80014f2:	4298      	cmp	r0, r3
 80014f4:	bfb8      	it	lt
 80014f6:	4618      	movlt	r0, r3
 80014f8:	e7a4      	b.n	8001444 <_printf_i+0x168>
 80014fa:	2301      	movs	r3, #1
 80014fc:	4632      	mov	r2, r6
 80014fe:	4649      	mov	r1, r9
 8001500:	4640      	mov	r0, r8
 8001502:	47d0      	blx	sl
 8001504:	3001      	adds	r0, #1
 8001506:	d09b      	beq.n	8001440 <_printf_i+0x164>
 8001508:	3501      	adds	r5, #1
 800150a:	68e3      	ldr	r3, [r4, #12]
 800150c:	9903      	ldr	r1, [sp, #12]
 800150e:	1a5b      	subs	r3, r3, r1
 8001510:	42ab      	cmp	r3, r5
 8001512:	dcf2      	bgt.n	80014fa <_printf_i+0x21e>
 8001514:	e7eb      	b.n	80014ee <_printf_i+0x212>
 8001516:	2500      	movs	r5, #0
 8001518:	f104 0619 	add.w	r6, r4, #25
 800151c:	e7f5      	b.n	800150a <_printf_i+0x22e>
 800151e:	bf00      	nop
 8001520:	08001820 	.word	0x08001820
 8001524:	08001831 	.word	0x08001831

08001528 <memcpy>:
 8001528:	440a      	add	r2, r1
 800152a:	4291      	cmp	r1, r2
 800152c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8001530:	d100      	bne.n	8001534 <memcpy+0xc>
 8001532:	4770      	bx	lr
 8001534:	b510      	push	{r4, lr}
 8001536:	f811 4b01 	ldrb.w	r4, [r1], #1
 800153a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800153e:	4291      	cmp	r1, r2
 8001540:	d1f9      	bne.n	8001536 <memcpy+0xe>
 8001542:	bd10      	pop	{r4, pc}

08001544 <memmove>:
 8001544:	4288      	cmp	r0, r1
 8001546:	b510      	push	{r4, lr}
 8001548:	eb01 0402 	add.w	r4, r1, r2
 800154c:	d902      	bls.n	8001554 <memmove+0x10>
 800154e:	4284      	cmp	r4, r0
 8001550:	4623      	mov	r3, r4
 8001552:	d807      	bhi.n	8001564 <memmove+0x20>
 8001554:	1e43      	subs	r3, r0, #1
 8001556:	42a1      	cmp	r1, r4
 8001558:	d008      	beq.n	800156c <memmove+0x28>
 800155a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800155e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8001562:	e7f8      	b.n	8001556 <memmove+0x12>
 8001564:	4402      	add	r2, r0
 8001566:	4601      	mov	r1, r0
 8001568:	428a      	cmp	r2, r1
 800156a:	d100      	bne.n	800156e <memmove+0x2a>
 800156c:	bd10      	pop	{r4, pc}
 800156e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001572:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8001576:	e7f7      	b.n	8001568 <memmove+0x24>

08001578 <_free_r>:
 8001578:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800157a:	2900      	cmp	r1, #0
 800157c:	d044      	beq.n	8001608 <_free_r+0x90>
 800157e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001582:	9001      	str	r0, [sp, #4]
 8001584:	2b00      	cmp	r3, #0
 8001586:	f1a1 0404 	sub.w	r4, r1, #4
 800158a:	bfb8      	it	lt
 800158c:	18e4      	addlt	r4, r4, r3
 800158e:	f000 f913 	bl	80017b8 <__malloc_lock>
 8001592:	4a1e      	ldr	r2, [pc, #120]	; (800160c <_free_r+0x94>)
 8001594:	9801      	ldr	r0, [sp, #4]
 8001596:	6813      	ldr	r3, [r2, #0]
 8001598:	b933      	cbnz	r3, 80015a8 <_free_r+0x30>
 800159a:	6063      	str	r3, [r4, #4]
 800159c:	6014      	str	r4, [r2, #0]
 800159e:	b003      	add	sp, #12
 80015a0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80015a4:	f000 b90e 	b.w	80017c4 <__malloc_unlock>
 80015a8:	42a3      	cmp	r3, r4
 80015aa:	d908      	bls.n	80015be <_free_r+0x46>
 80015ac:	6825      	ldr	r5, [r4, #0]
 80015ae:	1961      	adds	r1, r4, r5
 80015b0:	428b      	cmp	r3, r1
 80015b2:	bf01      	itttt	eq
 80015b4:	6819      	ldreq	r1, [r3, #0]
 80015b6:	685b      	ldreq	r3, [r3, #4]
 80015b8:	1949      	addeq	r1, r1, r5
 80015ba:	6021      	streq	r1, [r4, #0]
 80015bc:	e7ed      	b.n	800159a <_free_r+0x22>
 80015be:	461a      	mov	r2, r3
 80015c0:	685b      	ldr	r3, [r3, #4]
 80015c2:	b10b      	cbz	r3, 80015c8 <_free_r+0x50>
 80015c4:	42a3      	cmp	r3, r4
 80015c6:	d9fa      	bls.n	80015be <_free_r+0x46>
 80015c8:	6811      	ldr	r1, [r2, #0]
 80015ca:	1855      	adds	r5, r2, r1
 80015cc:	42a5      	cmp	r5, r4
 80015ce:	d10b      	bne.n	80015e8 <_free_r+0x70>
 80015d0:	6824      	ldr	r4, [r4, #0]
 80015d2:	4421      	add	r1, r4
 80015d4:	1854      	adds	r4, r2, r1
 80015d6:	42a3      	cmp	r3, r4
 80015d8:	6011      	str	r1, [r2, #0]
 80015da:	d1e0      	bne.n	800159e <_free_r+0x26>
 80015dc:	681c      	ldr	r4, [r3, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	6053      	str	r3, [r2, #4]
 80015e2:	4421      	add	r1, r4
 80015e4:	6011      	str	r1, [r2, #0]
 80015e6:	e7da      	b.n	800159e <_free_r+0x26>
 80015e8:	d902      	bls.n	80015f0 <_free_r+0x78>
 80015ea:	230c      	movs	r3, #12
 80015ec:	6003      	str	r3, [r0, #0]
 80015ee:	e7d6      	b.n	800159e <_free_r+0x26>
 80015f0:	6825      	ldr	r5, [r4, #0]
 80015f2:	1961      	adds	r1, r4, r5
 80015f4:	428b      	cmp	r3, r1
 80015f6:	bf04      	itt	eq
 80015f8:	6819      	ldreq	r1, [r3, #0]
 80015fa:	685b      	ldreq	r3, [r3, #4]
 80015fc:	6063      	str	r3, [r4, #4]
 80015fe:	bf04      	itt	eq
 8001600:	1949      	addeq	r1, r1, r5
 8001602:	6021      	streq	r1, [r4, #0]
 8001604:	6054      	str	r4, [r2, #4]
 8001606:	e7ca      	b.n	800159e <_free_r+0x26>
 8001608:	b003      	add	sp, #12
 800160a:	bd30      	pop	{r4, r5, pc}
 800160c:	20000090 	.word	0x20000090

08001610 <sbrk_aligned>:
 8001610:	b570      	push	{r4, r5, r6, lr}
 8001612:	4e0e      	ldr	r6, [pc, #56]	; (800164c <sbrk_aligned+0x3c>)
 8001614:	460c      	mov	r4, r1
 8001616:	6831      	ldr	r1, [r6, #0]
 8001618:	4605      	mov	r5, r0
 800161a:	b911      	cbnz	r1, 8001622 <sbrk_aligned+0x12>
 800161c:	f000 f8bc 	bl	8001798 <_sbrk_r>
 8001620:	6030      	str	r0, [r6, #0]
 8001622:	4621      	mov	r1, r4
 8001624:	4628      	mov	r0, r5
 8001626:	f000 f8b7 	bl	8001798 <_sbrk_r>
 800162a:	1c43      	adds	r3, r0, #1
 800162c:	d00a      	beq.n	8001644 <sbrk_aligned+0x34>
 800162e:	1cc4      	adds	r4, r0, #3
 8001630:	f024 0403 	bic.w	r4, r4, #3
 8001634:	42a0      	cmp	r0, r4
 8001636:	d007      	beq.n	8001648 <sbrk_aligned+0x38>
 8001638:	1a21      	subs	r1, r4, r0
 800163a:	4628      	mov	r0, r5
 800163c:	f000 f8ac 	bl	8001798 <_sbrk_r>
 8001640:	3001      	adds	r0, #1
 8001642:	d101      	bne.n	8001648 <sbrk_aligned+0x38>
 8001644:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8001648:	4620      	mov	r0, r4
 800164a:	bd70      	pop	{r4, r5, r6, pc}
 800164c:	20000094 	.word	0x20000094

08001650 <_malloc_r>:
 8001650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001654:	1ccd      	adds	r5, r1, #3
 8001656:	f025 0503 	bic.w	r5, r5, #3
 800165a:	3508      	adds	r5, #8
 800165c:	2d0c      	cmp	r5, #12
 800165e:	bf38      	it	cc
 8001660:	250c      	movcc	r5, #12
 8001662:	2d00      	cmp	r5, #0
 8001664:	4607      	mov	r7, r0
 8001666:	db01      	blt.n	800166c <_malloc_r+0x1c>
 8001668:	42a9      	cmp	r1, r5
 800166a:	d905      	bls.n	8001678 <_malloc_r+0x28>
 800166c:	230c      	movs	r3, #12
 800166e:	603b      	str	r3, [r7, #0]
 8001670:	2600      	movs	r6, #0
 8001672:	4630      	mov	r0, r6
 8001674:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001678:	4e2e      	ldr	r6, [pc, #184]	; (8001734 <_malloc_r+0xe4>)
 800167a:	f000 f89d 	bl	80017b8 <__malloc_lock>
 800167e:	6833      	ldr	r3, [r6, #0]
 8001680:	461c      	mov	r4, r3
 8001682:	bb34      	cbnz	r4, 80016d2 <_malloc_r+0x82>
 8001684:	4629      	mov	r1, r5
 8001686:	4638      	mov	r0, r7
 8001688:	f7ff ffc2 	bl	8001610 <sbrk_aligned>
 800168c:	1c43      	adds	r3, r0, #1
 800168e:	4604      	mov	r4, r0
 8001690:	d14d      	bne.n	800172e <_malloc_r+0xde>
 8001692:	6834      	ldr	r4, [r6, #0]
 8001694:	4626      	mov	r6, r4
 8001696:	2e00      	cmp	r6, #0
 8001698:	d140      	bne.n	800171c <_malloc_r+0xcc>
 800169a:	6823      	ldr	r3, [r4, #0]
 800169c:	4631      	mov	r1, r6
 800169e:	4638      	mov	r0, r7
 80016a0:	eb04 0803 	add.w	r8, r4, r3
 80016a4:	f000 f878 	bl	8001798 <_sbrk_r>
 80016a8:	4580      	cmp	r8, r0
 80016aa:	d13a      	bne.n	8001722 <_malloc_r+0xd2>
 80016ac:	6821      	ldr	r1, [r4, #0]
 80016ae:	3503      	adds	r5, #3
 80016b0:	1a6d      	subs	r5, r5, r1
 80016b2:	f025 0503 	bic.w	r5, r5, #3
 80016b6:	3508      	adds	r5, #8
 80016b8:	2d0c      	cmp	r5, #12
 80016ba:	bf38      	it	cc
 80016bc:	250c      	movcc	r5, #12
 80016be:	4629      	mov	r1, r5
 80016c0:	4638      	mov	r0, r7
 80016c2:	f7ff ffa5 	bl	8001610 <sbrk_aligned>
 80016c6:	3001      	adds	r0, #1
 80016c8:	d02b      	beq.n	8001722 <_malloc_r+0xd2>
 80016ca:	6823      	ldr	r3, [r4, #0]
 80016cc:	442b      	add	r3, r5
 80016ce:	6023      	str	r3, [r4, #0]
 80016d0:	e00e      	b.n	80016f0 <_malloc_r+0xa0>
 80016d2:	6822      	ldr	r2, [r4, #0]
 80016d4:	1b52      	subs	r2, r2, r5
 80016d6:	d41e      	bmi.n	8001716 <_malloc_r+0xc6>
 80016d8:	2a0b      	cmp	r2, #11
 80016da:	d916      	bls.n	800170a <_malloc_r+0xba>
 80016dc:	1961      	adds	r1, r4, r5
 80016de:	42a3      	cmp	r3, r4
 80016e0:	6025      	str	r5, [r4, #0]
 80016e2:	bf18      	it	ne
 80016e4:	6059      	strne	r1, [r3, #4]
 80016e6:	6863      	ldr	r3, [r4, #4]
 80016e8:	bf08      	it	eq
 80016ea:	6031      	streq	r1, [r6, #0]
 80016ec:	5162      	str	r2, [r4, r5]
 80016ee:	604b      	str	r3, [r1, #4]
 80016f0:	4638      	mov	r0, r7
 80016f2:	f104 060b 	add.w	r6, r4, #11
 80016f6:	f000 f865 	bl	80017c4 <__malloc_unlock>
 80016fa:	f026 0607 	bic.w	r6, r6, #7
 80016fe:	1d23      	adds	r3, r4, #4
 8001700:	1af2      	subs	r2, r6, r3
 8001702:	d0b6      	beq.n	8001672 <_malloc_r+0x22>
 8001704:	1b9b      	subs	r3, r3, r6
 8001706:	50a3      	str	r3, [r4, r2]
 8001708:	e7b3      	b.n	8001672 <_malloc_r+0x22>
 800170a:	6862      	ldr	r2, [r4, #4]
 800170c:	42a3      	cmp	r3, r4
 800170e:	bf0c      	ite	eq
 8001710:	6032      	streq	r2, [r6, #0]
 8001712:	605a      	strne	r2, [r3, #4]
 8001714:	e7ec      	b.n	80016f0 <_malloc_r+0xa0>
 8001716:	4623      	mov	r3, r4
 8001718:	6864      	ldr	r4, [r4, #4]
 800171a:	e7b2      	b.n	8001682 <_malloc_r+0x32>
 800171c:	4634      	mov	r4, r6
 800171e:	6876      	ldr	r6, [r6, #4]
 8001720:	e7b9      	b.n	8001696 <_malloc_r+0x46>
 8001722:	230c      	movs	r3, #12
 8001724:	603b      	str	r3, [r7, #0]
 8001726:	4638      	mov	r0, r7
 8001728:	f000 f84c 	bl	80017c4 <__malloc_unlock>
 800172c:	e7a1      	b.n	8001672 <_malloc_r+0x22>
 800172e:	6025      	str	r5, [r4, #0]
 8001730:	e7de      	b.n	80016f0 <_malloc_r+0xa0>
 8001732:	bf00      	nop
 8001734:	20000090 	.word	0x20000090

08001738 <_realloc_r>:
 8001738:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800173c:	4680      	mov	r8, r0
 800173e:	4614      	mov	r4, r2
 8001740:	460e      	mov	r6, r1
 8001742:	b921      	cbnz	r1, 800174e <_realloc_r+0x16>
 8001744:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001748:	4611      	mov	r1, r2
 800174a:	f7ff bf81 	b.w	8001650 <_malloc_r>
 800174e:	b92a      	cbnz	r2, 800175c <_realloc_r+0x24>
 8001750:	f7ff ff12 	bl	8001578 <_free_r>
 8001754:	4625      	mov	r5, r4
 8001756:	4628      	mov	r0, r5
 8001758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800175c:	f000 f838 	bl	80017d0 <_malloc_usable_size_r>
 8001760:	4284      	cmp	r4, r0
 8001762:	4607      	mov	r7, r0
 8001764:	d802      	bhi.n	800176c <_realloc_r+0x34>
 8001766:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800176a:	d812      	bhi.n	8001792 <_realloc_r+0x5a>
 800176c:	4621      	mov	r1, r4
 800176e:	4640      	mov	r0, r8
 8001770:	f7ff ff6e 	bl	8001650 <_malloc_r>
 8001774:	4605      	mov	r5, r0
 8001776:	2800      	cmp	r0, #0
 8001778:	d0ed      	beq.n	8001756 <_realloc_r+0x1e>
 800177a:	42bc      	cmp	r4, r7
 800177c:	4622      	mov	r2, r4
 800177e:	4631      	mov	r1, r6
 8001780:	bf28      	it	cs
 8001782:	463a      	movcs	r2, r7
 8001784:	f7ff fed0 	bl	8001528 <memcpy>
 8001788:	4631      	mov	r1, r6
 800178a:	4640      	mov	r0, r8
 800178c:	f7ff fef4 	bl	8001578 <_free_r>
 8001790:	e7e1      	b.n	8001756 <_realloc_r+0x1e>
 8001792:	4635      	mov	r5, r6
 8001794:	e7df      	b.n	8001756 <_realloc_r+0x1e>
	...

08001798 <_sbrk_r>:
 8001798:	b538      	push	{r3, r4, r5, lr}
 800179a:	4d06      	ldr	r5, [pc, #24]	; (80017b4 <_sbrk_r+0x1c>)
 800179c:	2300      	movs	r3, #0
 800179e:	4604      	mov	r4, r0
 80017a0:	4608      	mov	r0, r1
 80017a2:	602b      	str	r3, [r5, #0]
 80017a4:	f7ff fb00 	bl	8000da8 <_sbrk>
 80017a8:	1c43      	adds	r3, r0, #1
 80017aa:	d102      	bne.n	80017b2 <_sbrk_r+0x1a>
 80017ac:	682b      	ldr	r3, [r5, #0]
 80017ae:	b103      	cbz	r3, 80017b2 <_sbrk_r+0x1a>
 80017b0:	6023      	str	r3, [r4, #0]
 80017b2:	bd38      	pop	{r3, r4, r5, pc}
 80017b4:	20000098 	.word	0x20000098

080017b8 <__malloc_lock>:
 80017b8:	4801      	ldr	r0, [pc, #4]	; (80017c0 <__malloc_lock+0x8>)
 80017ba:	f000 b811 	b.w	80017e0 <__retarget_lock_acquire_recursive>
 80017be:	bf00      	nop
 80017c0:	2000009c 	.word	0x2000009c

080017c4 <__malloc_unlock>:
 80017c4:	4801      	ldr	r0, [pc, #4]	; (80017cc <__malloc_unlock+0x8>)
 80017c6:	f000 b80c 	b.w	80017e2 <__retarget_lock_release_recursive>
 80017ca:	bf00      	nop
 80017cc:	2000009c 	.word	0x2000009c

080017d0 <_malloc_usable_size_r>:
 80017d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80017d4:	1f18      	subs	r0, r3, #4
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	bfbc      	itt	lt
 80017da:	580b      	ldrlt	r3, [r1, r0]
 80017dc:	18c0      	addlt	r0, r0, r3
 80017de:	4770      	bx	lr

080017e0 <__retarget_lock_acquire_recursive>:
 80017e0:	4770      	bx	lr

080017e2 <__retarget_lock_release_recursive>:
 80017e2:	4770      	bx	lr

080017e4 <_init>:
 80017e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017e6:	bf00      	nop
 80017e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017ea:	bc08      	pop	{r3}
 80017ec:	469e      	mov	lr, r3
 80017ee:	4770      	bx	lr

080017f0 <_fini>:
 80017f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80017f2:	bf00      	nop
 80017f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80017f6:	bc08      	pop	{r3}
 80017f8:	469e      	mov	lr, r3
 80017fa:	4770      	bx	lr
