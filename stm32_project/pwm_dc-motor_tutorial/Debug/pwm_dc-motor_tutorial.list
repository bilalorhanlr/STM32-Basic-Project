
pwm_dc-motor_tutorial.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000003a8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000530  08000530  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000530  08000530  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08000530  08000530  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000530  08000530  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000530  08000530  00010530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000534  08000534  00010534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08000538  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020004  2**0
                  CONTENTS
 10 .bss          00000020  20000004  20000004  00020004  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000024  20000024  00020004  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000161d  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000513  00000000  00000000  00021651  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001e8  00000000  00000000  00021b68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000001a0  00000000  00000000  00021d50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001e63c  00000000  00000000  00021ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002048  00000000  00000000  0004052c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bb562  00000000  00000000  00042574  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  000fdad6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000005d4  00000000  00000000  000fdb28  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08000518 	.word	0x08000518

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08000518 	.word	0x08000518

080001c8 <main>:
void Timer2_Init(void);
void ADC1_Init(void);
uint32_t Read_ADC(void);
void delay(uint32_t time);

int main(void) {
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0
    GPIO_Init();
 80001ce:	f000 f859 	bl	8000284 <GPIO_Init>
    Timer2_Init();
 80001d2:	f000 f887 	bl	80002e4 <Timer2_Init>
    ADC1_Init();
 80001d6:	f000 f8b9 	bl	800034c <ADC1_Init>

    uint32_t adc_value;
    uint32_t dead_zone = 200; // Ölü bölge değeri (ADC değeri 0-4095)
 80001da:	23c8      	movs	r3, #200	; 0xc8
 80001dc:	60fb      	str	r3, [r7, #12]

    while (1) {
        adc_value = Read_ADC(); // Potansiyometreden ADC okuma
 80001de:	f000 f8d3 	bl	8000388 <Read_ADC>
 80001e2:	60b8      	str	r0, [r7, #8]

        // Ölü bölge kontrolü
        if (adc_value < (2048 - dead_zone)) {
 80001e4:	68fb      	ldr	r3, [r7, #12]
 80001e6:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 80001ea:	68ba      	ldr	r2, [r7, #8]
 80001ec:	429a      	cmp	r2, r3
 80001ee:	d21b      	bcs.n	8000228 <main+0x60>
            // Potansiyometre sola döndü (ters yön)
            GPIOA->ODR |= GPIO_ODR_OD2;  // PA2 HIGH
 80001f0:	4b23      	ldr	r3, [pc, #140]	; (8000280 <main+0xb8>)
 80001f2:	695b      	ldr	r3, [r3, #20]
 80001f4:	4a22      	ldr	r2, [pc, #136]	; (8000280 <main+0xb8>)
 80001f6:	f043 0304 	orr.w	r3, r3, #4
 80001fa:	6153      	str	r3, [r2, #20]
            GPIOA->ODR &= ~GPIO_ODR_OD3; // PA3 LOW (GND)
 80001fc:	4b20      	ldr	r3, [pc, #128]	; (8000280 <main+0xb8>)
 80001fe:	695b      	ldr	r3, [r3, #20]
 8000200:	4a1f      	ldr	r2, [pc, #124]	; (8000280 <main+0xb8>)
 8000202:	f023 0308 	bic.w	r3, r3, #8
 8000206:	6153      	str	r3, [r2, #20]
            uint32_t pwm_value = ((2048 - adc_value) * (TIM2->ARR + 1)) / 2048; // PWM hesapla
 8000208:	68bb      	ldr	r3, [r7, #8]
 800020a:	f5c3 6300 	rsb	r3, r3, #2048	; 0x800
 800020e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000212:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000214:	3201      	adds	r2, #1
 8000216:	fb02 f303 	mul.w	r3, r2, r3
 800021a:	0adb      	lsrs	r3, r3, #11
 800021c:	603b      	str	r3, [r7, #0]
            TIM2->CCR4 = pwm_value;
 800021e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000222:	683b      	ldr	r3, [r7, #0]
 8000224:	6413      	str	r3, [r2, #64]	; 0x40
 8000226:	e025      	b.n	8000274 <main+0xac>
        } else if (adc_value > (2048 + dead_zone)) {
 8000228:	68fb      	ldr	r3, [r7, #12]
 800022a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800022e:	68ba      	ldr	r2, [r7, #8]
 8000230:	429a      	cmp	r2, r3
 8000232:	d91b      	bls.n	800026c <main+0xa4>
            // Potansiyometre sağa döndü (ileri yön)
            GPIOA->ODR &= ~GPIO_ODR_OD2; // PA2 LOW (GND)
 8000234:	4b12      	ldr	r3, [pc, #72]	; (8000280 <main+0xb8>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a11      	ldr	r2, [pc, #68]	; (8000280 <main+0xb8>)
 800023a:	f023 0304 	bic.w	r3, r3, #4
 800023e:	6153      	str	r3, [r2, #20]
            GPIOA->ODR |= GPIO_ODR_OD3;  // PA3 HIGH
 8000240:	4b0f      	ldr	r3, [pc, #60]	; (8000280 <main+0xb8>)
 8000242:	695b      	ldr	r3, [r3, #20]
 8000244:	4a0e      	ldr	r2, [pc, #56]	; (8000280 <main+0xb8>)
 8000246:	f043 0308 	orr.w	r3, r3, #8
 800024a:	6153      	str	r3, [r2, #20]
            uint32_t pwm_value = ((adc_value - 2048) * (TIM2->ARR + 1)) / 2048; // PWM hesapla
 800024c:	68bb      	ldr	r3, [r7, #8]
 800024e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8000252:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000256:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8000258:	3201      	adds	r2, #1
 800025a:	fb02 f303 	mul.w	r3, r2, r3
 800025e:	0adb      	lsrs	r3, r3, #11
 8000260:	607b      	str	r3, [r7, #4]
            TIM2->CCR4 = pwm_value;
 8000262:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	6413      	str	r3, [r2, #64]	; 0x40
 800026a:	e003      	b.n	8000274 <main+0xac>
        } else {
            // Ölü bölgede, motor durdur
            TIM2->CCR4 = 0;
 800026c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000270:	2200      	movs	r2, #0
 8000272:	641a      	str	r2, [r3, #64]	; 0x40
        }

        delay(1000); // Gecikme
 8000274:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000278:	f000 f89e 	bl	80003b8 <delay>
        adc_value = Read_ADC(); // Potansiyometreden ADC okuma
 800027c:	e7af      	b.n	80001de <main+0x16>
 800027e:	bf00      	nop
 8000280:	40020000 	.word	0x40020000

08000284 <GPIO_Init>:
    }
}

void GPIO_Init(void) {
 8000284:	b480      	push	{r7}
 8000286:	af00      	add	r7, sp, #0
    // Enable clock for GPIOA
    RCC->AHB1ENR |= RCC_AHB1ENR_GPIOAEN;
 8000288:	4b14      	ldr	r3, [pc, #80]	; (80002dc <GPIO_Init+0x58>)
 800028a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800028c:	4a13      	ldr	r2, [pc, #76]	; (80002dc <GPIO_Init+0x58>)
 800028e:	f043 0301 	orr.w	r3, r3, #1
 8000292:	6313      	str	r3, [r2, #48]	; 0x30

    // Set PA2 and PA3 as output
    GPIOA->MODER |= GPIO_MODER_MODER2_0 | GPIO_MODER_MODER3_0; // General purpose output mode for PA2 and PA3
 8000294:	4b12      	ldr	r3, [pc, #72]	; (80002e0 <GPIO_Init+0x5c>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a11      	ldr	r2, [pc, #68]	; (80002e0 <GPIO_Init+0x5c>)
 800029a:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800029e:	6013      	str	r3, [r2, #0]

    // Set PA3 as alternate function for PWM output
    GPIOA->MODER &= ~GPIO_MODER_MODER3; // Reset mode for PA3
 80002a0:	4b0f      	ldr	r3, [pc, #60]	; (80002e0 <GPIO_Init+0x5c>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	4a0e      	ldr	r2, [pc, #56]	; (80002e0 <GPIO_Init+0x5c>)
 80002a6:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 80002aa:	6013      	str	r3, [r2, #0]
    GPIOA->MODER |= GPIO_MODER_MODER3_1; // Alternate function mode for PA3
 80002ac:	4b0c      	ldr	r3, [pc, #48]	; (80002e0 <GPIO_Init+0x5c>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a0b      	ldr	r2, [pc, #44]	; (80002e0 <GPIO_Init+0x5c>)
 80002b2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002b6:	6013      	str	r3, [r2, #0]
    GPIOA->AFR[0] |= (1 << 12); // AF1 for PA3
 80002b8:	4b09      	ldr	r3, [pc, #36]	; (80002e0 <GPIO_Init+0x5c>)
 80002ba:	6a1b      	ldr	r3, [r3, #32]
 80002bc:	4a08      	ldr	r2, [pc, #32]	; (80002e0 <GPIO_Init+0x5c>)
 80002be:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80002c2:	6213      	str	r3, [r2, #32]

    // Set PA5 as analog input
    GPIOA->MODER |= GPIO_MODER_MODER5; // Analog mode for PA5
 80002c4:	4b06      	ldr	r3, [pc, #24]	; (80002e0 <GPIO_Init+0x5c>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a05      	ldr	r2, [pc, #20]	; (80002e0 <GPIO_Init+0x5c>)
 80002ca:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 80002ce:	6013      	str	r3, [r2, #0]
}
 80002d0:	bf00      	nop
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop
 80002dc:	40023800 	.word	0x40023800
 80002e0:	40020000 	.word	0x40020000

080002e4 <Timer2_Init>:

void Timer2_Init(void) {
 80002e4:	b480      	push	{r7}
 80002e6:	af00      	add	r7, sp, #0
    // Enable clock for TIM2
    RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;
 80002e8:	4b17      	ldr	r3, [pc, #92]	; (8000348 <Timer2_Init+0x64>)
 80002ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80002ec:	4a16      	ldr	r2, [pc, #88]	; (8000348 <Timer2_Init+0x64>)
 80002ee:	f043 0301 	orr.w	r3, r3, #1
 80002f2:	6413      	str	r3, [r2, #64]	; 0x40

    // Set prescaler value
    TIM2->PSC = 160 - 1; // Adjust prescaler to get a higher PWM frequency (10 kHz)
 80002f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80002f8:	229f      	movs	r2, #159	; 0x9f
 80002fa:	629a      	str	r2, [r3, #40]	; 0x28

    // Set auto-reload value
    TIM2->ARR = 1000 - 1; // Set auto-reload value for 10 kHz PWM frequency
 80002fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000300:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000304:	62da      	str	r2, [r3, #44]	; 0x2c

    // Set compare value (initially 0)
    TIM2->CCR4 = 0;
 8000306:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800030a:	2200      	movs	r2, #0
 800030c:	641a      	str	r2, [r3, #64]	; 0x40

    // Set PWM mode 1 for channel 4
    TIM2->CCMR2 |= TIM_CCMR2_OC4M_1 | TIM_CCMR2_OC4M_2;
 800030e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000312:	69db      	ldr	r3, [r3, #28]
 8000314:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000318:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 800031c:	61d3      	str	r3, [r2, #28]

    // Enable output compare for channel 4
    TIM2->CCER |= TIM_CCER_CC4E;
 800031e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000322:	6a1b      	ldr	r3, [r3, #32]
 8000324:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000328:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800032c:	6213      	str	r3, [r2, #32]

    // Enable counter
    TIM2->CR1 |= TIM_CR1_CEN;
 800032e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000332:	681b      	ldr	r3, [r3, #0]
 8000334:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000338:	f043 0301 	orr.w	r3, r3, #1
 800033c:	6013      	str	r3, [r2, #0]
}
 800033e:	bf00      	nop
 8000340:	46bd      	mov	sp, r7
 8000342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000346:	4770      	bx	lr
 8000348:	40023800 	.word	0x40023800

0800034c <ADC1_Init>:

void ADC1_Init(void) {
 800034c:	b480      	push	{r7}
 800034e:	af00      	add	r7, sp, #0
    // Enable clock for ADC1
    RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;
 8000350:	4b0b      	ldr	r3, [pc, #44]	; (8000380 <ADC1_Init+0x34>)
 8000352:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000354:	4a0a      	ldr	r2, [pc, #40]	; (8000380 <ADC1_Init+0x34>)
 8000356:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800035a:	6453      	str	r3, [r2, #68]	; 0x44

    // ADC1 regular channel 5 (PA5) configuration
    ADC1->SQR3 |= 5; // First conversion in regular sequence is channel 5
 800035c:	4b09      	ldr	r3, [pc, #36]	; (8000384 <ADC1_Init+0x38>)
 800035e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000360:	4a08      	ldr	r2, [pc, #32]	; (8000384 <ADC1_Init+0x38>)
 8000362:	f043 0305 	orr.w	r3, r3, #5
 8000366:	6353      	str	r3, [r2, #52]	; 0x34

    // Enable ADC1
    ADC1->CR2 |= ADC_CR2_ADON;
 8000368:	4b06      	ldr	r3, [pc, #24]	; (8000384 <ADC1_Init+0x38>)
 800036a:	689b      	ldr	r3, [r3, #8]
 800036c:	4a05      	ldr	r2, [pc, #20]	; (8000384 <ADC1_Init+0x38>)
 800036e:	f043 0301 	orr.w	r3, r3, #1
 8000372:	6093      	str	r3, [r2, #8]
}
 8000374:	bf00      	nop
 8000376:	46bd      	mov	sp, r7
 8000378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop
 8000380:	40023800 	.word	0x40023800
 8000384:	40012000 	.word	0x40012000

08000388 <Read_ADC>:

uint32_t Read_ADC(void) {
 8000388:	b480      	push	{r7}
 800038a:	af00      	add	r7, sp, #0
    // Start ADC conversion
    ADC1->CR2 |= ADC_CR2_SWSTART;
 800038c:	4b09      	ldr	r3, [pc, #36]	; (80003b4 <Read_ADC+0x2c>)
 800038e:	689b      	ldr	r3, [r3, #8]
 8000390:	4a08      	ldr	r2, [pc, #32]	; (80003b4 <Read_ADC+0x2c>)
 8000392:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000396:	6093      	str	r3, [r2, #8]

    // Wait for conversion to complete
    while (!(ADC1->SR & ADC_SR_EOC));
 8000398:	bf00      	nop
 800039a:	4b06      	ldr	r3, [pc, #24]	; (80003b4 <Read_ADC+0x2c>)
 800039c:	681b      	ldr	r3, [r3, #0]
 800039e:	f003 0302 	and.w	r3, r3, #2
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d0f9      	beq.n	800039a <Read_ADC+0x12>

    // Read ADC value
    return ADC1->DR;
 80003a6:	4b03      	ldr	r3, [pc, #12]	; (80003b4 <Read_ADC+0x2c>)
 80003a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80003aa:	4618      	mov	r0, r3
 80003ac:	46bd      	mov	sp, r7
 80003ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b2:	4770      	bx	lr
 80003b4:	40012000 	.word	0x40012000

080003b8 <delay>:

void delay(uint32_t time) {
 80003b8:	b480      	push	{r7}
 80003ba:	b083      	sub	sp, #12
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
    while (time--) {
 80003c0:	e000      	b.n	80003c4 <delay+0xc>
        __NOP();
 80003c2:	bf00      	nop
    while (time--) {
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	1e5a      	subs	r2, r3, #1
 80003c8:	607a      	str	r2, [r7, #4]
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d1f9      	bne.n	80003c2 <delay+0xa>
    }
}
 80003ce:	bf00      	nop
 80003d0:	bf00      	nop
 80003d2:	370c      	adds	r7, #12
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr

080003dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80003dc:	b480      	push	{r7}
 80003de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80003e0:	e7fe      	b.n	80003e0 <NMI_Handler+0x4>

080003e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80003e2:	b480      	push	{r7}
 80003e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80003e6:	e7fe      	b.n	80003e6 <HardFault_Handler+0x4>

080003e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80003e8:	b480      	push	{r7}
 80003ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80003ec:	e7fe      	b.n	80003ec <MemManage_Handler+0x4>

080003ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80003ee:	b480      	push	{r7}
 80003f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80003f2:	e7fe      	b.n	80003f2 <BusFault_Handler+0x4>

080003f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80003f4:	b480      	push	{r7}
 80003f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80003f8:	e7fe      	b.n	80003f8 <UsageFault_Handler+0x4>

080003fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80003fa:	b480      	push	{r7}
 80003fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80003fe:	bf00      	nop
 8000400:	46bd      	mov	sp, r7
 8000402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000406:	4770      	bx	lr

08000408 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000408:	b480      	push	{r7}
 800040a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800040c:	bf00      	nop
 800040e:	46bd      	mov	sp, r7
 8000410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000414:	4770      	bx	lr

08000416 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000416:	b480      	push	{r7}
 8000418:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800041a:	bf00      	nop
 800041c:	46bd      	mov	sp, r7
 800041e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000422:	4770      	bx	lr

08000424 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000424:	b580      	push	{r7, lr}
 8000426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000428:	f000 f83e 	bl	80004a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800042c:	bf00      	nop
 800042e:	bd80      	pop	{r7, pc}

08000430 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000430:	b480      	push	{r7}
 8000432:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000434:	4b06      	ldr	r3, [pc, #24]	; (8000450 <SystemInit+0x20>)
 8000436:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800043a:	4a05      	ldr	r2, [pc, #20]	; (8000450 <SystemInit+0x20>)
 800043c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000440:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000444:	bf00      	nop
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr
 800044e:	bf00      	nop
 8000450:	e000ed00 	.word	0xe000ed00

08000454 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000454:	f8df d034 	ldr.w	sp, [pc, #52]	; 800048c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000458:	480d      	ldr	r0, [pc, #52]	; (8000490 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800045a:	490e      	ldr	r1, [pc, #56]	; (8000494 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800045c:	4a0e      	ldr	r2, [pc, #56]	; (8000498 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800045e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000460:	e002      	b.n	8000468 <LoopCopyDataInit>

08000462 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000462:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000464:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000466:	3304      	adds	r3, #4

08000468 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000468:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800046a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800046c:	d3f9      	bcc.n	8000462 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800046e:	4a0b      	ldr	r2, [pc, #44]	; (800049c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000470:	4c0b      	ldr	r4, [pc, #44]	; (80004a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000472:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000474:	e001      	b.n	800047a <LoopFillZerobss>

08000476 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000476:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000478:	3204      	adds	r2, #4

0800047a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800047a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800047c:	d3fb      	bcc.n	8000476 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800047e:	f7ff ffd7 	bl	8000430 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000482:	f000 f825 	bl	80004d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000486:	f7ff fe9f 	bl	80001c8 <main>
  bx  lr    
 800048a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800048c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000490:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000494:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000498:	08000538 	.word	0x08000538
  ldr r2, =_sbss
 800049c:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80004a0:	20000024 	.word	0x20000024

080004a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80004a4:	e7fe      	b.n	80004a4 <ADC_IRQHandler>
	...

080004a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80004ac:	4b06      	ldr	r3, [pc, #24]	; (80004c8 <HAL_IncTick+0x20>)
 80004ae:	781b      	ldrb	r3, [r3, #0]
 80004b0:	461a      	mov	r2, r3
 80004b2:	4b06      	ldr	r3, [pc, #24]	; (80004cc <HAL_IncTick+0x24>)
 80004b4:	681b      	ldr	r3, [r3, #0]
 80004b6:	4413      	add	r3, r2
 80004b8:	4a04      	ldr	r2, [pc, #16]	; (80004cc <HAL_IncTick+0x24>)
 80004ba:	6013      	str	r3, [r2, #0]
}
 80004bc:	bf00      	nop
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop
 80004c8:	20000000 	.word	0x20000000
 80004cc:	20000020 	.word	0x20000020

080004d0 <__libc_init_array>:
 80004d0:	b570      	push	{r4, r5, r6, lr}
 80004d2:	4d0d      	ldr	r5, [pc, #52]	; (8000508 <__libc_init_array+0x38>)
 80004d4:	4c0d      	ldr	r4, [pc, #52]	; (800050c <__libc_init_array+0x3c>)
 80004d6:	1b64      	subs	r4, r4, r5
 80004d8:	10a4      	asrs	r4, r4, #2
 80004da:	2600      	movs	r6, #0
 80004dc:	42a6      	cmp	r6, r4
 80004de:	d109      	bne.n	80004f4 <__libc_init_array+0x24>
 80004e0:	4d0b      	ldr	r5, [pc, #44]	; (8000510 <__libc_init_array+0x40>)
 80004e2:	4c0c      	ldr	r4, [pc, #48]	; (8000514 <__libc_init_array+0x44>)
 80004e4:	f000 f818 	bl	8000518 <_init>
 80004e8:	1b64      	subs	r4, r4, r5
 80004ea:	10a4      	asrs	r4, r4, #2
 80004ec:	2600      	movs	r6, #0
 80004ee:	42a6      	cmp	r6, r4
 80004f0:	d105      	bne.n	80004fe <__libc_init_array+0x2e>
 80004f2:	bd70      	pop	{r4, r5, r6, pc}
 80004f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80004f8:	4798      	blx	r3
 80004fa:	3601      	adds	r6, #1
 80004fc:	e7ee      	b.n	80004dc <__libc_init_array+0xc>
 80004fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8000502:	4798      	blx	r3
 8000504:	3601      	adds	r6, #1
 8000506:	e7f2      	b.n	80004ee <__libc_init_array+0x1e>
 8000508:	08000530 	.word	0x08000530
 800050c:	08000530 	.word	0x08000530
 8000510:	08000530 	.word	0x08000530
 8000514:	08000534 	.word	0x08000534

08000518 <_init>:
 8000518:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800051a:	bf00      	nop
 800051c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800051e:	bc08      	pop	{r3}
 8000520:	469e      	mov	lr, r3
 8000522:	4770      	bx	lr

08000524 <_fini>:
 8000524:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000526:	bf00      	nop
 8000528:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800052a:	bc08      	pop	{r3}
 800052c:	469e      	mov	lr, r3
 800052e:	4770      	bx	lr
